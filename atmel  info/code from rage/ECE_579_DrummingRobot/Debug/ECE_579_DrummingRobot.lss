
ECE_579_DrummingRobot.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000012c  00800100  00002a6a  00002afe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002a6a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000a6  0080022c  0080022c  00002c2a  2**0
                  ALLOC
  3 .stab         000062dc  00000000  00000000  00002c2c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00007b74  00000000  00000000  00008f08  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000188  00000000  00000000  00010a80  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000166b  00000000  00000000  00010c08  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000003a2  00000000  00000000  00012273  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c6e  00000000  00000000  00012615  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000cc  00000000  00000000  00013284  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003e2  00000000  00000000  00013350  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a2d  00000000  00000000  00013732  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  0001415f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__ctors_end>
       4:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
       8:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
       c:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      10:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      14:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      18:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      1c:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      20:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      24:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      28:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      2c:	0c 94 67 0f 	jmp	0x1ece	; 0x1ece <__vector_11>
      30:	0c 94 2a 0c 	jmp	0x1854	; 0x1854 <__vector_12>
      34:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      38:	0c 94 38 0d 	jmp	0x1a70	; 0x1a70 <__vector_14>
      3c:	0c 94 9e 12 	jmp	0x253c	; 0x253c <__vector_15>
      40:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      44:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      48:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      4c:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      50:	0c 94 21 09 	jmp	0x1242	; 0x1242 <__vector_20>
      54:	0c 94 34 0b 	jmp	0x1668	; 0x1668 <__vector_21>
      58:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      5c:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      60:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      64:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      68:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      6c:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      70:	0c 94 4c 09 	jmp	0x1298	; 0x1298 <__vector_28>
      74:	0c 94 5d 0b 	jmp	0x16ba	; 0x16ba <__vector_29>
      78:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      7c:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      80:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      84:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      88:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>

0000008c <__c.2046>:
      8c:	52 6f 62 6f 74 73 20 52 75 6c 65 21 0d 0a 00 00     Robots Rule!....

0000009c <__ctors_end>:
      9c:	11 24       	eor	r1, r1
      9e:	1f be       	out	0x3f, r1	; 63
      a0:	cf ef       	ldi	r28, 0xFF	; 255
      a2:	d0 e4       	ldi	r29, 0x40	; 64
      a4:	de bf       	out	0x3e, r29	; 62
      a6:	cd bf       	out	0x3d, r28	; 61

000000a8 <__do_copy_data>:
      a8:	12 e0       	ldi	r17, 0x02	; 2
      aa:	a0 e0       	ldi	r26, 0x00	; 0
      ac:	b1 e0       	ldi	r27, 0x01	; 1
      ae:	ea e6       	ldi	r30, 0x6A	; 106
      b0:	fa e2       	ldi	r31, 0x2A	; 42
      b2:	00 e0       	ldi	r16, 0x00	; 0
      b4:	0b bf       	out	0x3b, r16	; 59
      b6:	02 c0       	rjmp	.+4      	; 0xbc <__do_copy_data+0x14>
      b8:	07 90       	elpm	r0, Z+
      ba:	0d 92       	st	X+, r0
      bc:	ac 32       	cpi	r26, 0x2C	; 44
      be:	b1 07       	cpc	r27, r17
      c0:	d9 f7       	brne	.-10     	; 0xb8 <__do_copy_data+0x10>

000000c2 <__do_clear_bss>:
      c2:	12 e0       	ldi	r17, 0x02	; 2
      c4:	ac e2       	ldi	r26, 0x2C	; 44
      c6:	b2 e0       	ldi	r27, 0x02	; 2
      c8:	01 c0       	rjmp	.+2      	; 0xcc <.do_clear_bss_start>

000000ca <.do_clear_bss_loop>:
      ca:	1d 92       	st	X+, r1

000000cc <.do_clear_bss_start>:
      cc:	a2 3d       	cpi	r26, 0xD2	; 210
      ce:	b1 07       	cpc	r27, r17
      d0:	e1 f7       	brne	.-8      	; 0xca <.do_clear_bss_loop>
      d2:	0e 94 ee 01 	call	0x3dc	; 0x3dc <main>
      d6:	0c 94 33 15 	jmp	0x2a66	; 0x2a66 <_exit>

000000da <__bad_interrupt>:
      da:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000de <_pololu_atmel_studio_6_workaround>:
#define _POLOLU_ATMEL_STUDIO_6_WORKAROUND

static void __attribute__((used)) _pololu_atmel_studio_6_workaround(void)
{
    static volatile unsigned char w = 1;
    w++;
      de:	80 91 dc 01 	lds	r24, 0x01DC
      e2:	8f 5f       	subi	r24, 0xFF	; 255
      e4:	80 93 dc 01 	sts	0x01DC, r24
}
      e8:	08 95       	ret

000000ea <wait_for_sending_to_finish>:
// finish transmitting on USB_COMM.  We must call this before modifying
// send_buffer or trying to send more bytes, because otherwise we could
// corrupt an existing transmission.
void wait_for_sending_to_finish()
{
	while(!serial_send_buffer_empty(USB_COMM))
      ea:	02 c0       	rjmp	.+4      	; 0xf0 <wait_for_sending_to_finish+0x6>
		serial_check();		// USB_COMM port is always in SERIAL_CHECK mode
      ec:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <serial_check>
// finish transmitting on USB_COMM.  We must call this before modifying
// send_buffer or trying to send more bytes, because otherwise we could
// corrupt an existing transmission.
void wait_for_sending_to_finish()
{
	while(!serial_send_buffer_empty(USB_COMM))
      f0:	82 e0       	ldi	r24, 0x02	; 2
      f2:	0e 94 25 07 	call	0xe4a	; 0xe4a <serial_send_buffer_empty>
      f6:	88 23       	and	r24, r24
      f8:	c9 f3       	breq	.-14     	; 0xec <wait_for_sending_to_finish+0x2>
		serial_check();		// USB_COMM port is always in SERIAL_CHECK mode
}
      fa:	08 95       	ret

000000fc <process_received_byte>:

// process_received_byte: Responds to a byte that has been received on
// USB_COMM.  If you are writing your own serial program, you can
// replace all the code in this function with your own custom behaviors.
void process_received_byte(char byte)
{
      fc:	cf 93       	push	r28
      fe:	c8 2f       	mov	r28, r24
	clear();		// clear LCD
     100:	0e 94 38 06 	call	0xc70	; 0xc70 <clear>
	print("Byte Received");
     104:	80 e0       	ldi	r24, 0x00	; 0
     106:	91 e0       	ldi	r25, 0x01	; 1
     108:	0e 94 4f 06 	call	0xc9e	; 0xc9e <print>
	lcd_goto_xy(0, 1);	// go to start of second LCD row
     10c:	80 e0       	ldi	r24, 0x00	; 0
     10e:	61 e0       	ldi	r22, 0x01	; 1
     110:	0e 94 cf 06 	call	0xd9e	; 0xd9e <lcd_goto_xy>
	print("RX: ");
     114:	8e e0       	ldi	r24, 0x0E	; 14
     116:	91 e0       	ldi	r25, 0x01	; 1
     118:	0e 94 4f 06 	call	0xc9e	; 0xc9e <print>
	delay_ms(750);
     11c:	8e ee       	ldi	r24, 0xEE	; 238
     11e:	92 e0       	ldi	r25, 0x02	; 2
     120:	0e 94 af 0f 	call	0x1f5e	; 0x1f5e <delay_ms>
/*	
byte = '3';*/
	switch(byte)
     124:	c5 33       	cpi	r28, 0x35	; 53
     126:	09 f4       	brne	.+2      	; 0x12a <process_received_byte+0x2e>
     128:	b2 c0       	rjmp	.+356    	; 0x28e <process_received_byte+0x192>
     12a:	c6 33       	cpi	r28, 0x36	; 54
     12c:	90 f4       	brcc	.+36     	; 0x152 <process_received_byte+0x56>
     12e:	c2 33       	cpi	r28, 0x32	; 50
     130:	09 f4       	brne	.+2      	; 0x134 <process_received_byte+0x38>
     132:	5f c0       	rjmp	.+190    	; 0x1f2 <process_received_byte+0xf6>
     134:	c3 33       	cpi	r28, 0x33	; 51
     136:	30 f4       	brcc	.+12     	; 0x144 <process_received_byte+0x48>
     138:	c0 33       	cpi	r28, 0x30	; 48
     13a:	51 f1       	breq	.+84     	; 0x190 <process_received_byte+0x94>
     13c:	c1 33       	cpi	r28, 0x31	; 49
     13e:	09 f0       	breq	.+2      	; 0x142 <process_received_byte+0x46>
     140:	28 c1       	rjmp	.+592    	; 0x392 <process_received_byte+0x296>
     142:	3d c0       	rjmp	.+122    	; 0x1be <process_received_byte+0xc2>
     144:	c3 33       	cpi	r28, 0x33	; 51
     146:	09 f4       	brne	.+2      	; 0x14a <process_received_byte+0x4e>
     148:	6e c0       	rjmp	.+220    	; 0x226 <process_received_byte+0x12a>
     14a:	c4 33       	cpi	r28, 0x34	; 52
     14c:	09 f0       	breq	.+2      	; 0x150 <process_received_byte+0x54>
     14e:	21 c1       	rjmp	.+578    	; 0x392 <process_received_byte+0x296>
     150:	84 c0       	rjmp	.+264    	; 0x25a <process_received_byte+0x15e>
     152:	c8 33       	cpi	r28, 0x38	; 56
     154:	09 f4       	brne	.+2      	; 0x158 <process_received_byte+0x5c>
     156:	e9 c0       	rjmp	.+466    	; 0x32a <process_received_byte+0x22e>
     158:	c9 33       	cpi	r28, 0x39	; 57
     15a:	38 f4       	brcc	.+14     	; 0x16a <process_received_byte+0x6e>
     15c:	c6 33       	cpi	r28, 0x36	; 54
     15e:	09 f4       	brne	.+2      	; 0x162 <process_received_byte+0x66>
     160:	b0 c0       	rjmp	.+352    	; 0x2c2 <process_received_byte+0x1c6>
     162:	c7 33       	cpi	r28, 0x37	; 55
     164:	09 f0       	breq	.+2      	; 0x168 <process_received_byte+0x6c>
     166:	15 c1       	rjmp	.+554    	; 0x392 <process_received_byte+0x296>
     168:	c6 c0       	rjmp	.+396    	; 0x2f6 <process_received_byte+0x1fa>
     16a:	c9 33       	cpi	r28, 0x39	; 57
     16c:	09 f4       	brne	.+2      	; 0x170 <process_received_byte+0x74>
     16e:	f7 c0       	rjmp	.+494    	; 0x35e <process_received_byte+0x262>
     170:	ca 33       	cpi	r28, 0x3A	; 58
     172:	09 f0       	breq	.+2      	; 0x176 <process_received_byte+0x7a>
     174:	0e c1       	rjmp	.+540    	; 0x392 <process_received_byte+0x296>
	{
		// If the character 'A' or 'a' is received, toggle the green LED.
		case ':':
			byte_counter += 1;
     176:	80 91 2c 02 	lds	r24, 0x022C
     17a:	90 91 2d 02 	lds	r25, 0x022D
     17e:	01 96       	adiw	r24, 0x01	; 1
     180:	90 93 2d 02 	sts	0x022D, r25
     184:	80 93 2c 02 	sts	0x022C, r24
			print_character(byte);
     188:	8a e3       	ldi	r24, 0x3A	; 58
     18a:	0e 94 b9 05 	call	0xb72	; 0xb72 <print_character>
			//red_led(TOGGLE);
			break;
     18e:	05 c1       	rjmp	.+522    	; 0x39a <process_received_byte+0x29e>
		case '0':
			test = 0;
     190:	10 92 e0 01 	sts	0x01E0, r1
     194:	10 92 df 01 	sts	0x01DF, r1
			print_long(test);
     198:	60 e0       	ldi	r22, 0x00	; 0
     19a:	70 e0       	ldi	r23, 0x00	; 0
     19c:	cb 01       	movw	r24, r22
     19e:	0e 94 ac 06 	call	0xd58	; 0xd58 <print_long>
			delay_ms(400);
     1a2:	80 e9       	ldi	r24, 0x90	; 144
     1a4:	91 e0       	ldi	r25, 0x01	; 1
     1a6:	0e 94 af 0f 	call	0x1f5e	; 0x1f5e <delay_ms>
			byte_counter += 1;
     1aa:	80 91 2c 02 	lds	r24, 0x022C
     1ae:	90 91 2d 02 	lds	r25, 0x022D
     1b2:	01 96       	adiw	r24, 0x01	; 1
     1b4:	90 93 2d 02 	sts	0x022D, r25
     1b8:	80 93 2c 02 	sts	0x022C, r24
			break;
     1bc:	ee c0       	rjmp	.+476    	; 0x39a <process_received_byte+0x29e>
		case '1':
			test = 1;
     1be:	81 e0       	ldi	r24, 0x01	; 1
     1c0:	90 e0       	ldi	r25, 0x00	; 0
     1c2:	90 93 e0 01 	sts	0x01E0, r25
     1c6:	80 93 df 01 	sts	0x01DF, r24
			print_long(test);
     1ca:	61 e0       	ldi	r22, 0x01	; 1
     1cc:	70 e0       	ldi	r23, 0x00	; 0
     1ce:	80 e0       	ldi	r24, 0x00	; 0
     1d0:	90 e0       	ldi	r25, 0x00	; 0
     1d2:	0e 94 ac 06 	call	0xd58	; 0xd58 <print_long>
			delay_ms(400);
     1d6:	80 e9       	ldi	r24, 0x90	; 144
     1d8:	91 e0       	ldi	r25, 0x01	; 1
     1da:	0e 94 af 0f 	call	0x1f5e	; 0x1f5e <delay_ms>
			byte_counter += 1;
     1de:	80 91 2c 02 	lds	r24, 0x022C
     1e2:	90 91 2d 02 	lds	r25, 0x022D
     1e6:	01 96       	adiw	r24, 0x01	; 1
     1e8:	90 93 2d 02 	sts	0x022D, r25
     1ec:	80 93 2c 02 	sts	0x022C, r24
			break;
     1f0:	d4 c0       	rjmp	.+424    	; 0x39a <process_received_byte+0x29e>
		case '2':
			test = 2;
     1f2:	82 e0       	ldi	r24, 0x02	; 2
     1f4:	90 e0       	ldi	r25, 0x00	; 0
     1f6:	90 93 e0 01 	sts	0x01E0, r25
     1fa:	80 93 df 01 	sts	0x01DF, r24
			print_long(test);
     1fe:	62 e0       	ldi	r22, 0x02	; 2
     200:	70 e0       	ldi	r23, 0x00	; 0
     202:	80 e0       	ldi	r24, 0x00	; 0
     204:	90 e0       	ldi	r25, 0x00	; 0
     206:	0e 94 ac 06 	call	0xd58	; 0xd58 <print_long>
			delay_ms(400);
     20a:	80 e9       	ldi	r24, 0x90	; 144
     20c:	91 e0       	ldi	r25, 0x01	; 1
     20e:	0e 94 af 0f 	call	0x1f5e	; 0x1f5e <delay_ms>
			byte_counter += 1;
     212:	80 91 2c 02 	lds	r24, 0x022C
     216:	90 91 2d 02 	lds	r25, 0x022D
     21a:	01 96       	adiw	r24, 0x01	; 1
     21c:	90 93 2d 02 	sts	0x022D, r25
     220:	80 93 2c 02 	sts	0x022C, r24
			break;
     224:	ba c0       	rjmp	.+372    	; 0x39a <process_received_byte+0x29e>
		case '3':
			test = 3;
     226:	83 e0       	ldi	r24, 0x03	; 3
     228:	90 e0       	ldi	r25, 0x00	; 0
     22a:	90 93 e0 01 	sts	0x01E0, r25
     22e:	80 93 df 01 	sts	0x01DF, r24
			print_long(test);
     232:	63 e0       	ldi	r22, 0x03	; 3
     234:	70 e0       	ldi	r23, 0x00	; 0
     236:	80 e0       	ldi	r24, 0x00	; 0
     238:	90 e0       	ldi	r25, 0x00	; 0
     23a:	0e 94 ac 06 	call	0xd58	; 0xd58 <print_long>
			delay_ms(400);
     23e:	80 e9       	ldi	r24, 0x90	; 144
     240:	91 e0       	ldi	r25, 0x01	; 1
     242:	0e 94 af 0f 	call	0x1f5e	; 0x1f5e <delay_ms>
			byte_counter += 1;
     246:	80 91 2c 02 	lds	r24, 0x022C
     24a:	90 91 2d 02 	lds	r25, 0x022D
     24e:	01 96       	adiw	r24, 0x01	; 1
     250:	90 93 2d 02 	sts	0x022D, r25
     254:	80 93 2c 02 	sts	0x022C, r24
			break;
     258:	a0 c0       	rjmp	.+320    	; 0x39a <process_received_byte+0x29e>
		case '4':
			test = 4;
     25a:	84 e0       	ldi	r24, 0x04	; 4
     25c:	90 e0       	ldi	r25, 0x00	; 0
     25e:	90 93 e0 01 	sts	0x01E0, r25
     262:	80 93 df 01 	sts	0x01DF, r24
			print_long(test);
     266:	64 e0       	ldi	r22, 0x04	; 4
     268:	70 e0       	ldi	r23, 0x00	; 0
     26a:	80 e0       	ldi	r24, 0x00	; 0
     26c:	90 e0       	ldi	r25, 0x00	; 0
     26e:	0e 94 ac 06 	call	0xd58	; 0xd58 <print_long>
			delay_ms(400);
     272:	80 e9       	ldi	r24, 0x90	; 144
     274:	91 e0       	ldi	r25, 0x01	; 1
     276:	0e 94 af 0f 	call	0x1f5e	; 0x1f5e <delay_ms>
			byte_counter += 1;
     27a:	80 91 2c 02 	lds	r24, 0x022C
     27e:	90 91 2d 02 	lds	r25, 0x022D
     282:	01 96       	adiw	r24, 0x01	; 1
     284:	90 93 2d 02 	sts	0x022D, r25
     288:	80 93 2c 02 	sts	0x022C, r24
			break;
     28c:	86 c0       	rjmp	.+268    	; 0x39a <process_received_byte+0x29e>
		case '5':
			test = 5;
     28e:	85 e0       	ldi	r24, 0x05	; 5
     290:	90 e0       	ldi	r25, 0x00	; 0
     292:	90 93 e0 01 	sts	0x01E0, r25
     296:	80 93 df 01 	sts	0x01DF, r24
			print_long(test);
     29a:	65 e0       	ldi	r22, 0x05	; 5
     29c:	70 e0       	ldi	r23, 0x00	; 0
     29e:	80 e0       	ldi	r24, 0x00	; 0
     2a0:	90 e0       	ldi	r25, 0x00	; 0
     2a2:	0e 94 ac 06 	call	0xd58	; 0xd58 <print_long>
			delay_ms(400);
     2a6:	80 e9       	ldi	r24, 0x90	; 144
     2a8:	91 e0       	ldi	r25, 0x01	; 1
     2aa:	0e 94 af 0f 	call	0x1f5e	; 0x1f5e <delay_ms>
			byte_counter += 1;
     2ae:	80 91 2c 02 	lds	r24, 0x022C
     2b2:	90 91 2d 02 	lds	r25, 0x022D
     2b6:	01 96       	adiw	r24, 0x01	; 1
     2b8:	90 93 2d 02 	sts	0x022D, r25
     2bc:	80 93 2c 02 	sts	0x022C, r24
			break;
     2c0:	6c c0       	rjmp	.+216    	; 0x39a <process_received_byte+0x29e>
		case '6':
			test = 6;
     2c2:	86 e0       	ldi	r24, 0x06	; 6
     2c4:	90 e0       	ldi	r25, 0x00	; 0
     2c6:	90 93 e0 01 	sts	0x01E0, r25
     2ca:	80 93 df 01 	sts	0x01DF, r24
			print_long(test);
     2ce:	66 e0       	ldi	r22, 0x06	; 6
     2d0:	70 e0       	ldi	r23, 0x00	; 0
     2d2:	80 e0       	ldi	r24, 0x00	; 0
     2d4:	90 e0       	ldi	r25, 0x00	; 0
     2d6:	0e 94 ac 06 	call	0xd58	; 0xd58 <print_long>
			delay_ms(400);
     2da:	80 e9       	ldi	r24, 0x90	; 144
     2dc:	91 e0       	ldi	r25, 0x01	; 1
     2de:	0e 94 af 0f 	call	0x1f5e	; 0x1f5e <delay_ms>
			byte_counter += 1;
     2e2:	80 91 2c 02 	lds	r24, 0x022C
     2e6:	90 91 2d 02 	lds	r25, 0x022D
     2ea:	01 96       	adiw	r24, 0x01	; 1
     2ec:	90 93 2d 02 	sts	0x022D, r25
     2f0:	80 93 2c 02 	sts	0x022C, r24
			break;
     2f4:	52 c0       	rjmp	.+164    	; 0x39a <process_received_byte+0x29e>
		case '7':
			test = 7;
     2f6:	87 e0       	ldi	r24, 0x07	; 7
     2f8:	90 e0       	ldi	r25, 0x00	; 0
     2fa:	90 93 e0 01 	sts	0x01E0, r25
     2fe:	80 93 df 01 	sts	0x01DF, r24
			print_long(test);
     302:	67 e0       	ldi	r22, 0x07	; 7
     304:	70 e0       	ldi	r23, 0x00	; 0
     306:	80 e0       	ldi	r24, 0x00	; 0
     308:	90 e0       	ldi	r25, 0x00	; 0
     30a:	0e 94 ac 06 	call	0xd58	; 0xd58 <print_long>
			delay_ms(400);
     30e:	80 e9       	ldi	r24, 0x90	; 144
     310:	91 e0       	ldi	r25, 0x01	; 1
     312:	0e 94 af 0f 	call	0x1f5e	; 0x1f5e <delay_ms>
			byte_counter += 1;
     316:	80 91 2c 02 	lds	r24, 0x022C
     31a:	90 91 2d 02 	lds	r25, 0x022D
     31e:	01 96       	adiw	r24, 0x01	; 1
     320:	90 93 2d 02 	sts	0x022D, r25
     324:	80 93 2c 02 	sts	0x022C, r24
			break;
     328:	38 c0       	rjmp	.+112    	; 0x39a <process_received_byte+0x29e>
		case '8':
			test = 8;
     32a:	88 e0       	ldi	r24, 0x08	; 8
     32c:	90 e0       	ldi	r25, 0x00	; 0
     32e:	90 93 e0 01 	sts	0x01E0, r25
     332:	80 93 df 01 	sts	0x01DF, r24
			print_long(test);
     336:	68 e0       	ldi	r22, 0x08	; 8
     338:	70 e0       	ldi	r23, 0x00	; 0
     33a:	80 e0       	ldi	r24, 0x00	; 0
     33c:	90 e0       	ldi	r25, 0x00	; 0
     33e:	0e 94 ac 06 	call	0xd58	; 0xd58 <print_long>
			delay_ms(400);
     342:	80 e9       	ldi	r24, 0x90	; 144
     344:	91 e0       	ldi	r25, 0x01	; 1
     346:	0e 94 af 0f 	call	0x1f5e	; 0x1f5e <delay_ms>
			byte_counter += 1;
     34a:	80 91 2c 02 	lds	r24, 0x022C
     34e:	90 91 2d 02 	lds	r25, 0x022D
     352:	01 96       	adiw	r24, 0x01	; 1
     354:	90 93 2d 02 	sts	0x022D, r25
     358:	80 93 2c 02 	sts	0x022C, r24
			break;
     35c:	1e c0       	rjmp	.+60     	; 0x39a <process_received_byte+0x29e>
		case '9':
			test = 9;
     35e:	89 e0       	ldi	r24, 0x09	; 9
     360:	90 e0       	ldi	r25, 0x00	; 0
     362:	90 93 e0 01 	sts	0x01E0, r25
     366:	80 93 df 01 	sts	0x01DF, r24
			print_long(test);
     36a:	69 e0       	ldi	r22, 0x09	; 9
     36c:	70 e0       	ldi	r23, 0x00	; 0
     36e:	80 e0       	ldi	r24, 0x00	; 0
     370:	90 e0       	ldi	r25, 0x00	; 0
     372:	0e 94 ac 06 	call	0xd58	; 0xd58 <print_long>
			delay_ms(400);
     376:	80 e9       	ldi	r24, 0x90	; 144
     378:	91 e0       	ldi	r25, 0x01	; 1
     37a:	0e 94 af 0f 	call	0x1f5e	; 0x1f5e <delay_ms>
			byte_counter += 1;
     37e:	80 91 2c 02 	lds	r24, 0x022C
     382:	90 91 2d 02 	lds	r25, 0x022D
     386:	01 96       	adiw	r24, 0x01	; 1
     388:	90 93 2d 02 	sts	0x022D, r25
     38c:	80 93 2c 02 	sts	0x022C, r24
			break;
     390:	04 c0       	rjmp	.+8      	; 0x39a <process_received_byte+0x29e>

		// If any other character is received, change its capitalization and
		// send it back.
		default:
			wait_for_sending_to_finish();
     392:	0e 94 75 00 	call	0xea	; 0xea <wait_for_sending_to_finish>
			send_buffer[0] = byte;// ^ 0x20;
     396:	c0 93 9a 02 	sts	0x029A, r28
			//print(byte_counter);
			//delay_ms(400);
			
			break;
	}
}
     39a:	cf 91       	pop	r28
     39c:	08 95       	ret

0000039e <check_for_new_bytes_received>:

void check_for_new_bytes_received()
{
     39e:	cf 93       	push	r28
     3a0:	df 93       	push	r29
	while(serial_get_received_bytes(USB_COMM) != receive_buffer_position)
	{
		// Process the new byte that has just been received.
		process_received_byte(receive_buffer[receive_buffer_position]);
     3a2:	c8 e7       	ldi	r28, 0x78	; 120
     3a4:	d2 e0       	ldi	r29, 0x02	; 2
	}
}

void check_for_new_bytes_received()
{
	while(serial_get_received_bytes(USB_COMM) != receive_buffer_position)
     3a6:	10 c0       	rjmp	.+32     	; 0x3c8 <check_for_new_bytes_received+0x2a>
	{
		// Process the new byte that has just been received.
		process_received_byte(receive_buffer[receive_buffer_position]);
     3a8:	fe 01       	movw	r30, r28
     3aa:	e9 0f       	add	r30, r25
     3ac:	f1 1d       	adc	r31, r1
     3ae:	80 81       	ld	r24, Z
     3b0:	0e 94 7e 00 	call	0xfc	; 0xfc <process_received_byte>

		// Increment receive_buffer_position, but wrap around when it gets to
		// the end of the buffer. 
		if (receive_buffer_position == sizeof(receive_buffer)-1)
     3b4:	80 91 30 02 	lds	r24, 0x0230
     3b8:	8f 31       	cpi	r24, 0x1F	; 31
     3ba:	19 f4       	brne	.+6      	; 0x3c2 <check_for_new_bytes_received+0x24>
		{
			receive_buffer_position = 0;
     3bc:	10 92 30 02 	sts	0x0230, r1
     3c0:	03 c0       	rjmp	.+6      	; 0x3c8 <check_for_new_bytes_received+0x2a>
		}
		else
		{
			receive_buffer_position++;
     3c2:	8f 5f       	subi	r24, 0xFF	; 255
     3c4:	80 93 30 02 	sts	0x0230, r24
	}
}

void check_for_new_bytes_received()
{
	while(serial_get_received_bytes(USB_COMM) != receive_buffer_position)
     3c8:	82 e0       	ldi	r24, 0x02	; 2
     3ca:	0e 94 15 07 	call	0xe2a	; 0xe2a <serial_get_received_bytes>
     3ce:	90 91 30 02 	lds	r25, 0x0230
     3d2:	89 17       	cp	r24, r25
     3d4:	49 f7       	brne	.-46     	; 0x3a8 <check_for_new_bytes_received+0xa>
		else
		{
			receive_buffer_position++;
		}
	}
}
     3d6:	df 91       	pop	r29
     3d8:	cf 91       	pop	r28
     3da:	08 95       	ret

000003dc <main>:

int main()
{

	
	servos_start(demuxPins, sizeof(demuxPins));
     3dc:	81 ee       	ldi	r24, 0xE1	; 225
     3de:	91 e0       	ldi	r25, 0x01	; 1
     3e0:	62 e0       	ldi	r22, 0x02	; 2
     3e2:	0e 94 01 0f 	call	0x1e02	; 0x1e02 <servos_start>
	
	// Set the servo speed to 150.  This means that the pulse width
	// will change by at most 15 microseconds every 20 ms.  So it will
	// take 1.33 seconds to go from a pulse width of 1000 us to 2000 us.
	set_servo_speed(0, init_speed);
     3e6:	80 e0       	ldi	r24, 0x00	; 0
     3e8:	66 e9       	ldi	r22, 0x96	; 150
     3ea:	70 e0       	ldi	r23, 0x00	; 0
     3ec:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <set_servo_speed>
	set_servo_speed(1, init_speed);
     3f0:	81 e0       	ldi	r24, 0x01	; 1
     3f2:	66 e9       	ldi	r22, 0x96	; 150
     3f4:	70 e0       	ldi	r23, 0x00	; 0
     3f6:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <set_servo_speed>
	set_servo_speed(2, init_speed);
     3fa:	82 e0       	ldi	r24, 0x02	; 2
     3fc:	66 e9       	ldi	r22, 0x96	; 150
     3fe:	70 e0       	ldi	r23, 0x00	; 0
     400:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <set_servo_speed>
	set_servo_speed(3, init_speed);
     404:	83 e0       	ldi	r24, 0x03	; 3
     406:	66 e9       	ldi	r22, 0x96	; 150
     408:	70 e0       	ldi	r23, 0x00	; 0
     40a:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <set_servo_speed>

	// Make all the servos go to a neutral position.
	set_servo_target(0, rt_shoulder_rot);	//right shoulder rotation
     40e:	80 e0       	ldi	r24, 0x00	; 0
     410:	60 e4       	ldi	r22, 0x40	; 64
     412:	76 e0       	ldi	r23, 0x06	; 6
     414:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <set_servo_target>
	set_servo_target(1, rt_elbow);				//right elbow
     418:	81 e0       	ldi	r24, 0x01	; 1
     41a:	68 e0       	ldi	r22, 0x08	; 8
     41c:	77 e0       	ldi	r23, 0x07	; 7
     41e:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <set_servo_target>
	set_servo_target(2, lt_shoulder_rot);	//left shoulder rotation
     422:	82 e0       	ldi	r24, 0x02	; 2
     424:	60 eb       	ldi	r22, 0xB0	; 176
     426:	74 e0       	ldi	r23, 0x04	; 4
     428:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <set_servo_target>
	set_servo_target(3, lt_elbow);			//left elbow
     42c:	83 e0       	ldi	r24, 0x03	; 3
     42e:	68 e9       	ldi	r22, 0x98	; 152
     430:	78 e0       	ldi	r23, 0x08	; 8
     432:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <set_servo_target>
	
	clear();	// clear the LCD
     436:	0e 94 38 06 	call	0xc70	; 0xc70 <clear>
	print("Robot Drummer");
     43a:	83 e1       	ldi	r24, 0x13	; 19
     43c:	91 e0       	ldi	r25, 0x01	; 1
     43e:	0e 94 4f 06 	call	0xc9e	; 0xc9e <print>
	lcd_goto_xy(0, 1);	// go to start of second LCD row
     442:	80 e0       	ldi	r24, 0x00	; 0
     444:	61 e0       	ldi	r22, 0x01	; 1
     446:	0e 94 cf 06 	call	0xd9e	; 0xd9e <lcd_goto_xy>
	//print("or press Btn");
	print("Send BPM Mode");
     44a:	81 e2       	ldi	r24, 0x21	; 33
     44c:	91 e0       	ldi	r25, 0x01	; 1
     44e:	0e 94 4f 06 	call	0xc9e	; 0xc9e <print>
	
	delay_ms(3000);
     452:	88 eb       	ldi	r24, 0xB8	; 184
     454:	9b e0       	ldi	r25, 0x0B	; 11
     456:	0e 94 af 0f 	call	0x1f5e	; 0x1f5e <delay_ms>

	// Set the baud rate to 9600 bits per second.  Each byte takes ten bit
	// times, so you can get at most 960 bytes per second at this speed.
	serial_set_baud_rate(USB_COMM, 115200);
     45a:	82 e0       	ldi	r24, 0x02	; 2
     45c:	40 e0       	ldi	r20, 0x00	; 0
     45e:	52 ec       	ldi	r21, 0xC2	; 194
     460:	61 e0       	ldi	r22, 0x01	; 1
     462:	70 e0       	ldi	r23, 0x00	; 0
     464:	0e 94 40 0a 	call	0x1480	; 0x1480 <serial_set_baud_rate>

	// Start receiving bytes in the ring buffer.
	serial_receive_ring(USB_COMM, receive_buffer, sizeof(receive_buffer));
     468:	82 e0       	ldi	r24, 0x02	; 2
     46a:	68 e7       	ldi	r22, 0x78	; 120
     46c:	72 e0       	ldi	r23, 0x02	; 2
     46e:	40 e2       	ldi	r20, 0x20	; 32
     470:	0e 94 1e 09 	call	0x123c	; 0x123c <serial_receive_ring>
		}
		else
		{
			green_led(TOGGLE);
			clear();	// clear the LCD
			print("Robot Drummer");
     474:	0f 2e       	mov	r0, r31
     476:	f3 e1       	ldi	r31, 0x13	; 19
     478:	cf 2e       	mov	r12, r31
     47a:	f1 e0       	ldi	r31, 0x01	; 1
     47c:	df 2e       	mov	r13, r31
     47e:	f0 2d       	mov	r31, r0
			lcd_goto_xy(0, 1);	// go to start of second LCD row
			print("Send BPM Mode");
     480:	0f 2e       	mov	r0, r31
     482:	f1 e2       	ldi	r31, 0x21	; 33
     484:	af 2e       	mov	r10, r31
     486:	f1 e0       	ldi	r31, 0x01	; 1
     488:	bf 2e       	mov	r11, r31
     48a:	f0 2d       	mov	r31, r0
		
		}
		else if (test == 9)			// 9 = 114-119 BPM
		{
			clear();				// clear the LCD
			print("BPM = 114-119");
     48c:	0f 2e       	mov	r0, r31
     48e:	f7 ea       	ldi	r31, 0xA7	; 167
     490:	2f 2e       	mov	r2, r31
     492:	f1 e0       	ldi	r31, 0x01	; 1
     494:	3f 2e       	mov	r3, r31
     496:	f0 2d       	mov	r31, r0
			lcd_goto_xy(0, 1);		// go to start of second LCD row
			print("Mode: ");
     498:	cb e3       	ldi	r28, 0x3B	; 59
     49a:	d1 e0       	ldi	r29, 0x01	; 1
			
		}
		else if (test == 4)			// 4 = 84-89 BPM
		{
			clear();				// clear the LCD
			print("BPM = 84-89");
     49c:	0f 2e       	mov	r0, r31
     49e:	f6 e6       	ldi	r31, 0x66	; 102
     4a0:	4f 2e       	mov	r4, r31
     4a2:	f1 e0       	ldi	r31, 0x01	; 1
     4a4:	5f 2e       	mov	r5, r31
     4a6:	f0 2d       	mov	r31, r0
				
		}
		else if (test == 3)			// 3 = 78-83 BPM
		{
			clear();				// clear the LCD
			print("BPM = 78-83");
     4a8:	0f 2e       	mov	r0, r31
     4aa:	fa e5       	ldi	r31, 0x5A	; 90
     4ac:	6f 2e       	mov	r6, r31
     4ae:	f1 e0       	ldi	r31, 0x01	; 1
     4b0:	7f 2e       	mov	r7, r31
     4b2:	f0 2d       	mov	r31, r0
		}	
		else if (test == 2)			// 2 = 72-77 BPM
		{

			clear();				// clear the LCD
			print("BPM = 72-77");
     4b4:	0f 2e       	mov	r0, r31
     4b6:	fe e4       	ldi	r31, 0x4E	; 78
     4b8:	8f 2e       	mov	r8, r31
     4ba:	f1 e0       	ldi	r31, 0x01	; 1
     4bc:	9f 2e       	mov	r9, r31
     4be:	f0 2d       	mov	r31, r0
		// If the user presses the middle button, send "Robots Rule!"
		// and wait until the user releases the button.
		if (button_is_pressed(MIDDLE_BUTTON))
		{
			wait_for_sending_to_finish();
			memcpy_P(send_buffer, PSTR("Robots Rule!\r\n"), 12);
     4c0:	0a e9       	ldi	r16, 0x9A	; 154
     4c2:	12 e0       	ldi	r17, 0x02	; 2
			serial_send(USB_COMM, send_buffer, 12);
			send_buffer[12] = 0;	// terminate the string
     4c4:	0f 2e       	mov	r0, r31
     4c6:	fc e0       	ldi	r31, 0x0C	; 12
     4c8:	ef 2e       	mov	r14, r31
     4ca:	ff 24       	eor	r15, r15
     4cc:	f0 2d       	mov	r31, r0
     4ce:	e0 0e       	add	r14, r16
     4d0:	f1 1e       	adc	r15, r17
    while(1)
    {
		// USB_COMM is always in SERIAL_CHECK mode, so we need to call this
		// function often to make sure serial receptions and transmissions
		// occur.
		serial_check();
     4d2:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <serial_check>
		// Deal with any new bytes received unless we have a complete sample
		if (byte_counter < 4)
     4d6:	80 91 2c 02 	lds	r24, 0x022C
     4da:	90 91 2d 02 	lds	r25, 0x022D
     4de:	84 30       	cpi	r24, 0x04	; 4
     4e0:	91 05       	cpc	r25, r1
     4e2:	14 f4       	brge	.+4      	; 0x4e8 <main+0x10c>
		{
			check_for_new_bytes_received();
     4e4:	0e 94 cf 01 	call	0x39e	; 0x39e <check_for_new_bytes_received>
		// 6 = 96-101 BPM
		// 7 = 102-107 BPM
		// 8 = 108-113 BPM
		// 9 = 114-119 BPM

		if ( flipper2 % 2 != 0 )
     4e8:	80 91 2e 02 	lds	r24, 0x022E
     4ec:	80 ff       	sbrs	r24, 0
     4ee:	29 c0       	rjmp	.+82     	; 0x542 <main+0x166>
		{
			set_servo_speed(0, init_speed);
     4f0:	80 e0       	ldi	r24, 0x00	; 0
     4f2:	66 e9       	ldi	r22, 0x96	; 150
     4f4:	70 e0       	ldi	r23, 0x00	; 0
     4f6:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <set_servo_speed>
			set_servo_speed(1, init_speed);
     4fa:	81 e0       	ldi	r24, 0x01	; 1
     4fc:	66 e9       	ldi	r22, 0x96	; 150
     4fe:	70 e0       	ldi	r23, 0x00	; 0
     500:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <set_servo_speed>
			set_servo_speed(2, init_speed);
     504:	82 e0       	ldi	r24, 0x02	; 2
     506:	66 e9       	ldi	r22, 0x96	; 150
     508:	70 e0       	ldi	r23, 0x00	; 0
     50a:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <set_servo_speed>
			set_servo_speed(3, init_speed);
     50e:	83 e0       	ldi	r24, 0x03	; 3
     510:	66 e9       	ldi	r22, 0x96	; 150
     512:	70 e0       	ldi	r23, 0x00	; 0
     514:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <set_servo_speed>

			// Make all the servos go to a neutral position.
			set_servo_target(0, rt_shoulder_rot_lt);	//right shoulder rotation
     518:	80 e0       	ldi	r24, 0x00	; 0
     51a:	60 ed       	ldi	r22, 0xD0	; 208
     51c:	77 e0       	ldi	r23, 0x07	; 7
     51e:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <set_servo_target>
			set_servo_target(1, rt_elbow_dn);				//right elbow
     522:	81 e0       	ldi	r24, 0x01	; 1
     524:	6e e0       	ldi	r22, 0x0E	; 14
     526:	76 e0       	ldi	r23, 0x06	; 6
     528:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <set_servo_target>
			set_servo_target(2, lt_shoulder_rot_rt);	//left shoulder rotation
     52c:	82 e0       	ldi	r24, 0x02	; 2
     52e:	62 e5       	ldi	r22, 0x52	; 82
     530:	73 e0       	ldi	r23, 0x03	; 3
     532:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <set_servo_target>
			set_servo_target(3, lt_elbow_up);			//left elbow
     536:	83 e0       	ldi	r24, 0x03	; 3
     538:	62 e0       	ldi	r22, 0x02	; 2
     53a:	78 e0       	ldi	r23, 0x08	; 8
     53c:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <set_servo_target>
     540:	28 c0       	rjmp	.+80     	; 0x592 <main+0x1b6>
		}
		else
		{
			set_servo_speed(0, init_speed);
     542:	80 e0       	ldi	r24, 0x00	; 0
     544:	66 e9       	ldi	r22, 0x96	; 150
     546:	70 e0       	ldi	r23, 0x00	; 0
     548:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <set_servo_speed>
			set_servo_speed(1, init_speed);
     54c:	81 e0       	ldi	r24, 0x01	; 1
     54e:	66 e9       	ldi	r22, 0x96	; 150
     550:	70 e0       	ldi	r23, 0x00	; 0
     552:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <set_servo_speed>
			set_servo_speed(2, init_speed);
     556:	82 e0       	ldi	r24, 0x02	; 2
     558:	66 e9       	ldi	r22, 0x96	; 150
     55a:	70 e0       	ldi	r23, 0x00	; 0
     55c:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <set_servo_speed>
			set_servo_speed(3, init_speed);
     560:	83 e0       	ldi	r24, 0x03	; 3
     562:	66 e9       	ldi	r22, 0x96	; 150
     564:	70 e0       	ldi	r23, 0x00	; 0
     566:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <set_servo_speed>

			// Make all the servos go to a neutral position.
			set_servo_target(0, rt_shoulder_rot_lt);	//right shoulder rotation
     56a:	80 e0       	ldi	r24, 0x00	; 0
     56c:	60 ed       	ldi	r22, 0xD0	; 208
     56e:	77 e0       	ldi	r23, 0x07	; 7
     570:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <set_servo_target>
			set_servo_target(1, rt_elbow_up);				//right elbow
     574:	81 e0       	ldi	r24, 0x01	; 1
     576:	6e e9       	ldi	r22, 0x9E	; 158
     578:	77 e0       	ldi	r23, 0x07	; 7
     57a:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <set_servo_target>
			set_servo_target(2, lt_shoulder_rot_rt);	//left shoulder rotation
     57e:	82 e0       	ldi	r24, 0x02	; 2
     580:	62 e5       	ldi	r22, 0x52	; 82
     582:	73 e0       	ldi	r23, 0x03	; 3
     584:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <set_servo_target>
			set_servo_target(3, lt_elbow_dn);			//left elbow
     588:	83 e0       	ldi	r24, 0x03	; 3
     58a:	60 e6       	ldi	r22, 0x60	; 96
     58c:	79 e0       	ldi	r23, 0x09	; 9
     58e:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <set_servo_target>
		}
		
		flipper2 += 1;				// increment flipper2 toggle value
     592:	80 91 2e 02 	lds	r24, 0x022E
     596:	90 91 2f 02 	lds	r25, 0x022F
     59a:	01 96       	adiw	r24, 0x01	; 1
     59c:	90 93 2f 02 	sts	0x022F, r25
     5a0:	80 93 2e 02 	sts	0x022E, r24
		
		if (test == 0)				// 0 = 60-65 BPM
     5a4:	80 91 df 01 	lds	r24, 0x01DF
     5a8:	90 91 e0 01 	lds	r25, 0x01E0
     5ac:	00 97       	sbiw	r24, 0x00	; 0
     5ae:	29 f5       	brne	.+74     	; 0x5fa <main+0x21e>
		{
			clear();				// clear the LCD
     5b0:	0e 94 38 06 	call	0xc70	; 0xc70 <clear>
			print("BPM = 60-65");
     5b4:	8f e2       	ldi	r24, 0x2F	; 47
     5b6:	91 e0       	ldi	r25, 0x01	; 1
     5b8:	0e 94 4f 06 	call	0xc9e	; 0xc9e <print>
			lcd_goto_xy(0, 1);		// go to start of second LCD row
     5bc:	80 e0       	ldi	r24, 0x00	; 0
     5be:	61 e0       	ldi	r22, 0x01	; 1
     5c0:	0e 94 cf 06 	call	0xd9e	; 0xd9e <lcd_goto_xy>
			print("Mode: ");
     5c4:	ce 01       	movw	r24, r28
     5c6:	0e 94 4f 06 	call	0xc9e	; 0xc9e <print>
			print_long(test);
     5ca:	60 91 df 01 	lds	r22, 0x01DF
     5ce:	70 91 e0 01 	lds	r23, 0x01E0
     5d2:	88 27       	eor	r24, r24
     5d4:	77 fd       	sbrc	r23, 7
     5d6:	80 95       	com	r24
     5d8:	98 2f       	mov	r25, r24
     5da:	0e 94 ac 06 	call	0xd58	; 0xd58 <print_long>
// output, this lets you choose between driving low (val = 0) and driving high (val = 1).
// NOTE: if val is 0xFF (255), this method will toggle the PORT register pin(s).
static inline void set_digital_output_value(struct IOStruct* ioPin, unsigned char val)
{
	if (val == 0xFF)
		*(ioPin->portRegister) ^= ioPin->bitmask;
     5de:	98 b1       	in	r25, 0x08	; 8
     5e0:	80 e1       	ldi	r24, 0x10	; 16
     5e2:	89 27       	eor	r24, r25
     5e4:	88 b9       	out	0x08, r24	; 8
// low-level method for setting the data direction (i.e. input or output) of an pin or set of pins
// described by an IOStruct pointer.
static inline void set_data_direction(struct IOStruct* ioPin, unsigned char val)
{
	if (val)
		*(ioPin->ddrRegister) |= ioPin->bitmask;
     5e6:	3c 9a       	sbi	0x07, 4	; 7
			green_led(TOGGLE);
			delay_ms(500);
     5e8:	84 ef       	ldi	r24, 0xF4	; 244
     5ea:	91 e0       	ldi	r25, 0x01	; 1
     5ec:	0e 94 af 0f 	call	0x1f5e	; 0x1f5e <delay_ms>
			byte_counter = 0;					//reset counter
     5f0:	10 92 2d 02 	sts	0x022D, r1
     5f4:	10 92 2c 02 	sts	0x022C, r1
     5f8:	7b c1       	rjmp	.+758    	; 0x8f0 <main+0x514>
			
		}	
		else if (test == 1)			// 1 = 66-71 BPM
     5fa:	81 30       	cpi	r24, 0x01	; 1
     5fc:	91 05       	cpc	r25, r1
     5fe:	29 f5       	brne	.+74     	; 0x64a <main+0x26e>
		{
			clear();						// clear the LCD
     600:	0e 94 38 06 	call	0xc70	; 0xc70 <clear>
			print("BPM = 66-71");
     604:	82 e4       	ldi	r24, 0x42	; 66
     606:	91 e0       	ldi	r25, 0x01	; 1
     608:	0e 94 4f 06 	call	0xc9e	; 0xc9e <print>
			lcd_goto_xy(0, 1);				// go to start of second LCD row
     60c:	80 e0       	ldi	r24, 0x00	; 0
     60e:	61 e0       	ldi	r22, 0x01	; 1
     610:	0e 94 cf 06 	call	0xd9e	; 0xd9e <lcd_goto_xy>
			print("Mode: ");
     614:	ce 01       	movw	r24, r28
     616:	0e 94 4f 06 	call	0xc9e	; 0xc9e <print>
			print_long(test);
     61a:	60 91 df 01 	lds	r22, 0x01DF
     61e:	70 91 e0 01 	lds	r23, 0x01E0
     622:	88 27       	eor	r24, r24
     624:	77 fd       	sbrc	r23, 7
     626:	80 95       	com	r24
     628:	98 2f       	mov	r25, r24
     62a:	0e 94 ac 06 	call	0xd58	; 0xd58 <print_long>
// output, this lets you choose between driving low (val = 0) and driving high (val = 1).
// NOTE: if val is 0xFF (255), this method will toggle the PORT register pin(s).
static inline void set_digital_output_value(struct IOStruct* ioPin, unsigned char val)
{
	if (val == 0xFF)
		*(ioPin->portRegister) ^= ioPin->bitmask;
     62e:	98 b1       	in	r25, 0x08	; 8
     630:	80 e1       	ldi	r24, 0x10	; 16
     632:	89 27       	eor	r24, r25
     634:	88 b9       	out	0x08, r24	; 8
// low-level method for setting the data direction (i.e. input or output) of an pin or set of pins
// described by an IOStruct pointer.
static inline void set_data_direction(struct IOStruct* ioPin, unsigned char val)
{
	if (val)
		*(ioPin->ddrRegister) |= ioPin->bitmask;
     636:	3c 9a       	sbi	0x07, 4	; 7
			green_led(TOGGLE);
			delay_ms(440);
     638:	88 eb       	ldi	r24, 0xB8	; 184
     63a:	91 e0       	ldi	r25, 0x01	; 1
     63c:	0e 94 af 0f 	call	0x1f5e	; 0x1f5e <delay_ms>
			byte_counter = 0;					//reset counter
     640:	10 92 2d 02 	sts	0x022D, r1
     644:	10 92 2c 02 	sts	0x022C, r1
     648:	53 c1       	rjmp	.+678    	; 0x8f0 <main+0x514>

		}	
		else if (test == 2)			// 2 = 72-77 BPM
     64a:	82 30       	cpi	r24, 0x02	; 2
     64c:	91 05       	cpc	r25, r1
     64e:	21 f5       	brne	.+72     	; 0x698 <main+0x2bc>
		{

			clear();				// clear the LCD
     650:	0e 94 38 06 	call	0xc70	; 0xc70 <clear>
			print("BPM = 72-77");
     654:	c4 01       	movw	r24, r8
     656:	0e 94 4f 06 	call	0xc9e	; 0xc9e <print>
			lcd_goto_xy(0, 1);		// go to start of second LCD row
     65a:	80 e0       	ldi	r24, 0x00	; 0
     65c:	61 e0       	ldi	r22, 0x01	; 1
     65e:	0e 94 cf 06 	call	0xd9e	; 0xd9e <lcd_goto_xy>
			print("Mode: ");
     662:	ce 01       	movw	r24, r28
     664:	0e 94 4f 06 	call	0xc9e	; 0xc9e <print>
			print_long(test);
     668:	60 91 df 01 	lds	r22, 0x01DF
     66c:	70 91 e0 01 	lds	r23, 0x01E0
     670:	88 27       	eor	r24, r24
     672:	77 fd       	sbrc	r23, 7
     674:	80 95       	com	r24
     676:	98 2f       	mov	r25, r24
     678:	0e 94 ac 06 	call	0xd58	; 0xd58 <print_long>
// output, this lets you choose between driving low (val = 0) and driving high (val = 1).
// NOTE: if val is 0xFF (255), this method will toggle the PORT register pin(s).
static inline void set_digital_output_value(struct IOStruct* ioPin, unsigned char val)
{
	if (val == 0xFF)
		*(ioPin->portRegister) ^= ioPin->bitmask;
     67c:	98 b1       	in	r25, 0x08	; 8
     67e:	80 e1       	ldi	r24, 0x10	; 16
     680:	89 27       	eor	r24, r25
     682:	88 b9       	out	0x08, r24	; 8
// low-level method for setting the data direction (i.e. input or output) of an pin or set of pins
// described by an IOStruct pointer.
static inline void set_data_direction(struct IOStruct* ioPin, unsigned char val)
{
	if (val)
		*(ioPin->ddrRegister) |= ioPin->bitmask;
     684:	3c 9a       	sbi	0x07, 4	; 7
			green_led(TOGGLE);
			delay_ms(400);
     686:	80 e9       	ldi	r24, 0x90	; 144
     688:	91 e0       	ldi	r25, 0x01	; 1
     68a:	0e 94 af 0f 	call	0x1f5e	; 0x1f5e <delay_ms>
			byte_counter = 0;					//reset counter
     68e:	10 92 2d 02 	sts	0x022D, r1
     692:	10 92 2c 02 	sts	0x022C, r1
     696:	2c c1       	rjmp	.+600    	; 0x8f0 <main+0x514>
				
		}
		else if (test == 3)			// 3 = 78-83 BPM
     698:	83 30       	cpi	r24, 0x03	; 3
     69a:	91 05       	cpc	r25, r1
     69c:	21 f5       	brne	.+72     	; 0x6e6 <main+0x30a>
		{
			clear();				// clear the LCD
     69e:	0e 94 38 06 	call	0xc70	; 0xc70 <clear>
			print("BPM = 78-83");
     6a2:	c3 01       	movw	r24, r6
     6a4:	0e 94 4f 06 	call	0xc9e	; 0xc9e <print>
			lcd_goto_xy(0, 1);		// go to start of second LCD row
     6a8:	80 e0       	ldi	r24, 0x00	; 0
     6aa:	61 e0       	ldi	r22, 0x01	; 1
     6ac:	0e 94 cf 06 	call	0xd9e	; 0xd9e <lcd_goto_xy>
			print("Mode: ");
     6b0:	ce 01       	movw	r24, r28
     6b2:	0e 94 4f 06 	call	0xc9e	; 0xc9e <print>
			print_long(test);
     6b6:	60 91 df 01 	lds	r22, 0x01DF
     6ba:	70 91 e0 01 	lds	r23, 0x01E0
     6be:	88 27       	eor	r24, r24
     6c0:	77 fd       	sbrc	r23, 7
     6c2:	80 95       	com	r24
     6c4:	98 2f       	mov	r25, r24
     6c6:	0e 94 ac 06 	call	0xd58	; 0xd58 <print_long>
// output, this lets you choose between driving low (val = 0) and driving high (val = 1).
// NOTE: if val is 0xFF (255), this method will toggle the PORT register pin(s).
static inline void set_digital_output_value(struct IOStruct* ioPin, unsigned char val)
{
	if (val == 0xFF)
		*(ioPin->portRegister) ^= ioPin->bitmask;
     6ca:	98 b1       	in	r25, 0x08	; 8
     6cc:	80 e1       	ldi	r24, 0x10	; 16
     6ce:	89 27       	eor	r24, r25
     6d0:	88 b9       	out	0x08, r24	; 8
// low-level method for setting the data direction (i.e. input or output) of an pin or set of pins
// described by an IOStruct pointer.
static inline void set_data_direction(struct IOStruct* ioPin, unsigned char val)
{
	if (val)
		*(ioPin->ddrRegister) |= ioPin->bitmask;
     6d2:	3c 9a       	sbi	0x07, 4	; 7
			green_led(TOGGLE);
			delay_ms(360);
     6d4:	88 e6       	ldi	r24, 0x68	; 104
     6d6:	91 e0       	ldi	r25, 0x01	; 1
     6d8:	0e 94 af 0f 	call	0x1f5e	; 0x1f5e <delay_ms>
			byte_counter = 0;					//reset counter
     6dc:	10 92 2d 02 	sts	0x022D, r1
     6e0:	10 92 2c 02 	sts	0x022C, r1
     6e4:	05 c1       	rjmp	.+522    	; 0x8f0 <main+0x514>

			
		}
		else if (test == 4)			// 4 = 84-89 BPM
     6e6:	84 30       	cpi	r24, 0x04	; 4
     6e8:	91 05       	cpc	r25, r1
     6ea:	21 f5       	brne	.+72     	; 0x734 <main+0x358>
		{
			clear();				// clear the LCD
     6ec:	0e 94 38 06 	call	0xc70	; 0xc70 <clear>
			print("BPM = 84-89");
     6f0:	c2 01       	movw	r24, r4
     6f2:	0e 94 4f 06 	call	0xc9e	; 0xc9e <print>
			lcd_goto_xy(0, 1);		// go to start of second LCD row
     6f6:	80 e0       	ldi	r24, 0x00	; 0
     6f8:	61 e0       	ldi	r22, 0x01	; 1
     6fa:	0e 94 cf 06 	call	0xd9e	; 0xd9e <lcd_goto_xy>
			print("Mode: ");
     6fe:	ce 01       	movw	r24, r28
     700:	0e 94 4f 06 	call	0xc9e	; 0xc9e <print>
			print_long(test);
     704:	60 91 df 01 	lds	r22, 0x01DF
     708:	70 91 e0 01 	lds	r23, 0x01E0
     70c:	88 27       	eor	r24, r24
     70e:	77 fd       	sbrc	r23, 7
     710:	80 95       	com	r24
     712:	98 2f       	mov	r25, r24
     714:	0e 94 ac 06 	call	0xd58	; 0xd58 <print_long>
// output, this lets you choose between driving low (val = 0) and driving high (val = 1).
// NOTE: if val is 0xFF (255), this method will toggle the PORT register pin(s).
static inline void set_digital_output_value(struct IOStruct* ioPin, unsigned char val)
{
	if (val == 0xFF)
		*(ioPin->portRegister) ^= ioPin->bitmask;
     718:	98 b1       	in	r25, 0x08	; 8
     71a:	80 e1       	ldi	r24, 0x10	; 16
     71c:	89 27       	eor	r24, r25
     71e:	88 b9       	out	0x08, r24	; 8
// low-level method for setting the data direction (i.e. input or output) of an pin or set of pins
// described by an IOStruct pointer.
static inline void set_data_direction(struct IOStruct* ioPin, unsigned char val)
{
	if (val)
		*(ioPin->ddrRegister) |= ioPin->bitmask;
     720:	3c 9a       	sbi	0x07, 4	; 7
			green_led(TOGGLE);
			delay_ms(345);
     722:	89 e5       	ldi	r24, 0x59	; 89
     724:	91 e0       	ldi	r25, 0x01	; 1
     726:	0e 94 af 0f 	call	0x1f5e	; 0x1f5e <delay_ms>
			byte_counter = 0;					//reset counter
     72a:	10 92 2d 02 	sts	0x022D, r1
     72e:	10 92 2c 02 	sts	0x022C, r1
     732:	de c0       	rjmp	.+444    	; 0x8f0 <main+0x514>
			
		}
		else if (test == 5)			// 5 = 90-95 BPM
     734:	85 30       	cpi	r24, 0x05	; 5
     736:	91 05       	cpc	r25, r1
     738:	29 f5       	brne	.+74     	; 0x784 <main+0x3a8>
		{
			clear();				// clear the LCD
     73a:	0e 94 38 06 	call	0xc70	; 0xc70 <clear>
			print("BPM = 90-95");
     73e:	82 e7       	ldi	r24, 0x72	; 114
     740:	91 e0       	ldi	r25, 0x01	; 1
     742:	0e 94 4f 06 	call	0xc9e	; 0xc9e <print>
			lcd_goto_xy(0, 1);		// go to start of second LCD row
     746:	80 e0       	ldi	r24, 0x00	; 0
     748:	61 e0       	ldi	r22, 0x01	; 1
     74a:	0e 94 cf 06 	call	0xd9e	; 0xd9e <lcd_goto_xy>
			print("Mode: ");
     74e:	ce 01       	movw	r24, r28
     750:	0e 94 4f 06 	call	0xc9e	; 0xc9e <print>
			print_long(test);
     754:	60 91 df 01 	lds	r22, 0x01DF
     758:	70 91 e0 01 	lds	r23, 0x01E0
     75c:	88 27       	eor	r24, r24
     75e:	77 fd       	sbrc	r23, 7
     760:	80 95       	com	r24
     762:	98 2f       	mov	r25, r24
     764:	0e 94 ac 06 	call	0xd58	; 0xd58 <print_long>
// output, this lets you choose between driving low (val = 0) and driving high (val = 1).
// NOTE: if val is 0xFF (255), this method will toggle the PORT register pin(s).
static inline void set_digital_output_value(struct IOStruct* ioPin, unsigned char val)
{
	if (val == 0xFF)
		*(ioPin->portRegister) ^= ioPin->bitmask;
     768:	98 b1       	in	r25, 0x08	; 8
     76a:	80 e1       	ldi	r24, 0x10	; 16
     76c:	89 27       	eor	r24, r25
     76e:	88 b9       	out	0x08, r24	; 8
// low-level method for setting the data direction (i.e. input or output) of an pin or set of pins
// described by an IOStruct pointer.
static inline void set_data_direction(struct IOStruct* ioPin, unsigned char val)
{
	if (val)
		*(ioPin->ddrRegister) |= ioPin->bitmask;
     770:	3c 9a       	sbi	0x07, 4	; 7
			green_led(TOGGLE);
			delay_ms(335);
     772:	8f e4       	ldi	r24, 0x4F	; 79
     774:	91 e0       	ldi	r25, 0x01	; 1
     776:	0e 94 af 0f 	call	0x1f5e	; 0x1f5e <delay_ms>
			byte_counter = 0;					//reset counter
     77a:	10 92 2d 02 	sts	0x022D, r1
     77e:	10 92 2c 02 	sts	0x022C, r1
     782:	b6 c0       	rjmp	.+364    	; 0x8f0 <main+0x514>
				
		}
		else if (test == 6)			// 6 = 96-101 BPM
     784:	86 30       	cpi	r24, 0x06	; 6
     786:	91 05       	cpc	r25, r1
     788:	29 f5       	brne	.+74     	; 0x7d4 <main+0x3f8>
		{
			clear();				// clear the LCD
     78a:	0e 94 38 06 	call	0xc70	; 0xc70 <clear>
			print("BPM = 96-101");
     78e:	8e e7       	ldi	r24, 0x7E	; 126
     790:	91 e0       	ldi	r25, 0x01	; 1
     792:	0e 94 4f 06 	call	0xc9e	; 0xc9e <print>
			lcd_goto_xy(0, 1);		// go to start of second LCD row
     796:	80 e0       	ldi	r24, 0x00	; 0
     798:	61 e0       	ldi	r22, 0x01	; 1
     79a:	0e 94 cf 06 	call	0xd9e	; 0xd9e <lcd_goto_xy>
			print("Mode: ");
     79e:	ce 01       	movw	r24, r28
     7a0:	0e 94 4f 06 	call	0xc9e	; 0xc9e <print>
			print_long(test);
     7a4:	60 91 df 01 	lds	r22, 0x01DF
     7a8:	70 91 e0 01 	lds	r23, 0x01E0
     7ac:	88 27       	eor	r24, r24
     7ae:	77 fd       	sbrc	r23, 7
     7b0:	80 95       	com	r24
     7b2:	98 2f       	mov	r25, r24
     7b4:	0e 94 ac 06 	call	0xd58	; 0xd58 <print_long>
// output, this lets you choose between driving low (val = 0) and driving high (val = 1).
// NOTE: if val is 0xFF (255), this method will toggle the PORT register pin(s).
static inline void set_digital_output_value(struct IOStruct* ioPin, unsigned char val)
{
	if (val == 0xFF)
		*(ioPin->portRegister) ^= ioPin->bitmask;
     7b8:	98 b1       	in	r25, 0x08	; 8
     7ba:	80 e1       	ldi	r24, 0x10	; 16
     7bc:	89 27       	eor	r24, r25
     7be:	88 b9       	out	0x08, r24	; 8
// low-level method for setting the data direction (i.e. input or output) of an pin or set of pins
// described by an IOStruct pointer.
static inline void set_data_direction(struct IOStruct* ioPin, unsigned char val)
{
	if (val)
		*(ioPin->ddrRegister) |= ioPin->bitmask;
     7c0:	3c 9a       	sbi	0x07, 4	; 7
			green_led(TOGGLE);
			delay_ms(310);
     7c2:	86 e3       	ldi	r24, 0x36	; 54
     7c4:	91 e0       	ldi	r25, 0x01	; 1
     7c6:	0e 94 af 0f 	call	0x1f5e	; 0x1f5e <delay_ms>
			byte_counter = 0;					//reset counter
     7ca:	10 92 2d 02 	sts	0x022D, r1
     7ce:	10 92 2c 02 	sts	0x022C, r1
     7d2:	8e c0       	rjmp	.+284    	; 0x8f0 <main+0x514>
		
		}
		else if (test == 7)			// 7 = 102-107 BPM
     7d4:	87 30       	cpi	r24, 0x07	; 7
     7d6:	91 05       	cpc	r25, r1
     7d8:	29 f5       	brne	.+74     	; 0x824 <main+0x448>
		{
			clear();				// clear the LCD
     7da:	0e 94 38 06 	call	0xc70	; 0xc70 <clear>
			print("BPM = 102-107");
     7de:	8b e8       	ldi	r24, 0x8B	; 139
     7e0:	91 e0       	ldi	r25, 0x01	; 1
     7e2:	0e 94 4f 06 	call	0xc9e	; 0xc9e <print>
			lcd_goto_xy(0, 1);		// go to start of second LCD row
     7e6:	80 e0       	ldi	r24, 0x00	; 0
     7e8:	61 e0       	ldi	r22, 0x01	; 1
     7ea:	0e 94 cf 06 	call	0xd9e	; 0xd9e <lcd_goto_xy>
			print("Mode: ");
     7ee:	ce 01       	movw	r24, r28
     7f0:	0e 94 4f 06 	call	0xc9e	; 0xc9e <print>
			print_long(test);
     7f4:	60 91 df 01 	lds	r22, 0x01DF
     7f8:	70 91 e0 01 	lds	r23, 0x01E0
     7fc:	88 27       	eor	r24, r24
     7fe:	77 fd       	sbrc	r23, 7
     800:	80 95       	com	r24
     802:	98 2f       	mov	r25, r24
     804:	0e 94 ac 06 	call	0xd58	; 0xd58 <print_long>
// output, this lets you choose between driving low (val = 0) and driving high (val = 1).
// NOTE: if val is 0xFF (255), this method will toggle the PORT register pin(s).
static inline void set_digital_output_value(struct IOStruct* ioPin, unsigned char val)
{
	if (val == 0xFF)
		*(ioPin->portRegister) ^= ioPin->bitmask;
     808:	98 b1       	in	r25, 0x08	; 8
     80a:	80 e1       	ldi	r24, 0x10	; 16
     80c:	89 27       	eor	r24, r25
     80e:	88 b9       	out	0x08, r24	; 8
// low-level method for setting the data direction (i.e. input or output) of an pin or set of pins
// described by an IOStruct pointer.
static inline void set_data_direction(struct IOStruct* ioPin, unsigned char val)
{
	if (val)
		*(ioPin->ddrRegister) |= ioPin->bitmask;
     810:	3c 9a       	sbi	0x07, 4	; 7
			green_led(TOGGLE);
			delay_ms(290);
     812:	82 e2       	ldi	r24, 0x22	; 34
     814:	91 e0       	ldi	r25, 0x01	; 1
     816:	0e 94 af 0f 	call	0x1f5e	; 0x1f5e <delay_ms>
			byte_counter = 0;					//reset counter
     81a:	10 92 2d 02 	sts	0x022D, r1
     81e:	10 92 2c 02 	sts	0x022C, r1
     822:	66 c0       	rjmp	.+204    	; 0x8f0 <main+0x514>
	
		}
		else if (test == 8)			// 8 = 108-113 BPM
     824:	88 30       	cpi	r24, 0x08	; 8
     826:	91 05       	cpc	r25, r1
     828:	29 f5       	brne	.+74     	; 0x874 <main+0x498>
		{
			clear();				// clear the LCD
     82a:	0e 94 38 06 	call	0xc70	; 0xc70 <clear>
			print("BPM = 108-113");
     82e:	89 e9       	ldi	r24, 0x99	; 153
     830:	91 e0       	ldi	r25, 0x01	; 1
     832:	0e 94 4f 06 	call	0xc9e	; 0xc9e <print>
			lcd_goto_xy(0, 1);		// go to start of second LCD row
     836:	80 e0       	ldi	r24, 0x00	; 0
     838:	61 e0       	ldi	r22, 0x01	; 1
     83a:	0e 94 cf 06 	call	0xd9e	; 0xd9e <lcd_goto_xy>
			print("Mode: ");
     83e:	ce 01       	movw	r24, r28
     840:	0e 94 4f 06 	call	0xc9e	; 0xc9e <print>
			print_long(test);
     844:	60 91 df 01 	lds	r22, 0x01DF
     848:	70 91 e0 01 	lds	r23, 0x01E0
     84c:	88 27       	eor	r24, r24
     84e:	77 fd       	sbrc	r23, 7
     850:	80 95       	com	r24
     852:	98 2f       	mov	r25, r24
     854:	0e 94 ac 06 	call	0xd58	; 0xd58 <print_long>
// output, this lets you choose between driving low (val = 0) and driving high (val = 1).
// NOTE: if val is 0xFF (255), this method will toggle the PORT register pin(s).
static inline void set_digital_output_value(struct IOStruct* ioPin, unsigned char val)
{
	if (val == 0xFF)
		*(ioPin->portRegister) ^= ioPin->bitmask;
     858:	98 b1       	in	r25, 0x08	; 8
     85a:	80 e1       	ldi	r24, 0x10	; 16
     85c:	89 27       	eor	r24, r25
     85e:	88 b9       	out	0x08, r24	; 8
// low-level method for setting the data direction (i.e. input or output) of an pin or set of pins
// described by an IOStruct pointer.
static inline void set_data_direction(struct IOStruct* ioPin, unsigned char val)
{
	if (val)
		*(ioPin->ddrRegister) |= ioPin->bitmask;
     860:	3c 9a       	sbi	0x07, 4	; 7
			green_led(TOGGLE);
			delay_ms(270);
     862:	8e e0       	ldi	r24, 0x0E	; 14
     864:	91 e0       	ldi	r25, 0x01	; 1
     866:	0e 94 af 0f 	call	0x1f5e	; 0x1f5e <delay_ms>
			byte_counter = 0;					//reset counter
     86a:	10 92 2d 02 	sts	0x022D, r1
     86e:	10 92 2c 02 	sts	0x022C, r1
     872:	3e c0       	rjmp	.+124    	; 0x8f0 <main+0x514>
		
		}
		else if (test == 9)			// 9 = 114-119 BPM
     874:	89 30       	cpi	r24, 0x09	; 9
     876:	91 05       	cpc	r25, r1
     878:	21 f5       	brne	.+72     	; 0x8c2 <main+0x4e6>
		{
			clear();				// clear the LCD
     87a:	0e 94 38 06 	call	0xc70	; 0xc70 <clear>
			print("BPM = 114-119");
     87e:	c1 01       	movw	r24, r2
     880:	0e 94 4f 06 	call	0xc9e	; 0xc9e <print>
			lcd_goto_xy(0, 1);		// go to start of second LCD row
     884:	80 e0       	ldi	r24, 0x00	; 0
     886:	61 e0       	ldi	r22, 0x01	; 1
     888:	0e 94 cf 06 	call	0xd9e	; 0xd9e <lcd_goto_xy>
			print("Mode: ");
     88c:	ce 01       	movw	r24, r28
     88e:	0e 94 4f 06 	call	0xc9e	; 0xc9e <print>
			print_long(test);
     892:	60 91 df 01 	lds	r22, 0x01DF
     896:	70 91 e0 01 	lds	r23, 0x01E0
     89a:	88 27       	eor	r24, r24
     89c:	77 fd       	sbrc	r23, 7
     89e:	80 95       	com	r24
     8a0:	98 2f       	mov	r25, r24
     8a2:	0e 94 ac 06 	call	0xd58	; 0xd58 <print_long>
// output, this lets you choose between driving low (val = 0) and driving high (val = 1).
// NOTE: if val is 0xFF (255), this method will toggle the PORT register pin(s).
static inline void set_digital_output_value(struct IOStruct* ioPin, unsigned char val)
{
	if (val == 0xFF)
		*(ioPin->portRegister) ^= ioPin->bitmask;
     8a6:	98 b1       	in	r25, 0x08	; 8
     8a8:	80 e1       	ldi	r24, 0x10	; 16
     8aa:	89 27       	eor	r24, r25
     8ac:	88 b9       	out	0x08, r24	; 8
// low-level method for setting the data direction (i.e. input or output) of an pin or set of pins
// described by an IOStruct pointer.
static inline void set_data_direction(struct IOStruct* ioPin, unsigned char val)
{
	if (val)
		*(ioPin->ddrRegister) |= ioPin->bitmask;
     8ae:	3c 9a       	sbi	0x07, 4	; 7
			green_led(TOGGLE);
			delay_ms(250);
     8b0:	8a ef       	ldi	r24, 0xFA	; 250
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	0e 94 af 0f 	call	0x1f5e	; 0x1f5e <delay_ms>
			byte_counter = 0;					//reset counter
     8b8:	10 92 2d 02 	sts	0x022D, r1
     8bc:	10 92 2c 02 	sts	0x022C, r1
     8c0:	17 c0       	rjmp	.+46     	; 0x8f0 <main+0x514>
// output, this lets you choose between driving low (val = 0) and driving high (val = 1).
// NOTE: if val is 0xFF (255), this method will toggle the PORT register pin(s).
static inline void set_digital_output_value(struct IOStruct* ioPin, unsigned char val)
{
	if (val == 0xFF)
		*(ioPin->portRegister) ^= ioPin->bitmask;
     8c2:	98 b1       	in	r25, 0x08	; 8
     8c4:	80 e1       	ldi	r24, 0x10	; 16
     8c6:	89 27       	eor	r24, r25
     8c8:	88 b9       	out	0x08, r24	; 8
// low-level method for setting the data direction (i.e. input or output) of an pin or set of pins
// described by an IOStruct pointer.
static inline void set_data_direction(struct IOStruct* ioPin, unsigned char val)
{
	if (val)
		*(ioPin->ddrRegister) |= ioPin->bitmask;
     8ca:	3c 9a       	sbi	0x07, 4	; 7
	
		}
		else
		{
			green_led(TOGGLE);
			clear();	// clear the LCD
     8cc:	0e 94 38 06 	call	0xc70	; 0xc70 <clear>
			print("Robot Drummer");
     8d0:	c6 01       	movw	r24, r12
     8d2:	0e 94 4f 06 	call	0xc9e	; 0xc9e <print>
			lcd_goto_xy(0, 1);	// go to start of second LCD row
     8d6:	80 e0       	ldi	r24, 0x00	; 0
     8d8:	61 e0       	ldi	r22, 0x01	; 1
     8da:	0e 94 cf 06 	call	0xd9e	; 0xd9e <lcd_goto_xy>
			print("Send BPM Mode");
     8de:	c5 01       	movw	r24, r10
     8e0:	0e 94 4f 06 	call	0xc9e	; 0xc9e <print>
			delay_ms(pb_delay);
     8e4:	80 91 dd 01 	lds	r24, 0x01DD
     8e8:	90 91 de 01 	lds	r25, 0x01DE
     8ec:	0e 94 af 0f 	call	0x1f5e	; 0x1f5e <delay_ms>
		}
		
		
		// If the user presses the middle button, send "Robots Rule!"
		// and wait until the user releases the button.
		if (button_is_pressed(MIDDLE_BUTTON))
     8f0:	88 e0       	ldi	r24, 0x08	; 8
     8f2:	0e 94 12 07 	call	0xe24	; 0xe24 <button_is_pressed>
     8f6:	88 23       	and	r24, r24
     8f8:	79 f1       	breq	.+94     	; 0x958 <main+0x57c>
		{
			wait_for_sending_to_finish();
     8fa:	0e 94 75 00 	call	0xea	; 0xea <wait_for_sending_to_finish>
			memcpy_P(send_buffer, PSTR("Robots Rule!\r\n"), 12);
     8fe:	c8 01       	movw	r24, r16
     900:	6c e8       	ldi	r22, 0x8C	; 140
     902:	70 e0       	ldi	r23, 0x00	; 0
     904:	4c e0       	ldi	r20, 0x0C	; 12
     906:	50 e0       	ldi	r21, 0x00	; 0
     908:	0e 94 2a 15 	call	0x2a54	; 0x2a54 <memcpy_P>
			serial_send(USB_COMM, send_buffer, 12);
     90c:	82 e0       	ldi	r24, 0x02	; 2
     90e:	b8 01       	movw	r22, r16
     910:	4c e0       	ldi	r20, 0x0C	; 12
     912:	0e 94 31 0b 	call	0x1662	; 0x1662 <serial_send>
			send_buffer[12] = 0;	// terminate the string
     916:	f7 01       	movw	r30, r14
     918:	10 82       	st	Z, r1
			clear();				// clear the LCD
     91a:	0e 94 38 06 	call	0xc70	; 0xc70 <clear>
			lcd_goto_xy(0, 1);		// go to start of second LCD row
     91e:	80 e0       	ldi	r24, 0x00	; 0
     920:	61 e0       	ldi	r22, 0x01	; 1
     922:	0e 94 cf 06 	call	0xd9e	; 0xd9e <lcd_goto_xy>
			print("TX: ");
     926:	85 eb       	ldi	r24, 0xB5	; 181
     928:	91 e0       	ldi	r25, 0x01	; 1
     92a:	0e 94 4f 06 	call	0xc9e	; 0xc9e <print>
			print_long(test);
     92e:	60 91 df 01 	lds	r22, 0x01DF
     932:	70 91 e0 01 	lds	r23, 0x01E0
     936:	88 27       	eor	r24, r24
     938:	77 fd       	sbrc	r23, 7
     93a:	80 95       	com	r24
     93c:	98 2f       	mov	r25, r24
     93e:	0e 94 ac 06 	call	0xd58	; 0xd58 <print_long>
			
			delay_ms(2000);
     942:	80 ed       	ldi	r24, 0xD0	; 208
     944:	97 e0       	ldi	r25, 0x07	; 7
     946:	0e 94 af 0f 	call	0x1f5e	; 0x1f5e <delay_ms>
			byte_counter = 0;		// reset detect cycle by pressing button
     94a:	10 92 2d 02 	sts	0x022D, r1
     94e:	10 92 2c 02 	sts	0x022C, r1
			// serial_check() function, which could cause serial bytes to be
			// lost.  It will also not be able to send any bytes, so the bytes
			// bytes we just queued for transmission will not be sent until
			// after the following blocking function exits once the button is
			// released. 
			wait_for_button_release(MIDDLE_BUTTON);
     952:	88 e0       	ldi	r24, 0x08	; 8
     954:	0e 94 fe 06 	call	0xdfc	; 0xdfc <wait_for_button_release>
		}
		// If the user presses the middle button, send "Robots Rule!"
		// and wait until the user releases the button.
		if (button_is_pressed(TOP_BUTTON))
     958:	80 e2       	ldi	r24, 0x20	; 32
     95a:	0e 94 12 07 	call	0xe24	; 0xe24 <button_is_pressed>
     95e:	88 23       	and	r24, r24
     960:	81 f1       	breq	.+96     	; 0x9c2 <main+0x5e6>
		{
			wait_for_sending_to_finish();
     962:	0e 94 75 00 	call	0xea	; 0xea <wait_for_sending_to_finish>
			clear();				// clear the LCD
     966:	0e 94 38 06 	call	0xc70	; 0xc70 <clear>
			print("Delay Up");
     96a:	8a eb       	ldi	r24, 0xBA	; 186
     96c:	91 e0       	ldi	r25, 0x01	; 1
     96e:	0e 94 4f 06 	call	0xc9e	; 0xc9e <print>
			
			if (pb_delay <= 500)
     972:	80 91 dd 01 	lds	r24, 0x01DD
     976:	90 91 de 01 	lds	r25, 0x01DE
     97a:	f1 e0       	ldi	r31, 0x01	; 1
     97c:	85 3f       	cpi	r24, 0xF5	; 245
     97e:	9f 07       	cpc	r25, r31
     980:	28 f4       	brcc	.+10     	; 0x98c <main+0x5b0>
			{
				pb_delay = pb_delay + 10;
     982:	0a 96       	adiw	r24, 0x0a	; 10
     984:	90 93 de 01 	sts	0x01DE, r25
     988:	80 93 dd 01 	sts	0x01DD, r24
			}
		
			lcd_goto_xy(0, 1);		// go to start of second LCD row
     98c:	80 e0       	ldi	r24, 0x00	; 0
     98e:	61 e0       	ldi	r22, 0x01	; 1
     990:	0e 94 cf 06 	call	0xd9e	; 0xd9e <lcd_goto_xy>
			print("Milliseconds:");
     994:	83 ec       	ldi	r24, 0xC3	; 195
     996:	91 e0       	ldi	r25, 0x01	; 1
     998:	0e 94 4f 06 	call	0xc9e	; 0xc9e <print>
			print_long(pb_delay);
     99c:	60 91 dd 01 	lds	r22, 0x01DD
     9a0:	70 91 de 01 	lds	r23, 0x01DE
     9a4:	80 e0       	ldi	r24, 0x00	; 0
     9a6:	90 e0       	ldi	r25, 0x00	; 0
     9a8:	0e 94 ac 06 	call	0xd58	; 0xd58 <print_long>
			delay_ms(250);
     9ac:	8a ef       	ldi	r24, 0xFA	; 250
     9ae:	90 e0       	ldi	r25, 0x00	; 0
     9b0:	0e 94 af 0f 	call	0x1f5e	; 0x1f5e <delay_ms>
			byte_counter = 0;		// reset detect cycle by pressing button
     9b4:	10 92 2d 02 	sts	0x022D, r1
     9b8:	10 92 2c 02 	sts	0x022C, r1
			wait_for_button_release(TOP_BUTTON);
     9bc:	80 e2       	ldi	r24, 0x20	; 32
     9be:	0e 94 fe 06 	call	0xdfc	; 0xdfc <wait_for_button_release>
		}
		// If the user presses the middle button, send "Robots Rule!"
		// and wait until the user releases the button.
		if (button_is_pressed(BOTTOM_BUTTON))
     9c2:	84 e0       	ldi	r24, 0x04	; 4
     9c4:	0e 94 12 07 	call	0xe24	; 0xe24 <button_is_pressed>
     9c8:	88 23       	and	r24, r24
     9ca:	09 f4       	brne	.+2      	; 0x9ce <main+0x5f2>
     9cc:	82 cd       	rjmp	.-1276   	; 0x4d2 <main+0xf6>
		{
			wait_for_sending_to_finish();
     9ce:	0e 94 75 00 	call	0xea	; 0xea <wait_for_sending_to_finish>
			clear();				// clear the LCD
     9d2:	0e 94 38 06 	call	0xc70	; 0xc70 <clear>
			print("Delay Down");
     9d6:	81 ed       	ldi	r24, 0xD1	; 209
     9d8:	91 e0       	ldi	r25, 0x01	; 1
     9da:	0e 94 4f 06 	call	0xc9e	; 0xc9e <print>
					
			if (pb_delay >= 50)
     9de:	80 91 dd 01 	lds	r24, 0x01DD
     9e2:	90 91 de 01 	lds	r25, 0x01DE
     9e6:	82 33       	cpi	r24, 0x32	; 50
     9e8:	91 05       	cpc	r25, r1
     9ea:	28 f0       	brcs	.+10     	; 0x9f6 <main+0x61a>
			{
				pb_delay = pb_delay - 10;
     9ec:	0a 97       	sbiw	r24, 0x0a	; 10
     9ee:	90 93 de 01 	sts	0x01DE, r25
     9f2:	80 93 dd 01 	sts	0x01DD, r24
			}
			
			lcd_goto_xy(0, 1);		// go to start of second LCD row
     9f6:	80 e0       	ldi	r24, 0x00	; 0
     9f8:	61 e0       	ldi	r22, 0x01	; 1
     9fa:	0e 94 cf 06 	call	0xd9e	; 0xd9e <lcd_goto_xy>
			print("Milliseconds:");
     9fe:	83 ec       	ldi	r24, 0xC3	; 195
     a00:	91 e0       	ldi	r25, 0x01	; 1
     a02:	0e 94 4f 06 	call	0xc9e	; 0xc9e <print>
			print_long(pb_delay);
     a06:	60 91 dd 01 	lds	r22, 0x01DD
     a0a:	70 91 de 01 	lds	r23, 0x01DE
     a0e:	80 e0       	ldi	r24, 0x00	; 0
     a10:	90 e0       	ldi	r25, 0x00	; 0
     a12:	0e 94 ac 06 	call	0xd58	; 0xd58 <print_long>
			delay_ms(200);
     a16:	88 ec       	ldi	r24, 0xC8	; 200
     a18:	90 e0       	ldi	r25, 0x00	; 0
     a1a:	0e 94 af 0f 	call	0x1f5e	; 0x1f5e <delay_ms>
			byte_counter = 0;		// reset detect cycle by pressing button
     a1e:	10 92 2d 02 	sts	0x022D, r1
     a22:	10 92 2c 02 	sts	0x022C, r1
			wait_for_button_release(BOTTOM_BUTTON);
     a26:	84 e0       	ldi	r24, 0x04	; 4
     a28:	0e 94 fe 06 	call	0xdfc	; 0xdfc <wait_for_button_release>
     a2c:	52 cd       	rjmp	.-1372   	; 0x4d2 <main+0xf6>

00000a2e <delayMicroseconds.clone.0>:
     a2e:	81 e0       	ldi	r24, 0x01	; 1
     a30:	90 e0       	ldi	r25, 0x00	; 0
     a32:	6f 93       	push	r22
     a34:	64 e0       	ldi	r22, 0x04	; 4
     a36:	6a 95       	dec	r22
     a38:	f1 f7       	brne	.-4      	; 0xa36 <delayMicroseconds.clone.0+0x8>
     a3a:	6f 91       	pop	r22
     a3c:	01 97       	sbiw	r24, 0x01	; 1
     a3e:	c9 f7       	brne	.-14     	; 0xa32 <delayMicroseconds.clone.0+0x4>
     a40:	08 95       	ret

00000a42 <_ZN12OrangutanLCD8busyWaitEv>:
     a42:	0f 93       	push	r16
     a44:	1f 93       	push	r17
     a46:	cf 93       	push	r28
     a48:	df 93       	push	r29
     a4a:	17 b1       	in	r17, 0x07	; 7
     a4c:	3d 98       	cbi	0x07, 5	; 7
     a4e:	28 98       	cbi	0x05, 0	; 5
     a50:	29 9a       	sbi	0x05, 1	; 5
     a52:	c0 e0       	ldi	r28, 0x00	; 0
     a54:	d0 e0       	ldi	r29, 0x00	; 0
     a56:	0e 94 17 05 	call	0xa2e	; 0xa2e <delayMicroseconds.clone.0>
     a5a:	2a 9a       	sbi	0x05, 2	; 5
     a5c:	0e 94 17 05 	call	0xa2e	; 0xa2e <delayMicroseconds.clone.0>
     a60:	06 b1       	in	r16, 0x06	; 6
     a62:	2a 98       	cbi	0x05, 2	; 5
     a64:	0e 94 17 05 	call	0xa2e	; 0xa2e <delayMicroseconds.clone.0>
     a68:	2a 9a       	sbi	0x05, 2	; 5
     a6a:	0e 94 17 05 	call	0xa2e	; 0xa2e <delayMicroseconds.clone.0>
     a6e:	2a 98       	cbi	0x05, 2	; 5
     a70:	24 96       	adiw	r28, 0x04	; 4
     a72:	05 ff       	sbrs	r16, 5
     a74:	10 c0       	rjmp	.+32     	; 0xa96 <_ZN12OrangutanLCD8busyWaitEv+0x54>
     a76:	9e 01       	movw	r18, r28
     a78:	40 e0       	ldi	r20, 0x00	; 0
     a7a:	50 e0       	ldi	r21, 0x00	; 0
     a7c:	80 91 35 02 	lds	r24, 0x0235
     a80:	90 91 36 02 	lds	r25, 0x0236
     a84:	a0 91 37 02 	lds	r26, 0x0237
     a88:	b0 91 38 02 	lds	r27, 0x0238
     a8c:	28 17       	cp	r18, r24
     a8e:	39 07       	cpc	r19, r25
     a90:	4a 07       	cpc	r20, r26
     a92:	5b 07       	cpc	r21, r27
     a94:	00 f3       	brcs	.-64     	; 0xa56 <_ZN12OrangutanLCD8busyWaitEv+0x14>
     a96:	9e 01       	movw	r18, r28
     a98:	40 e0       	ldi	r20, 0x00	; 0
     a9a:	50 e0       	ldi	r21, 0x00	; 0
     a9c:	80 91 35 02 	lds	r24, 0x0235
     aa0:	90 91 36 02 	lds	r25, 0x0236
     aa4:	a0 91 37 02 	lds	r26, 0x0237
     aa8:	b0 91 38 02 	lds	r27, 0x0238
     aac:	28 17       	cp	r18, r24
     aae:	39 07       	cpc	r19, r25
     ab0:	4a 07       	cpc	r20, r26
     ab2:	5b 07       	cpc	r21, r27
     ab4:	28 f0       	brcs	.+10     	; 0xac0 <_ZN12OrangutanLCD8busyWaitEv+0x7e>
     ab6:	82 e3       	ldi	r24, 0x32	; 50
     ab8:	90 e0       	ldi	r25, 0x00	; 0
     aba:	a0 e0       	ldi	r26, 0x00	; 0
     abc:	b0 e0       	ldi	r27, 0x00	; 0
     abe:	04 c0       	rjmp	.+8      	; 0xac8 <_ZN12OrangutanLCD8busyWaitEv+0x86>
     ac0:	80 e3       	ldi	r24, 0x30	; 48
     ac2:	95 e7       	ldi	r25, 0x75	; 117
     ac4:	a0 e0       	ldi	r26, 0x00	; 0
     ac6:	b0 e0       	ldi	r27, 0x00	; 0
     ac8:	80 93 35 02 	sts	0x0235, r24
     acc:	90 93 36 02 	sts	0x0236, r25
     ad0:	a0 93 37 02 	sts	0x0237, r26
     ad4:	b0 93 38 02 	sts	0x0238, r27
     ad8:	17 b9       	out	0x07, r17	; 7
     ada:	df 91       	pop	r29
     adc:	cf 91       	pop	r28
     ade:	1f 91       	pop	r17
     ae0:	0f 91       	pop	r16
     ae2:	08 95       	ret

00000ae4 <_ZN12OrangutanLCD8sendDataEh>:
     ae4:	28 b1       	in	r18, 0x08	; 8
     ae6:	90 e0       	ldi	r25, 0x00	; 0
     ae8:	8f 70       	andi	r24, 0x0F	; 15
     aea:	90 70       	andi	r25, 0x00	; 0
     aec:	88 0f       	add	r24, r24
     aee:	99 1f       	adc	r25, r25
     af0:	88 0f       	add	r24, r24
     af2:	99 1f       	adc	r25, r25
     af4:	23 7c       	andi	r18, 0xC3	; 195
     af6:	28 2b       	or	r18, r24
     af8:	28 b9       	out	0x08, r18	; 8
     afa:	2a 9a       	sbi	0x05, 2	; 5
     afc:	0e 94 17 05 	call	0xa2e	; 0xa2e <delayMicroseconds.clone.0>
     b00:	2a 98       	cbi	0x05, 2	; 5
     b02:	0e 94 17 05 	call	0xa2e	; 0xa2e <delayMicroseconds.clone.0>
     b06:	08 95       	ret

00000b08 <_ZN12OrangutanLCD4sendEhhh>:
     b08:	a2 e0       	ldi	r26, 0x02	; 2
     b0a:	b0 e0       	ldi	r27, 0x00	; 0
     b0c:	ea e8       	ldi	r30, 0x8A	; 138
     b0e:	f5 e0       	ldi	r31, 0x05	; 5
     b10:	0c 94 d1 13 	jmp	0x27a2	; 0x27a2 <__prologue_saves__+0x1a>
     b14:	18 2f       	mov	r17, r24
     b16:	4a 83       	std	Y+2, r20	; 0x02
     b18:	69 83       	std	Y+1, r22	; 0x01
     b1a:	0e 94 02 06 	call	0xc04	; 0xc04 <_ZN12OrangutanLCD4initEv>
     b1e:	0e 94 21 05 	call	0xa42	; 0xa42 <_ZN12OrangutanLCD8busyWaitEv>
     b22:	f7 b0       	in	r15, 0x07	; 7
     b24:	08 b1       	in	r16, 0x08	; 8
     b26:	29 98       	cbi	0x05, 1	; 5
     b28:	69 81       	ldd	r22, Y+1	; 0x01
     b2a:	4a 81       	ldd	r20, Y+2	; 0x02
     b2c:	66 23       	and	r22, r22
     b2e:	11 f0       	breq	.+4      	; 0xb34 <_ZN12OrangutanLCD4sendEhhh+0x2c>
     b30:	28 9a       	sbi	0x05, 0	; 5
     b32:	01 c0       	rjmp	.+2      	; 0xb36 <_ZN12OrangutanLCD4sendEhhh+0x2e>
     b34:	28 98       	cbi	0x05, 0	; 5
     b36:	87 b1       	in	r24, 0x07	; 7
     b38:	8c 63       	ori	r24, 0x3C	; 60
     b3a:	87 b9       	out	0x07, r24	; 7
     b3c:	41 30       	cpi	r20, 0x01	; 1
     b3e:	29 f0       	breq	.+10     	; 0xb4a <_ZN12OrangutanLCD4sendEhhh+0x42>
     b40:	81 2f       	mov	r24, r17
     b42:	82 95       	swap	r24
     b44:	8f 70       	andi	r24, 0x0F	; 15
     b46:	0e 94 72 05 	call	0xae4	; 0xae4 <_ZN12OrangutanLCD8sendDataEh>
     b4a:	81 2f       	mov	r24, r17
     b4c:	8f 70       	andi	r24, 0x0F	; 15
     b4e:	0e 94 72 05 	call	0xae4	; 0xae4 <_ZN12OrangutanLCD8sendDataEh>
     b52:	f7 b8       	out	0x07, r15	; 7
     b54:	08 b9       	out	0x08, r16	; 8
     b56:	22 96       	adiw	r28, 0x02	; 2
     b58:	e5 e0       	ldi	r30, 0x05	; 5
     b5a:	0c 94 ed 13 	jmp	0x27da	; 0x27da <__epilogue_restores__+0x1a>

00000b5e <_ZN12OrangutanLCD8send_cmdEh>:
     b5e:	60 e0       	ldi	r22, 0x00	; 0
     b60:	42 e0       	ldi	r20, 0x02	; 2
     b62:	0e 94 84 05 	call	0xb08	; 0xb08 <_ZN12OrangutanLCD4sendEhhh>
     b66:	08 95       	ret

00000b68 <_ZN12OrangutanLCD9send_dataEh>:
     b68:	61 e0       	ldi	r22, 0x01	; 1
     b6a:	42 e0       	ldi	r20, 0x02	; 2
     b6c:	0e 94 84 05 	call	0xb08	; 0xb08 <_ZN12OrangutanLCD4sendEhhh>
     b70:	08 95       	ret

00000b72 <print_character>:
     b72:	0e 94 b4 05 	call	0xb68	; 0xb68 <_ZN12OrangutanLCD9send_dataEh>
     b76:	08 95       	ret

00000b78 <_ZN12OrangutanLCD13send_4bit_cmdEh>:
     b78:	60 e0       	ldi	r22, 0x00	; 0
     b7a:	41 e0       	ldi	r20, 0x01	; 1
     b7c:	0e 94 84 05 	call	0xb08	; 0xb08 <_ZN12OrangutanLCD4sendEhhh>
     b80:	08 95       	ret

00000b82 <_ZN12OrangutanLCD5init2Ev>:
     b82:	3d 98       	cbi	0x07, 5	; 7
     b84:	45 9a       	sbi	0x08, 5	; 8
     b86:	80 e3       	ldi	r24, 0x30	; 48
     b88:	95 e7       	ldi	r25, 0x75	; 117
     b8a:	a0 e0       	ldi	r26, 0x00	; 0
     b8c:	b0 e0       	ldi	r27, 0x00	; 0
     b8e:	80 93 35 02 	sts	0x0235, r24
     b92:	90 93 36 02 	sts	0x0236, r25
     b96:	a0 93 37 02 	sts	0x0237, r26
     b9a:	b0 93 38 02 	sts	0x0238, r27
     b9e:	20 9a       	sbi	0x04, 0	; 4
     ba0:	21 9a       	sbi	0x04, 1	; 4
     ba2:	22 9a       	sbi	0x04, 2	; 4
     ba4:	8e e1       	ldi	r24, 0x1E	; 30
     ba6:	90 e0       	ldi	r25, 0x00	; 0
     ba8:	0e 94 af 0f 	call	0x1f5e	; 0x1f5e <delay_ms>
     bac:	83 e0       	ldi	r24, 0x03	; 3
     bae:	0e 94 bc 05 	call	0xb78	; 0xb78 <_ZN12OrangutanLCD13send_4bit_cmdEh>
     bb2:	86 e0       	ldi	r24, 0x06	; 6
     bb4:	90 e0       	ldi	r25, 0x00	; 0
     bb6:	0e 94 af 0f 	call	0x1f5e	; 0x1f5e <delay_ms>
     bba:	83 e0       	ldi	r24, 0x03	; 3
     bbc:	0e 94 bc 05 	call	0xb78	; 0xb78 <_ZN12OrangutanLCD13send_4bit_cmdEh>
     bc0:	82 e0       	ldi	r24, 0x02	; 2
     bc2:	90 e0       	ldi	r25, 0x00	; 0
     bc4:	0e 94 af 0f 	call	0x1f5e	; 0x1f5e <delay_ms>
     bc8:	83 e0       	ldi	r24, 0x03	; 3
     bca:	0e 94 bc 05 	call	0xb78	; 0xb78 <_ZN12OrangutanLCD13send_4bit_cmdEh>
     bce:	82 e0       	ldi	r24, 0x02	; 2
     bd0:	90 e0       	ldi	r25, 0x00	; 0
     bd2:	0e 94 af 0f 	call	0x1f5e	; 0x1f5e <delay_ms>
     bd6:	82 e0       	ldi	r24, 0x02	; 2
     bd8:	0e 94 bc 05 	call	0xb78	; 0xb78 <_ZN12OrangutanLCD13send_4bit_cmdEh>
     bdc:	82 e0       	ldi	r24, 0x02	; 2
     bde:	90 e0       	ldi	r25, 0x00	; 0
     be0:	0e 94 af 0f 	call	0x1f5e	; 0x1f5e <delay_ms>
     be4:	88 e2       	ldi	r24, 0x28	; 40
     be6:	0e 94 af 05 	call	0xb5e	; 0xb5e <_ZN12OrangutanLCD8send_cmdEh>
     bea:	88 e0       	ldi	r24, 0x08	; 8
     bec:	0e 94 af 05 	call	0xb5e	; 0xb5e <_ZN12OrangutanLCD8send_cmdEh>
     bf0:	81 e0       	ldi	r24, 0x01	; 1
     bf2:	0e 94 af 05 	call	0xb5e	; 0xb5e <_ZN12OrangutanLCD8send_cmdEh>
     bf6:	86 e0       	ldi	r24, 0x06	; 6
     bf8:	0e 94 af 05 	call	0xb5e	; 0xb5e <_ZN12OrangutanLCD8send_cmdEh>
     bfc:	8c e0       	ldi	r24, 0x0C	; 12
     bfe:	0e 94 af 05 	call	0xb5e	; 0xb5e <_ZN12OrangutanLCD8send_cmdEh>
     c02:	08 95       	ret

00000c04 <_ZN12OrangutanLCD4initEv>:
     c04:	80 91 39 02 	lds	r24, 0x0239
     c08:	88 23       	and	r24, r24
     c0a:	29 f4       	brne	.+10     	; 0xc16 <_ZN12OrangutanLCD4initEv+0x12>
     c0c:	81 e0       	ldi	r24, 0x01	; 1
     c0e:	80 93 39 02 	sts	0x0239, r24
     c12:	0e 94 c1 05 	call	0xb82	; 0xb82 <_ZN12OrangutanLCD5init2Ev>
     c16:	08 95       	ret

00000c18 <_ZN12OrangutanLCD5clearEv>:
     c18:	81 e0       	ldi	r24, 0x01	; 1
     c1a:	0e 94 af 05 	call	0xb5e	; 0xb5e <_ZN12OrangutanLCD8send_cmdEh>
     c1e:	80 91 31 02 	lds	r24, 0x0231
     c22:	90 91 32 02 	lds	r25, 0x0232
     c26:	00 97       	sbiw	r24, 0x00	; 0
     c28:	11 f1       	breq	.+68     	; 0xc6e <_ZN12OrangutanLCD5clearEv+0x56>
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e2       	ldi	r27, 0x20	; 32
     c2e:	08 c0       	rjmp	.+16     	; 0xc40 <_ZN12OrangutanLCD5clearEv+0x28>
     c30:	e0 91 31 02 	lds	r30, 0x0231
     c34:	f0 91 32 02 	lds	r31, 0x0232
     c38:	e2 0f       	add	r30, r18
     c3a:	f3 1f       	adc	r31, r19
     c3c:	b0 83       	st	Z, r27
     c3e:	af 5f       	subi	r26, 0xFF	; 255
     c40:	2a 2f       	mov	r18, r26
     c42:	30 e0       	ldi	r19, 0x00	; 0
     c44:	80 91 e3 01 	lds	r24, 0x01E3
     c48:	90 e0       	ldi	r25, 0x00	; 0
     c4a:	01 97       	sbiw	r24, 0x01	; 1
     c4c:	60 91 e4 01 	lds	r22, 0x01E4
     c50:	70 e0       	ldi	r23, 0x00	; 0
     c52:	86 9f       	mul	r24, r22
     c54:	a0 01       	movw	r20, r0
     c56:	87 9f       	mul	r24, r23
     c58:	50 0d       	add	r21, r0
     c5a:	96 9f       	mul	r25, r22
     c5c:	50 0d       	add	r21, r0
     c5e:	11 24       	eor	r1, r1
     c60:	24 17       	cp	r18, r20
     c62:	35 07       	cpc	r19, r21
     c64:	2c f3       	brlt	.-54     	; 0xc30 <_ZN12OrangutanLCD5clearEv+0x18>
     c66:	10 92 34 02 	sts	0x0234, r1
     c6a:	10 92 33 02 	sts	0x0233, r1
     c6e:	08 95       	ret

00000c70 <clear>:
     c70:	0e 94 0c 06 	call	0xc18	; 0xc18 <_ZN12OrangutanLCD5clearEv>
     c74:	08 95       	ret

00000c76 <_ZN12OrangutanLCD5printEPKc>:
     c76:	ef 92       	push	r14
     c78:	ff 92       	push	r15
     c7a:	cf 93       	push	r28
     c7c:	df 93       	push	r29
     c7e:	e8 2e       	mov	r14, r24
     c80:	e7 01       	movw	r28, r14
     c82:	7e 01       	movw	r14, r28
     c84:	f9 2e       	mov	r15, r25
     c86:	e7 01       	movw	r28, r14
     c88:	02 c0       	rjmp	.+4      	; 0xc8e <_ZN12OrangutanLCD5printEPKc+0x18>
     c8a:	0e 94 b4 05 	call	0xb68	; 0xb68 <_ZN12OrangutanLCD9send_dataEh>
     c8e:	89 91       	ld	r24, Y+
     c90:	88 23       	and	r24, r24
     c92:	d9 f7       	brne	.-10     	; 0xc8a <_ZN12OrangutanLCD5printEPKc+0x14>
     c94:	df 91       	pop	r29
     c96:	cf 91       	pop	r28
     c98:	ff 90       	pop	r15
     c9a:	ef 90       	pop	r14
     c9c:	08 95       	ret

00000c9e <print>:
     c9e:	0e 94 3b 06 	call	0xc76	; 0xc76 <_ZN12OrangutanLCD5printEPKc>
     ca2:	08 95       	ret

00000ca4 <_ZN12OrangutanLCD5printEm>:
     ca4:	aa e0       	ldi	r26, 0x0A	; 10
     ca6:	b0 e0       	ldi	r27, 0x00	; 0
     ca8:	e8 e5       	ldi	r30, 0x58	; 88
     caa:	f6 e0       	ldi	r31, 0x06	; 6
     cac:	0c 94 cc 13 	jmp	0x2798	; 0x2798 <__prologue_saves__+0x10>
     cb0:	9b 01       	movw	r18, r22
     cb2:	ac 01       	movw	r20, r24
     cb4:	1a e0       	ldi	r17, 0x0A	; 10
     cb6:	6a e0       	ldi	r22, 0x0A	; 10
     cb8:	c6 2e       	mov	r12, r22
     cba:	d1 2c       	mov	r13, r1
     cbc:	e1 2c       	mov	r14, r1
     cbe:	f1 2c       	mov	r15, r1
     cc0:	5e 01       	movw	r10, r28
     cc2:	08 94       	sec
     cc4:	a1 1c       	adc	r10, r1
     cc6:	b1 1c       	adc	r11, r1
     cc8:	02 2f       	mov	r16, r18
     cca:	ca 01       	movw	r24, r20
     ccc:	b9 01       	movw	r22, r18
     cce:	a7 01       	movw	r20, r14
     cd0:	96 01       	movw	r18, r12
     cd2:	0e 94 87 13 	call	0x270e	; 0x270e <__udivmodsi4>
     cd6:	11 50       	subi	r17, 0x01	; 1
     cd8:	f5 01       	movw	r30, r10
     cda:	e1 0f       	add	r30, r17
     cdc:	f1 1d       	adc	r31, r1
     cde:	00 5d       	subi	r16, 0xD0	; 208
     ce0:	92 2f       	mov	r25, r18
     ce2:	99 0f       	add	r25, r25
     ce4:	89 2f       	mov	r24, r25
     ce6:	88 0f       	add	r24, r24
     ce8:	88 0f       	add	r24, r24
     cea:	89 0f       	add	r24, r25
     cec:	08 1b       	sub	r16, r24
     cee:	00 83       	st	Z, r16
     cf0:	21 15       	cp	r18, r1
     cf2:	31 05       	cpc	r19, r1
     cf4:	41 05       	cpc	r20, r1
     cf6:	51 05       	cpc	r21, r1
     cf8:	39 f7       	brne	.-50     	; 0xcc8 <_ZN12OrangutanLCD5printEm+0x24>
     cfa:	08 c0       	rjmp	.+16     	; 0xd0c <_ZN12OrangutanLCD5printEm+0x68>
     cfc:	f6 01       	movw	r30, r12
     cfe:	e1 0f       	add	r30, r17
     d00:	f1 1d       	adc	r31, r1
     d02:	80 81       	ld	r24, Z
     d04:	0e 94 b4 05 	call	0xb68	; 0xb68 <_ZN12OrangutanLCD9send_dataEh>
     d08:	1f 5f       	subi	r17, 0xFF	; 255
     d0a:	04 c0       	rjmp	.+8      	; 0xd14 <_ZN12OrangutanLCD5printEm+0x70>
     d0c:	6e 01       	movw	r12, r28
     d0e:	08 94       	sec
     d10:	c1 1c       	adc	r12, r1
     d12:	d1 1c       	adc	r13, r1
     d14:	1a 30       	cpi	r17, 0x0A	; 10
     d16:	90 f3       	brcs	.-28     	; 0xcfc <_ZN12OrangutanLCD5printEm+0x58>
     d18:	2a 96       	adiw	r28, 0x0a	; 10
     d1a:	ea e0       	ldi	r30, 0x0A	; 10
     d1c:	0c 94 e8 13 	jmp	0x27d0	; 0x27d0 <__epilogue_restores__+0x10>

00000d20 <_ZN12OrangutanLCD5printEl>:
     d20:	ef 92       	push	r14
     d22:	ff 92       	push	r15
     d24:	0f 93       	push	r16
     d26:	1f 93       	push	r17
     d28:	7b 01       	movw	r14, r22
     d2a:	8c 01       	movw	r16, r24
     d2c:	97 ff       	sbrs	r25, 7
     d2e:	0b c0       	rjmp	.+22     	; 0xd46 <_ZN12OrangutanLCD5printEl+0x26>
     d30:	10 95       	com	r17
     d32:	00 95       	com	r16
     d34:	f0 94       	com	r15
     d36:	e0 94       	com	r14
     d38:	e1 1c       	adc	r14, r1
     d3a:	f1 1c       	adc	r15, r1
     d3c:	01 1d       	adc	r16, r1
     d3e:	11 1d       	adc	r17, r1
     d40:	8d e2       	ldi	r24, 0x2D	; 45
     d42:	0e 94 b4 05 	call	0xb68	; 0xb68 <_ZN12OrangutanLCD9send_dataEh>
     d46:	c8 01       	movw	r24, r16
     d48:	b7 01       	movw	r22, r14
     d4a:	0e 94 52 06 	call	0xca4	; 0xca4 <_ZN12OrangutanLCD5printEm>
     d4e:	1f 91       	pop	r17
     d50:	0f 91       	pop	r16
     d52:	ff 90       	pop	r15
     d54:	ef 90       	pop	r14
     d56:	08 95       	ret

00000d58 <print_long>:
     d58:	0e 94 90 06 	call	0xd20	; 0xd20 <_ZN12OrangutanLCD5printEl>
     d5c:	08 95       	ret

00000d5e <_ZN12OrangutanLCD6gotoXYEhh>:
     d5e:	a5 e0       	ldi	r26, 0x05	; 5
     d60:	b0 e0       	ldi	r27, 0x00	; 0
     d62:	e5 eb       	ldi	r30, 0xB5	; 181
     d64:	f6 e0       	ldi	r31, 0x06	; 6
     d66:	0c 94 d3 13 	jmp	0x27a6	; 0x27a6 <__prologue_saves__+0x1e>
     d6a:	18 2f       	mov	r17, r24
     d6c:	80 e8       	ldi	r24, 0x80	; 128
     d6e:	89 83       	std	Y+1, r24	; 0x01
     d70:	80 ec       	ldi	r24, 0xC0	; 192
     d72:	8a 83       	std	Y+2, r24	; 0x02
     d74:	84 e9       	ldi	r24, 0x94	; 148
     d76:	8b 83       	std	Y+3, r24	; 0x03
     d78:	84 ed       	ldi	r24, 0xD4	; 212
     d7a:	8c 83       	std	Y+4, r24	; 0x04
     d7c:	fe 01       	movw	r30, r28
     d7e:	e6 0f       	add	r30, r22
     d80:	f1 1d       	adc	r31, r1
     d82:	81 81       	ldd	r24, Z+1	; 0x01
     d84:	81 0f       	add	r24, r17
     d86:	6d 83       	std	Y+5, r22	; 0x05
     d88:	0e 94 af 05 	call	0xb5e	; 0xb5e <_ZN12OrangutanLCD8send_cmdEh>
     d8c:	10 93 34 02 	sts	0x0234, r17
     d90:	6d 81       	ldd	r22, Y+5	; 0x05
     d92:	60 93 33 02 	sts	0x0233, r22
     d96:	25 96       	adiw	r28, 0x05	; 5
     d98:	e3 e0       	ldi	r30, 0x03	; 3
     d9a:	0c 94 ef 13 	jmp	0x27de	; 0x27de <__epilogue_restores__+0x1e>

00000d9e <lcd_goto_xy>:
     d9e:	0e 94 af 06 	call	0xd5e	; 0xd5e <_ZN12OrangutanLCD6gotoXYEhh>
     da2:	08 95       	ret

00000da4 <_ZN20OrangutanPushbuttons5init2Ev>:
     da4:	87 b1       	in	r24, 0x07	; 7
     da6:	83 7d       	andi	r24, 0xD3	; 211
     da8:	87 b9       	out	0x07, r24	; 7
     daa:	88 b1       	in	r24, 0x08	; 8
     dac:	8c 62       	ori	r24, 0x2C	; 44
     dae:	88 b9       	out	0x08, r24	; 8
     db0:	85 e0       	ldi	r24, 0x05	; 5
     db2:	90 e0       	ldi	r25, 0x00	; 0
     db4:	6f 93       	push	r22
     db6:	64 e0       	ldi	r22, 0x04	; 4
     db8:	6a 95       	dec	r22
     dba:	f1 f7       	brne	.-4      	; 0xdb8 <_ZN20OrangutanPushbuttons5init2Ev+0x14>
     dbc:	6f 91       	pop	r22
     dbe:	01 97       	sbiw	r24, 0x01	; 1
     dc0:	c9 f7       	brne	.-14     	; 0xdb4 <_ZN20OrangutanPushbuttons5init2Ev+0x10>
     dc2:	08 95       	ret

00000dc4 <_ZN20OrangutanPushbuttons4initEv>:
     dc4:	80 91 3a 02 	lds	r24, 0x023A
     dc8:	88 23       	and	r24, r24
     dca:	29 f4       	brne	.+10     	; 0xdd6 <_ZN20OrangutanPushbuttons4initEv+0x12>
     dcc:	81 e0       	ldi	r24, 0x01	; 1
     dce:	80 93 3a 02 	sts	0x023A, r24
     dd2:	0e 94 d2 06 	call	0xda4	; 0xda4 <_ZN20OrangutanPushbuttons5init2Ev>
     dd6:	08 95       	ret

00000dd8 <_ZN20OrangutanPushbuttons14waitForReleaseEh>:
     dd8:	1f 93       	push	r17
     dda:	18 2f       	mov	r17, r24
     ddc:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <_ZN20OrangutanPushbuttons4initEv>
     de0:	86 b1       	in	r24, 0x06	; 6
     de2:	81 23       	and	r24, r17
     de4:	e9 f3       	breq	.-6      	; 0xde0 <_ZN20OrangutanPushbuttons14waitForReleaseEh+0x8>
     de6:	8a e0       	ldi	r24, 0x0A	; 10
     de8:	90 e0       	ldi	r25, 0x00	; 0
     dea:	0e 94 af 0f 	call	0x1f5e	; 0x1f5e <delay_ms>
     dee:	86 b1       	in	r24, 0x06	; 6
     df0:	81 23       	and	r24, r17
     df2:	b1 f3       	breq	.-20     	; 0xde0 <_ZN20OrangutanPushbuttons14waitForReleaseEh+0x8>
     df4:	86 b1       	in	r24, 0x06	; 6
     df6:	81 23       	and	r24, r17
     df8:	1f 91       	pop	r17
     dfa:	08 95       	ret

00000dfc <wait_for_button_release>:
     dfc:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <_ZN20OrangutanPushbuttons14waitForReleaseEh>
     e00:	08 95       	ret

00000e02 <_ZN20OrangutanPushbuttons9isPressedEh>:
     e02:	a1 e0       	ldi	r26, 0x01	; 1
     e04:	b0 e0       	ldi	r27, 0x00	; 0
     e06:	e7 e0       	ldi	r30, 0x07	; 7
     e08:	f7 e0       	ldi	r31, 0x07	; 7
     e0a:	0c 94 d4 13 	jmp	0x27a8	; 0x27a8 <__prologue_saves__+0x20>
     e0e:	89 83       	std	Y+1, r24	; 0x01
     e10:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <_ZN20OrangutanPushbuttons4initEv>
     e14:	96 b1       	in	r25, 0x06	; 6
     e16:	90 95       	com	r25
     e18:	89 81       	ldd	r24, Y+1	; 0x01
     e1a:	89 23       	and	r24, r25
     e1c:	21 96       	adiw	r28, 0x01	; 1
     e1e:	e2 e0       	ldi	r30, 0x02	; 2
     e20:	0c 94 f0 13 	jmp	0x27e0	; 0x27e0 <__epilogue_restores__+0x20>

00000e24 <button_is_pressed>:
     e24:	0e 94 01 07 	call	0xe02	; 0xe02 <_ZN20OrangutanPushbuttons9isPressedEh>
     e28:	08 95       	ret

00000e2a <serial_get_received_bytes>:
     e2a:	28 2f       	mov	r18, r24
     e2c:	30 e0       	ldi	r19, 0x00	; 0
     e2e:	f9 01       	movw	r30, r18
     e30:	ee 0f       	add	r30, r30
     e32:	ff 1f       	adc	r31, r31
     e34:	43 e0       	ldi	r20, 0x03	; 3
     e36:	22 0f       	add	r18, r18
     e38:	33 1f       	adc	r19, r19
     e3a:	4a 95       	dec	r20
     e3c:	e1 f7       	brne	.-8      	; 0xe36 <serial_get_received_bytes+0xc>
     e3e:	e2 0f       	add	r30, r18
     e40:	f3 1f       	adc	r31, r19
     e42:	eb 51       	subi	r30, 0x1B	; 27
     e44:	fe 4f       	sbci	r31, 0xFE	; 254
     e46:	82 81       	ldd	r24, Z+2	; 0x02
     e48:	08 95       	ret

00000e4a <serial_send_buffer_empty>:
     e4a:	28 2f       	mov	r18, r24
     e4c:	30 e0       	ldi	r19, 0x00	; 0
     e4e:	f9 01       	movw	r30, r18
     e50:	ee 0f       	add	r30, r30
     e52:	ff 1f       	adc	r31, r31
     e54:	73 e0       	ldi	r23, 0x03	; 3
     e56:	22 0f       	add	r18, r18
     e58:	33 1f       	adc	r19, r19
     e5a:	7a 95       	dec	r23
     e5c:	e1 f7       	brne	.-8      	; 0xe56 <serial_send_buffer_empty+0xc>
     e5e:	e2 0f       	add	r30, r18
     e60:	f3 1f       	adc	r31, r19
     e62:	eb 51       	subi	r30, 0x1B	; 27
     e64:	fe 4f       	sbci	r31, 0xFE	; 254
     e66:	41 81       	ldd	r20, Z+1	; 0x01
     e68:	28 2f       	mov	r18, r24
     e6a:	30 e0       	ldi	r19, 0x00	; 0
     e6c:	f9 01       	movw	r30, r18
     e6e:	ee 0f       	add	r30, r30
     e70:	ff 1f       	adc	r31, r31
     e72:	53 e0       	ldi	r21, 0x03	; 3
     e74:	22 0f       	add	r18, r18
     e76:	33 1f       	adc	r19, r19
     e78:	5a 95       	dec	r21
     e7a:	e1 f7       	brne	.-8      	; 0xe74 <serial_send_buffer_empty+0x2a>
     e7c:	e2 0f       	add	r30, r18
     e7e:	f3 1f       	adc	r31, r19
     e80:	eb 51       	subi	r30, 0x1B	; 27
     e82:	fe 4f       	sbci	r31, 0xFE	; 254
     e84:	81 e0       	ldi	r24, 0x01	; 1
     e86:	93 81       	ldd	r25, Z+3	; 0x03
     e88:	49 13       	cpse	r20, r25
     e8a:	80 e0       	ldi	r24, 0x00	; 0
     e8c:	08 95       	ret

00000e8e <_ZN15OrangutanSerial21serial_rx_handle_byteEhh>:
     e8e:	28 2f       	mov	r18, r24
     e90:	30 e0       	ldi	r19, 0x00	; 0
     e92:	f9 01       	movw	r30, r18
     e94:	ee 0f       	add	r30, r30
     e96:	ff 1f       	adc	r31, r31
     e98:	b3 e0       	ldi	r27, 0x03	; 3
     e9a:	22 0f       	add	r18, r18
     e9c:	33 1f       	adc	r19, r19
     e9e:	ba 95       	dec	r27
     ea0:	e1 f7       	brne	.-8      	; 0xe9a <_ZN15OrangutanSerial21serial_rx_handle_byteEhh+0xc>
     ea2:	e2 0f       	add	r30, r18
     ea4:	f3 1f       	adc	r31, r19
     ea6:	eb 51       	subi	r30, 0x1B	; 27
     ea8:	fe 4f       	sbci	r31, 0xFE	; 254
     eaa:	40 85       	ldd	r20, Z+8	; 0x08
     eac:	51 85       	ldd	r21, Z+9	; 0x09
     eae:	41 15       	cp	r20, r1
     eb0:	51 05       	cpc	r21, r1
     eb2:	09 f4       	brne	.+2      	; 0xeb6 <_ZN15OrangutanSerial21serial_rx_handle_byteEhh+0x28>
     eb4:	52 c0       	rjmp	.+164    	; 0xf5a <_ZN15OrangutanSerial21serial_rx_handle_byteEhh+0xcc>
     eb6:	28 2f       	mov	r18, r24
     eb8:	30 e0       	ldi	r19, 0x00	; 0
     eba:	f9 01       	movw	r30, r18
     ebc:	ee 0f       	add	r30, r30
     ebe:	ff 1f       	adc	r31, r31
     ec0:	73 e0       	ldi	r23, 0x03	; 3
     ec2:	22 0f       	add	r18, r18
     ec4:	33 1f       	adc	r19, r19
     ec6:	7a 95       	dec	r23
     ec8:	e1 f7       	brne	.-8      	; 0xec2 <_ZN15OrangutanSerial21serial_rx_handle_byteEhh+0x34>
     eca:	e2 0f       	add	r30, r18
     ecc:	f3 1f       	adc	r31, r19
     ece:	eb 51       	subi	r30, 0x1B	; 27
     ed0:	fe 4f       	sbci	r31, 0xFE	; 254
     ed2:	72 81       	ldd	r23, Z+2	; 0x02
     ed4:	28 2f       	mov	r18, r24
     ed6:	30 e0       	ldi	r19, 0x00	; 0
     ed8:	f9 01       	movw	r30, r18
     eda:	ee 0f       	add	r30, r30
     edc:	ff 1f       	adc	r31, r31
     ede:	b3 e0       	ldi	r27, 0x03	; 3
     ee0:	22 0f       	add	r18, r18
     ee2:	33 1f       	adc	r19, r19
     ee4:	ba 95       	dec	r27
     ee6:	e1 f7       	brne	.-8      	; 0xee0 <_ZN15OrangutanSerial21serial_rx_handle_byteEhh+0x52>
     ee8:	e2 0f       	add	r30, r18
     eea:	f3 1f       	adc	r31, r19
     eec:	eb 51       	subi	r30, 0x1B	; 27
     eee:	fe 4f       	sbci	r31, 0xFE	; 254
     ef0:	94 81       	ldd	r25, Z+4	; 0x04
     ef2:	79 17       	cp	r23, r25
     ef4:	90 f5       	brcc	.+100    	; 0xf5a <_ZN15OrangutanSerial21serial_rx_handle_byteEhh+0xcc>
     ef6:	28 2f       	mov	r18, r24
     ef8:	30 e0       	ldi	r19, 0x00	; 0
     efa:	f9 01       	movw	r30, r18
     efc:	ee 0f       	add	r30, r30
     efe:	ff 1f       	adc	r31, r31
     f00:	73 e0       	ldi	r23, 0x03	; 3
     f02:	22 0f       	add	r18, r18
     f04:	33 1f       	adc	r19, r19
     f06:	7a 95       	dec	r23
     f08:	e1 f7       	brne	.-8      	; 0xf02 <_ZN15OrangutanSerial21serial_rx_handle_byteEhh+0x74>
     f0a:	e2 0f       	add	r30, r18
     f0c:	f3 1f       	adc	r31, r19
     f0e:	eb 51       	subi	r30, 0x1B	; 27
     f10:	fe 4f       	sbci	r31, 0xFE	; 254
     f12:	92 81       	ldd	r25, Z+2	; 0x02
     f14:	49 0f       	add	r20, r25
     f16:	51 1d       	adc	r21, r1
     f18:	fa 01       	movw	r30, r20
     f1a:	60 83       	st	Z, r22
     f1c:	28 2f       	mov	r18, r24
     f1e:	30 e0       	ldi	r19, 0x00	; 0
     f20:	f9 01       	movw	r30, r18
     f22:	ee 0f       	add	r30, r30
     f24:	ff 1f       	adc	r31, r31
     f26:	53 e0       	ldi	r21, 0x03	; 3
     f28:	22 0f       	add	r18, r18
     f2a:	33 1f       	adc	r19, r19
     f2c:	5a 95       	dec	r21
     f2e:	e1 f7       	brne	.-8      	; 0xf28 <_ZN15OrangutanSerial21serial_rx_handle_byteEhh+0x9a>
     f30:	e2 0f       	add	r30, r18
     f32:	f3 1f       	adc	r31, r19
     f34:	eb 51       	subi	r30, 0x1B	; 27
     f36:	fe 4f       	sbci	r31, 0xFE	; 254
     f38:	92 81       	ldd	r25, Z+2	; 0x02
     f3a:	9f 5f       	subi	r25, 0xFF	; 255
     f3c:	28 2f       	mov	r18, r24
     f3e:	30 e0       	ldi	r19, 0x00	; 0
     f40:	f9 01       	movw	r30, r18
     f42:	ee 0f       	add	r30, r30
     f44:	ff 1f       	adc	r31, r31
     f46:	b3 e0       	ldi	r27, 0x03	; 3
     f48:	22 0f       	add	r18, r18
     f4a:	33 1f       	adc	r19, r19
     f4c:	ba 95       	dec	r27
     f4e:	e1 f7       	brne	.-8      	; 0xf48 <_ZN15OrangutanSerial21serial_rx_handle_byteEhh+0xba>
     f50:	e2 0f       	add	r30, r18
     f52:	f3 1f       	adc	r31, r19
     f54:	eb 51       	subi	r30, 0x1B	; 27
     f56:	fe 4f       	sbci	r31, 0xFE	; 254
     f58:	92 83       	std	Z+2, r25	; 0x02
     f5a:	28 2f       	mov	r18, r24
     f5c:	30 e0       	ldi	r19, 0x00	; 0
     f5e:	f9 01       	movw	r30, r18
     f60:	ee 0f       	add	r30, r30
     f62:	ff 1f       	adc	r31, r31
     f64:	73 e0       	ldi	r23, 0x03	; 3
     f66:	22 0f       	add	r18, r18
     f68:	33 1f       	adc	r19, r19
     f6a:	7a 95       	dec	r23
     f6c:	e1 f7       	brne	.-8      	; 0xf66 <_ZN15OrangutanSerial21serial_rx_handle_byteEhh+0xd8>
     f6e:	e2 0f       	add	r30, r18
     f70:	f3 1f       	adc	r31, r19
     f72:	eb 51       	subi	r30, 0x1B	; 27
     f74:	fe 4f       	sbci	r31, 0xFE	; 254
     f76:	42 81       	ldd	r20, Z+2	; 0x02
     f78:	28 2f       	mov	r18, r24
     f7a:	30 e0       	ldi	r19, 0x00	; 0
     f7c:	f9 01       	movw	r30, r18
     f7e:	ee 0f       	add	r30, r30
     f80:	ff 1f       	adc	r31, r31
     f82:	53 e0       	ldi	r21, 0x03	; 3
     f84:	22 0f       	add	r18, r18
     f86:	33 1f       	adc	r19, r19
     f88:	5a 95       	dec	r21
     f8a:	e1 f7       	brne	.-8      	; 0xf84 <_ZN15OrangutanSerial21serial_rx_handle_byteEhh+0xf6>
     f8c:	e2 0f       	add	r30, r18
     f8e:	f3 1f       	adc	r31, r19
     f90:	eb 51       	subi	r30, 0x1B	; 27
     f92:	fe 4f       	sbci	r31, 0xFE	; 254
     f94:	94 81       	ldd	r25, Z+4	; 0x04
     f96:	49 17       	cp	r20, r25
     f98:	01 f5       	brne	.+64     	; 0xfda <_ZN15OrangutanSerial21serial_rx_handle_byteEhh+0x14c>
     f9a:	28 2f       	mov	r18, r24
     f9c:	30 e0       	ldi	r19, 0x00	; 0
     f9e:	f9 01       	movw	r30, r18
     fa0:	ee 0f       	add	r30, r30
     fa2:	ff 1f       	adc	r31, r31
     fa4:	93 e0       	ldi	r25, 0x03	; 3
     fa6:	22 0f       	add	r18, r18
     fa8:	33 1f       	adc	r19, r19
     faa:	9a 95       	dec	r25
     fac:	e1 f7       	brne	.-8      	; 0xfa6 <_ZN15OrangutanSerial21serial_rx_handle_byteEhh+0x118>
     fae:	e2 0f       	add	r30, r18
     fb0:	f3 1f       	adc	r31, r19
     fb2:	eb 51       	subi	r30, 0x1B	; 27
     fb4:	fe 4f       	sbci	r31, 0xFE	; 254
     fb6:	95 81       	ldd	r25, Z+5	; 0x05
     fb8:	99 23       	and	r25, r25
     fba:	79 f0       	breq	.+30     	; 0xfda <_ZN15OrangutanSerial21serial_rx_handle_byteEhh+0x14c>
     fbc:	28 2f       	mov	r18, r24
     fbe:	30 e0       	ldi	r19, 0x00	; 0
     fc0:	f9 01       	movw	r30, r18
     fc2:	ee 0f       	add	r30, r30
     fc4:	ff 1f       	adc	r31, r31
     fc6:	b3 e0       	ldi	r27, 0x03	; 3
     fc8:	22 0f       	add	r18, r18
     fca:	33 1f       	adc	r19, r19
     fcc:	ba 95       	dec	r27
     fce:	e1 f7       	brne	.-8      	; 0xfc8 <_ZN15OrangutanSerial21serial_rx_handle_byteEhh+0x13a>
     fd0:	e2 0f       	add	r30, r18
     fd2:	f3 1f       	adc	r31, r19
     fd4:	eb 51       	subi	r30, 0x1B	; 27
     fd6:	fe 4f       	sbci	r31, 0xFE	; 254
     fd8:	12 82       	std	Z+2, r1	; 0x02
     fda:	08 95       	ret

00000fdc <_ZN15OrangutanSerial15serial_rx_checkEh>:
     fdc:	0f 93       	push	r16
     fde:	1f 93       	push	r17
     fe0:	18 2f       	mov	r17, r24
     fe2:	82 30       	cpi	r24, 0x02	; 2
     fe4:	09 f4       	brne	.+2      	; 0xfe8 <_ZN15OrangutanSerial15serial_rx_checkEh+0xc>
     fe6:	75 c0       	rjmp	.+234    	; 0x10d2 <_ZN15OrangutanSerial15serial_rx_checkEh+0xf6>
     fe8:	88 23       	and	r24, r24
     fea:	19 f4       	brne	.+6      	; 0xff2 <_ZN15OrangutanSerial15serial_rx_checkEh+0x16>
     fec:	e1 ec       	ldi	r30, 0xC1	; 193
     fee:	f0 e0       	ldi	r31, 0x00	; 0
     ff0:	02 c0       	rjmp	.+4      	; 0xff6 <_ZN15OrangutanSerial15serial_rx_checkEh+0x1a>
     ff2:	e9 ec       	ldi	r30, 0xC9	; 201
     ff4:	f0 e0       	ldi	r31, 0x00	; 0
     ff6:	80 81       	ld	r24, Z
     ff8:	8f 77       	andi	r24, 0x7F	; 127
     ffa:	80 83       	st	Z, r24
     ffc:	81 2f       	mov	r24, r17
     ffe:	90 e0       	ldi	r25, 0x00	; 0
    1000:	fc 01       	movw	r30, r24
    1002:	ee 0f       	add	r30, r30
    1004:	ff 1f       	adc	r31, r31
    1006:	03 e0       	ldi	r16, 0x03	; 3
    1008:	88 0f       	add	r24, r24
    100a:	99 1f       	adc	r25, r25
    100c:	0a 95       	dec	r16
    100e:	e1 f7       	brne	.-8      	; 0x1008 <_ZN15OrangutanSerial15serial_rx_checkEh+0x2c>
    1010:	e8 0f       	add	r30, r24
    1012:	f9 1f       	adc	r31, r25
    1014:	eb 51       	subi	r30, 0x1B	; 27
    1016:	fe 4f       	sbci	r31, 0xFE	; 254
    1018:	80 85       	ldd	r24, Z+8	; 0x08
    101a:	91 85       	ldd	r25, Z+9	; 0x09
    101c:	00 97       	sbiw	r24, 0x00	; 0
    101e:	a9 f1       	breq	.+106    	; 0x108a <_ZN15OrangutanSerial15serial_rx_checkEh+0xae>
    1020:	21 2f       	mov	r18, r17
    1022:	30 e0       	ldi	r19, 0x00	; 0
    1024:	f9 01       	movw	r30, r18
    1026:	ee 0f       	add	r30, r30
    1028:	ff 1f       	adc	r31, r31
    102a:	a3 e0       	ldi	r26, 0x03	; 3
    102c:	22 0f       	add	r18, r18
    102e:	33 1f       	adc	r19, r19
    1030:	aa 95       	dec	r26
    1032:	e1 f7       	brne	.-8      	; 0x102c <_ZN15OrangutanSerial15serial_rx_checkEh+0x50>
    1034:	e2 0f       	add	r30, r18
    1036:	f3 1f       	adc	r31, r19
    1038:	eb 51       	subi	r30, 0x1B	; 27
    103a:	fe 4f       	sbci	r31, 0xFE	; 254
    103c:	92 81       	ldd	r25, Z+2	; 0x02
    103e:	21 2f       	mov	r18, r17
    1040:	30 e0       	ldi	r19, 0x00	; 0
    1042:	f9 01       	movw	r30, r18
    1044:	ee 0f       	add	r30, r30
    1046:	ff 1f       	adc	r31, r31
    1048:	63 e0       	ldi	r22, 0x03	; 3
    104a:	22 0f       	add	r18, r18
    104c:	33 1f       	adc	r19, r19
    104e:	6a 95       	dec	r22
    1050:	e1 f7       	brne	.-8      	; 0x104a <_ZN15OrangutanSerial15serial_rx_checkEh+0x6e>
    1052:	e2 0f       	add	r30, r18
    1054:	f3 1f       	adc	r31, r19
    1056:	eb 51       	subi	r30, 0x1B	; 27
    1058:	fe 4f       	sbci	r31, 0xFE	; 254
    105a:	84 81       	ldd	r24, Z+4	; 0x04
    105c:	98 17       	cp	r25, r24
    105e:	a8 f4       	brcc	.+42     	; 0x108a <_ZN15OrangutanSerial15serial_rx_checkEh+0xae>
    1060:	11 23       	and	r17, r17
    1062:	19 f4       	brne	.+6      	; 0x106a <_ZN15OrangutanSerial15serial_rx_checkEh+0x8e>
    1064:	e0 ec       	ldi	r30, 0xC0	; 192
    1066:	f0 e0       	ldi	r31, 0x00	; 0
    1068:	02 c0       	rjmp	.+4      	; 0x106e <_ZN15OrangutanSerial15serial_rx_checkEh+0x92>
    106a:	e8 ec       	ldi	r30, 0xC8	; 200
    106c:	f0 e0       	ldi	r31, 0x00	; 0
    106e:	80 81       	ld	r24, Z
    1070:	87 ff       	sbrs	r24, 7
    1072:	0b c0       	rjmp	.+22     	; 0x108a <_ZN15OrangutanSerial15serial_rx_checkEh+0xae>
    1074:	11 23       	and	r17, r17
    1076:	19 f4       	brne	.+6      	; 0x107e <_ZN15OrangutanSerial15serial_rx_checkEh+0xa2>
    1078:	e6 ec       	ldi	r30, 0xC6	; 198
    107a:	f0 e0       	ldi	r31, 0x00	; 0
    107c:	02 c0       	rjmp	.+4      	; 0x1082 <_ZN15OrangutanSerial15serial_rx_checkEh+0xa6>
    107e:	ee ec       	ldi	r30, 0xCE	; 206
    1080:	f0 e0       	ldi	r31, 0x00	; 0
    1082:	60 81       	ld	r22, Z
    1084:	81 2f       	mov	r24, r17
    1086:	0e 94 47 07 	call	0xe8e	; 0xe8e <_ZN15OrangutanSerial21serial_rx_handle_byteEhh>
    108a:	21 2f       	mov	r18, r17
    108c:	30 e0       	ldi	r19, 0x00	; 0
    108e:	f9 01       	movw	r30, r18
    1090:	ee 0f       	add	r30, r30
    1092:	ff 1f       	adc	r31, r31
    1094:	43 e0       	ldi	r20, 0x03	; 3
    1096:	22 0f       	add	r18, r18
    1098:	33 1f       	adc	r19, r19
    109a:	4a 95       	dec	r20
    109c:	e1 f7       	brne	.-8      	; 0x1096 <_ZN15OrangutanSerial15serial_rx_checkEh+0xba>
    109e:	e2 0f       	add	r30, r18
    10a0:	f3 1f       	adc	r31, r19
    10a2:	eb 51       	subi	r30, 0x1B	; 27
    10a4:	fe 4f       	sbci	r31, 0xFE	; 254
    10a6:	80 81       	ld	r24, Z
    10a8:	88 23       	and	r24, r24
    10aa:	09 f0       	breq	.+2      	; 0x10ae <_ZN15OrangutanSerial15serial_rx_checkEh+0xd2>
    10ac:	59 c0       	rjmp	.+178    	; 0x1160 <_ZN15OrangutanSerial15serial_rx_checkEh+0x184>
    10ae:	11 23       	and	r17, r17
    10b0:	19 f4       	brne	.+6      	; 0x10b8 <_ZN15OrangutanSerial15serial_rx_checkEh+0xdc>
    10b2:	e1 ec       	ldi	r30, 0xC1	; 193
    10b4:	f0 e0       	ldi	r31, 0x00	; 0
    10b6:	02 c0       	rjmp	.+4      	; 0x10bc <_ZN15OrangutanSerial15serial_rx_checkEh+0xe0>
    10b8:	e9 ec       	ldi	r30, 0xC9	; 201
    10ba:	f0 e0       	ldi	r31, 0x00	; 0
    10bc:	80 81       	ld	r24, Z
    10be:	80 68       	ori	r24, 0x80	; 128
    10c0:	80 83       	st	Z, r24
    10c2:	4e c0       	rjmp	.+156    	; 0x1160 <_ZN15OrangutanSerial15serial_rx_checkEh+0x184>
    10c4:	80 91 fe 01 	lds	r24, 0x01FE
    10c8:	88 23       	and	r24, r24
    10ca:	19 f0       	breq	.+6      	; 0x10d2 <_ZN15OrangutanSerial15serial_rx_checkEh+0xf6>
    10cc:	10 92 fb 01 	sts	0x01FB, r1
    10d0:	47 c0       	rjmp	.+142    	; 0x1160 <_ZN15OrangutanSerial15serial_rx_checkEh+0x184>
    10d2:	80 91 01 02 	lds	r24, 0x0201
    10d6:	90 91 02 02 	lds	r25, 0x0202
    10da:	00 97       	sbiw	r24, 0x00	; 0
    10dc:	09 f4       	brne	.+2      	; 0x10e0 <_ZN15OrangutanSerial15serial_rx_checkEh+0x104>
    10de:	40 c0       	rjmp	.+128    	; 0x1160 <_ZN15OrangutanSerial15serial_rx_checkEh+0x184>
    10e0:	90 91 fb 01 	lds	r25, 0x01FB
    10e4:	80 91 fd 01 	lds	r24, 0x01FD
    10e8:	98 17       	cp	r25, r24
    10ea:	d0 f5       	brcc	.+116    	; 0x1160 <_ZN15OrangutanSerial15serial_rx_checkEh+0x184>
    10ec:	80 91 47 02 	lds	r24, 0x0247
    10f0:	88 23       	and	r24, r24
    10f2:	a9 f4       	brne	.+42     	; 0x111e <_ZN15OrangutanSerial15serial_rx_checkEh+0x142>
    10f4:	0e 94 b7 0f 	call	0x1f6e	; 0x1f6e <_ZN12OrangutanSVP15serialReadStartEv>
    10f8:	80 93 47 02 	sts	0x0247, r24
    10fc:	10 e0       	ldi	r17, 0x00	; 0
    10fe:	0b c0       	rjmp	.+22     	; 0x1116 <_ZN15OrangutanSerial15serial_rx_checkEh+0x13a>
    1100:	0e 94 b2 0f 	call	0x1f64	; 0x1f64 <_ZN12OrangutanSVP11getNextByteEv>
    1104:	e0 2f       	mov	r30, r16
    1106:	f0 e0       	ldi	r31, 0x00	; 0
    1108:	31 97       	sbiw	r30, 0x01	; 1
    110a:	e1 1b       	sub	r30, r17
    110c:	f1 09       	sbc	r31, r1
    110e:	e8 5b       	subi	r30, 0xB8	; 184
    1110:	fd 4f       	sbci	r31, 0xFD	; 253
    1112:	80 83       	st	Z, r24
    1114:	1f 5f       	subi	r17, 0xFF	; 255
    1116:	00 91 47 02 	lds	r16, 0x0247
    111a:	10 17       	cp	r17, r16
    111c:	88 f3       	brcs	.-30     	; 0x1100 <_ZN15OrangutanSerial15serial_rx_checkEh+0x124>
    111e:	a0 91 47 02 	lds	r26, 0x0247
    1122:	aa 23       	and	r26, r26
    1124:	e9 f0       	breq	.+58     	; 0x1160 <_ZN15OrangutanSerial15serial_rx_checkEh+0x184>
    1126:	80 91 fb 01 	lds	r24, 0x01FB
    112a:	e0 91 01 02 	lds	r30, 0x0201
    112e:	f0 91 02 02 	lds	r31, 0x0202
    1132:	e8 0f       	add	r30, r24
    1134:	f1 1d       	adc	r31, r1
    1136:	a1 50       	subi	r26, 0x01	; 1
    1138:	a0 93 47 02 	sts	0x0247, r26
    113c:	b0 e0       	ldi	r27, 0x00	; 0
    113e:	a8 5b       	subi	r26, 0xB8	; 184
    1140:	bd 4f       	sbci	r27, 0xFD	; 253
    1142:	8c 91       	ld	r24, X
    1144:	80 83       	st	Z, r24
    1146:	80 91 fb 01 	lds	r24, 0x01FB
    114a:	8f 5f       	subi	r24, 0xFF	; 255
    114c:	80 93 fb 01 	sts	0x01FB, r24
    1150:	90 91 fb 01 	lds	r25, 0x01FB
    1154:	80 91 fd 01 	lds	r24, 0x01FD
    1158:	98 17       	cp	r25, r24
    115a:	09 f0       	breq	.+2      	; 0x115e <_ZN15OrangutanSerial15serial_rx_checkEh+0x182>
    115c:	ba cf       	rjmp	.-140    	; 0x10d2 <_ZN15OrangutanSerial15serial_rx_checkEh+0xf6>
    115e:	b2 cf       	rjmp	.-156    	; 0x10c4 <_ZN15OrangutanSerial15serial_rx_checkEh+0xe8>
    1160:	1f 91       	pop	r17
    1162:	0f 91       	pop	r16
    1164:	08 95       	ret

00001166 <_ZN15OrangutanSerial14receive_inlineEhPchh>:
    1166:	82 30       	cpi	r24, 0x02	; 2
    1168:	51 f0       	breq	.+20     	; 0x117e <_ZN15OrangutanSerial14receive_inlineEhPchh+0x18>
    116a:	88 23       	and	r24, r24
    116c:	19 f4       	brne	.+6      	; 0x1174 <_ZN15OrangutanSerial14receive_inlineEhPchh+0xe>
    116e:	e1 ec       	ldi	r30, 0xC1	; 193
    1170:	f0 e0       	ldi	r31, 0x00	; 0
    1172:	02 c0       	rjmp	.+4      	; 0x1178 <_ZN15OrangutanSerial14receive_inlineEhPchh+0x12>
    1174:	e9 ec       	ldi	r30, 0xC9	; 201
    1176:	f0 e0       	ldi	r31, 0x00	; 0
    1178:	90 81       	ld	r25, Z
    117a:	9f 77       	andi	r25, 0x7F	; 127
    117c:	90 83       	st	Z, r25
    117e:	a8 2f       	mov	r26, r24
    1180:	b0 e0       	ldi	r27, 0x00	; 0
    1182:	fd 01       	movw	r30, r26
    1184:	ee 0f       	add	r30, r30
    1186:	ff 1f       	adc	r31, r31
    1188:	53 e0       	ldi	r21, 0x03	; 3
    118a:	aa 0f       	add	r26, r26
    118c:	bb 1f       	adc	r27, r27
    118e:	5a 95       	dec	r21
    1190:	e1 f7       	brne	.-8      	; 0x118a <_ZN15OrangutanSerial14receive_inlineEhPchh+0x24>
    1192:	ea 0f       	add	r30, r26
    1194:	fb 1f       	adc	r31, r27
    1196:	eb 51       	subi	r30, 0x1B	; 27
    1198:	fe 4f       	sbci	r31, 0xFE	; 254
    119a:	71 87       	std	Z+9, r23	; 0x09
    119c:	60 87       	std	Z+8, r22	; 0x08
    119e:	68 2f       	mov	r22, r24
    11a0:	70 e0       	ldi	r23, 0x00	; 0
    11a2:	fb 01       	movw	r30, r22
    11a4:	ee 0f       	add	r30, r30
    11a6:	ff 1f       	adc	r31, r31
    11a8:	93 e0       	ldi	r25, 0x03	; 3
    11aa:	66 0f       	add	r22, r22
    11ac:	77 1f       	adc	r23, r23
    11ae:	9a 95       	dec	r25
    11b0:	e1 f7       	brne	.-8      	; 0x11aa <_ZN15OrangutanSerial14receive_inlineEhPchh+0x44>
    11b2:	e6 0f       	add	r30, r22
    11b4:	f7 1f       	adc	r31, r23
    11b6:	eb 51       	subi	r30, 0x1B	; 27
    11b8:	fe 4f       	sbci	r31, 0xFE	; 254
    11ba:	12 82       	std	Z+2, r1	; 0x02
    11bc:	68 2f       	mov	r22, r24
    11be:	70 e0       	ldi	r23, 0x00	; 0
    11c0:	fb 01       	movw	r30, r22
    11c2:	ee 0f       	add	r30, r30
    11c4:	ff 1f       	adc	r31, r31
    11c6:	a3 e0       	ldi	r26, 0x03	; 3
    11c8:	66 0f       	add	r22, r22
    11ca:	77 1f       	adc	r23, r23
    11cc:	aa 95       	dec	r26
    11ce:	e1 f7       	brne	.-8      	; 0x11c8 <_ZN15OrangutanSerial14receive_inlineEhPchh+0x62>
    11d0:	e6 0f       	add	r30, r22
    11d2:	f7 1f       	adc	r31, r23
    11d4:	eb 51       	subi	r30, 0x1B	; 27
    11d6:	fe 4f       	sbci	r31, 0xFE	; 254
    11d8:	44 83       	std	Z+4, r20	; 0x04
    11da:	48 2f       	mov	r20, r24
    11dc:	50 e0       	ldi	r21, 0x00	; 0
    11de:	fa 01       	movw	r30, r20
    11e0:	ee 0f       	add	r30, r30
    11e2:	ff 1f       	adc	r31, r31
    11e4:	63 e0       	ldi	r22, 0x03	; 3
    11e6:	44 0f       	add	r20, r20
    11e8:	55 1f       	adc	r21, r21
    11ea:	6a 95       	dec	r22
    11ec:	e1 f7       	brne	.-8      	; 0x11e6 <_ZN15OrangutanSerial14receive_inlineEhPchh+0x80>
    11ee:	e4 0f       	add	r30, r20
    11f0:	f5 1f       	adc	r31, r21
    11f2:	eb 51       	subi	r30, 0x1B	; 27
    11f4:	fe 4f       	sbci	r31, 0xFE	; 254
    11f6:	25 83       	std	Z+5, r18	; 0x05
    11f8:	82 30       	cpi	r24, 0x02	; 2
    11fa:	d9 f0       	breq	.+54     	; 0x1232 <_ZN15OrangutanSerial14receive_inlineEhPchh+0xcc>
    11fc:	28 2f       	mov	r18, r24
    11fe:	30 e0       	ldi	r19, 0x00	; 0
    1200:	f9 01       	movw	r30, r18
    1202:	ee 0f       	add	r30, r30
    1204:	ff 1f       	adc	r31, r31
    1206:	43 e0       	ldi	r20, 0x03	; 3
    1208:	22 0f       	add	r18, r18
    120a:	33 1f       	adc	r19, r19
    120c:	4a 95       	dec	r20
    120e:	e1 f7       	brne	.-8      	; 0x1208 <_ZN15OrangutanSerial14receive_inlineEhPchh+0xa2>
    1210:	e2 0f       	add	r30, r18
    1212:	f3 1f       	adc	r31, r19
    1214:	eb 51       	subi	r30, 0x1B	; 27
    1216:	fe 4f       	sbci	r31, 0xFE	; 254
    1218:	90 81       	ld	r25, Z
    121a:	99 23       	and	r25, r25
    121c:	51 f4       	brne	.+20     	; 0x1232 <_ZN15OrangutanSerial14receive_inlineEhPchh+0xcc>
    121e:	88 23       	and	r24, r24
    1220:	19 f4       	brne	.+6      	; 0x1228 <_ZN15OrangutanSerial14receive_inlineEhPchh+0xc2>
    1222:	e1 ec       	ldi	r30, 0xC1	; 193
    1224:	f0 e0       	ldi	r31, 0x00	; 0
    1226:	02 c0       	rjmp	.+4      	; 0x122c <_ZN15OrangutanSerial14receive_inlineEhPchh+0xc6>
    1228:	e9 ec       	ldi	r30, 0xC9	; 201
    122a:	f0 e0       	ldi	r31, 0x00	; 0
    122c:	80 81       	ld	r24, Z
    122e:	80 68       	ori	r24, 0x80	; 128
    1230:	80 83       	st	Z, r24
    1232:	08 95       	ret

00001234 <_ZN15OrangutanSerial11receiveRingEhPch>:
    1234:	21 e0       	ldi	r18, 0x01	; 1
    1236:	0e 94 b3 08 	call	0x1166	; 0x1166 <_ZN15OrangutanSerial14receive_inlineEhPchh>
    123a:	08 95       	ret

0000123c <serial_receive_ring>:
    123c:	0e 94 1a 09 	call	0x1234	; 0x1234 <_ZN15OrangutanSerial11receiveRingEhPch>
    1240:	08 95       	ret

00001242 <__vector_20>:
    1242:	1f 92       	push	r1
    1244:	0f 92       	push	r0
    1246:	0f b6       	in	r0, 0x3f	; 63
    1248:	0f 92       	push	r0
    124a:	0b b6       	in	r0, 0x3b	; 59
    124c:	0f 92       	push	r0
    124e:	11 24       	eor	r1, r1
    1250:	2f 93       	push	r18
    1252:	3f 93       	push	r19
    1254:	4f 93       	push	r20
    1256:	5f 93       	push	r21
    1258:	6f 93       	push	r22
    125a:	7f 93       	push	r23
    125c:	8f 93       	push	r24
    125e:	9f 93       	push	r25
    1260:	af 93       	push	r26
    1262:	bf 93       	push	r27
    1264:	ef 93       	push	r30
    1266:	ff 93       	push	r31
    1268:	60 91 c6 00 	lds	r22, 0x00C6
    126c:	80 e0       	ldi	r24, 0x00	; 0
    126e:	0e 94 47 07 	call	0xe8e	; 0xe8e <_ZN15OrangutanSerial21serial_rx_handle_byteEhh>
    1272:	ff 91       	pop	r31
    1274:	ef 91       	pop	r30
    1276:	bf 91       	pop	r27
    1278:	af 91       	pop	r26
    127a:	9f 91       	pop	r25
    127c:	8f 91       	pop	r24
    127e:	7f 91       	pop	r23
    1280:	6f 91       	pop	r22
    1282:	5f 91       	pop	r21
    1284:	4f 91       	pop	r20
    1286:	3f 91       	pop	r19
    1288:	2f 91       	pop	r18
    128a:	0f 90       	pop	r0
    128c:	0b be       	out	0x3b, r0	; 59
    128e:	0f 90       	pop	r0
    1290:	0f be       	out	0x3f, r0	; 63
    1292:	0f 90       	pop	r0
    1294:	1f 90       	pop	r1
    1296:	18 95       	reti

00001298 <__vector_28>:
    1298:	1f 92       	push	r1
    129a:	0f 92       	push	r0
    129c:	0f b6       	in	r0, 0x3f	; 63
    129e:	0f 92       	push	r0
    12a0:	0b b6       	in	r0, 0x3b	; 59
    12a2:	0f 92       	push	r0
    12a4:	11 24       	eor	r1, r1
    12a6:	2f 93       	push	r18
    12a8:	3f 93       	push	r19
    12aa:	4f 93       	push	r20
    12ac:	5f 93       	push	r21
    12ae:	6f 93       	push	r22
    12b0:	7f 93       	push	r23
    12b2:	8f 93       	push	r24
    12b4:	9f 93       	push	r25
    12b6:	af 93       	push	r26
    12b8:	bf 93       	push	r27
    12ba:	ef 93       	push	r30
    12bc:	ff 93       	push	r31
    12be:	60 91 ce 00 	lds	r22, 0x00CE
    12c2:	81 e0       	ldi	r24, 0x01	; 1
    12c4:	0e 94 47 07 	call	0xe8e	; 0xe8e <_ZN15OrangutanSerial21serial_rx_handle_byteEhh>
    12c8:	ff 91       	pop	r31
    12ca:	ef 91       	pop	r30
    12cc:	bf 91       	pop	r27
    12ce:	af 91       	pop	r26
    12d0:	9f 91       	pop	r25
    12d2:	8f 91       	pop	r24
    12d4:	7f 91       	pop	r23
    12d6:	6f 91       	pop	r22
    12d8:	5f 91       	pop	r21
    12da:	4f 91       	pop	r20
    12dc:	3f 91       	pop	r19
    12de:	2f 91       	pop	r18
    12e0:	0f 90       	pop	r0
    12e2:	0b be       	out	0x3b, r0	; 59
    12e4:	0f 90       	pop	r0
    12e6:	0f be       	out	0x3f, r0	; 63
    12e8:	0f 90       	pop	r0
    12ea:	1f 90       	pop	r1
    12ec:	18 95       	reti

000012ee <_Z24uart_enable_tx_interrupth>:
    12ee:	88 23       	and	r24, r24
    12f0:	19 f4       	brne	.+6      	; 0x12f8 <_Z24uart_enable_tx_interrupth+0xa>
    12f2:	e1 ec       	ldi	r30, 0xC1	; 193
    12f4:	f0 e0       	ldi	r31, 0x00	; 0
    12f6:	02 c0       	rjmp	.+4      	; 0x12fc <_Z24uart_enable_tx_interrupth+0xe>
    12f8:	e9 ec       	ldi	r30, 0xC9	; 201
    12fa:	f0 e0       	ldi	r31, 0x00	; 0
    12fc:	80 81       	ld	r24, Z
    12fe:	80 62       	ori	r24, 0x20	; 32
    1300:	80 83       	st	Z, r24
    1302:	08 95       	ret

00001304 <_Z25uart_disable_tx_interrupth>:
    1304:	88 23       	and	r24, r24
    1306:	19 f4       	brne	.+6      	; 0x130e <_Z25uart_disable_tx_interrupth+0xa>
    1308:	e1 ec       	ldi	r30, 0xC1	; 193
    130a:	f0 e0       	ldi	r31, 0x00	; 0
    130c:	02 c0       	rjmp	.+4      	; 0x1312 <_Z25uart_disable_tx_interrupth+0xe>
    130e:	e9 ec       	ldi	r30, 0xC9	; 201
    1310:	f0 e0       	ldi	r31, 0x00	; 0
    1312:	80 81       	ld	r24, Z
    1314:	8f 7d       	andi	r24, 0xDF	; 223
    1316:	80 83       	st	Z, r24
    1318:	08 95       	ret

0000131a <_ZN15OrangutanSerial24uart_update_tx_interruptEh>:
    131a:	28 2f       	mov	r18, r24
    131c:	30 e0       	ldi	r19, 0x00	; 0
    131e:	f9 01       	movw	r30, r18
    1320:	ee 0f       	add	r30, r30
    1322:	ff 1f       	adc	r31, r31
    1324:	93 e0       	ldi	r25, 0x03	; 3
    1326:	22 0f       	add	r18, r18
    1328:	33 1f       	adc	r19, r19
    132a:	9a 95       	dec	r25
    132c:	e1 f7       	brne	.-8      	; 0x1326 <_ZN15OrangutanSerial24uart_update_tx_interruptEh+0xc>
    132e:	e2 0f       	add	r30, r18
    1330:	f3 1f       	adc	r31, r19
    1332:	eb 51       	subi	r30, 0x1B	; 27
    1334:	fe 4f       	sbci	r31, 0xFE	; 254
    1336:	26 81       	ldd	r18, Z+6	; 0x06
    1338:	37 81       	ldd	r19, Z+7	; 0x07
    133a:	21 15       	cp	r18, r1
    133c:	31 05       	cpc	r19, r1
    133e:	a1 f1       	breq	.+104    	; 0x13a8 <_ZN15OrangutanSerial24uart_update_tx_interruptEh+0x8e>
    1340:	28 2f       	mov	r18, r24
    1342:	30 e0       	ldi	r19, 0x00	; 0
    1344:	f9 01       	movw	r30, r18
    1346:	ee 0f       	add	r30, r30
    1348:	ff 1f       	adc	r31, r31
    134a:	a3 e0       	ldi	r26, 0x03	; 3
    134c:	22 0f       	add	r18, r18
    134e:	33 1f       	adc	r19, r19
    1350:	aa 95       	dec	r26
    1352:	e1 f7       	brne	.-8      	; 0x134c <_ZN15OrangutanSerial24uart_update_tx_interruptEh+0x32>
    1354:	e2 0f       	add	r30, r18
    1356:	f3 1f       	adc	r31, r19
    1358:	eb 51       	subi	r30, 0x1B	; 27
    135a:	fe 4f       	sbci	r31, 0xFE	; 254
    135c:	41 81       	ldd	r20, Z+1	; 0x01
    135e:	28 2f       	mov	r18, r24
    1360:	30 e0       	ldi	r19, 0x00	; 0
    1362:	f9 01       	movw	r30, r18
    1364:	ee 0f       	add	r30, r30
    1366:	ff 1f       	adc	r31, r31
    1368:	63 e0       	ldi	r22, 0x03	; 3
    136a:	22 0f       	add	r18, r18
    136c:	33 1f       	adc	r19, r19
    136e:	6a 95       	dec	r22
    1370:	e1 f7       	brne	.-8      	; 0x136a <_ZN15OrangutanSerial24uart_update_tx_interruptEh+0x50>
    1372:	e2 0f       	add	r30, r18
    1374:	f3 1f       	adc	r31, r19
    1376:	eb 51       	subi	r30, 0x1B	; 27
    1378:	fe 4f       	sbci	r31, 0xFE	; 254
    137a:	93 81       	ldd	r25, Z+3	; 0x03
    137c:	49 17       	cp	r20, r25
    137e:	a0 f4       	brcc	.+40     	; 0x13a8 <_ZN15OrangutanSerial24uart_update_tx_interruptEh+0x8e>
    1380:	28 2f       	mov	r18, r24
    1382:	30 e0       	ldi	r19, 0x00	; 0
    1384:	f9 01       	movw	r30, r18
    1386:	ee 0f       	add	r30, r30
    1388:	ff 1f       	adc	r31, r31
    138a:	43 e0       	ldi	r20, 0x03	; 3
    138c:	22 0f       	add	r18, r18
    138e:	33 1f       	adc	r19, r19
    1390:	4a 95       	dec	r20
    1392:	e1 f7       	brne	.-8      	; 0x138c <_ZN15OrangutanSerial24uart_update_tx_interruptEh+0x72>
    1394:	e2 0f       	add	r30, r18
    1396:	f3 1f       	adc	r31, r19
    1398:	eb 51       	subi	r30, 0x1B	; 27
    139a:	fe 4f       	sbci	r31, 0xFE	; 254
    139c:	90 81       	ld	r25, Z
    139e:	99 23       	and	r25, r25
    13a0:	19 f4       	brne	.+6      	; 0x13a8 <_ZN15OrangutanSerial24uart_update_tx_interruptEh+0x8e>
    13a2:	0e 94 77 09 	call	0x12ee	; 0x12ee <_Z24uart_enable_tx_interrupth>
    13a6:	08 95       	ret
    13a8:	0e 94 82 09 	call	0x1304	; 0x1304 <_Z25uart_disable_tx_interrupth>
    13ac:	08 95       	ret

000013ae <_ZN15OrangutanSerial15initUART_inlineEh>:
    13ae:	82 30       	cpi	r24, 0x02	; 2
    13b0:	31 f1       	breq	.+76     	; 0x13fe <_ZN15OrangutanSerial15initUART_inlineEh+0x50>
    13b2:	28 2f       	mov	r18, r24
    13b4:	30 e0       	ldi	r19, 0x00	; 0
    13b6:	f9 01       	movw	r30, r18
    13b8:	ee 0f       	add	r30, r30
    13ba:	ff 1f       	adc	r31, r31
    13bc:	53 e0       	ldi	r21, 0x03	; 3
    13be:	22 0f       	add	r18, r18
    13c0:	33 1f       	adc	r19, r19
    13c2:	5a 95       	dec	r21
    13c4:	e1 f7       	brne	.-8      	; 0x13be <_ZN15OrangutanSerial15initUART_inlineEh+0x10>
    13c6:	e2 0f       	add	r30, r18
    13c8:	f3 1f       	adc	r31, r19
    13ca:	eb 51       	subi	r30, 0x1B	; 27
    13cc:	fe 4f       	sbci	r31, 0xFE	; 254
    13ce:	90 81       	ld	r25, Z
    13d0:	99 23       	and	r25, r25
    13d2:	49 f4       	brne	.+18     	; 0x13e6 <_ZN15OrangutanSerial15initUART_inlineEh+0x38>
    13d4:	88 23       	and	r24, r24
    13d6:	19 f4       	brne	.+6      	; 0x13de <_ZN15OrangutanSerial15initUART_inlineEh+0x30>
    13d8:	e1 ec       	ldi	r30, 0xC1	; 193
    13da:	f0 e0       	ldi	r31, 0x00	; 0
    13dc:	02 c0       	rjmp	.+4      	; 0x13e2 <_ZN15OrangutanSerial15initUART_inlineEh+0x34>
    13de:	e9 ec       	ldi	r30, 0xC9	; 201
    13e0:	f0 e0       	ldi	r31, 0x00	; 0
    13e2:	98 e9       	ldi	r25, 0x98	; 152
    13e4:	08 c0       	rjmp	.+16     	; 0x13f6 <_ZN15OrangutanSerial15initUART_inlineEh+0x48>
    13e6:	88 23       	and	r24, r24
    13e8:	19 f4       	brne	.+6      	; 0x13f0 <_ZN15OrangutanSerial15initUART_inlineEh+0x42>
    13ea:	e1 ec       	ldi	r30, 0xC1	; 193
    13ec:	f0 e0       	ldi	r31, 0x00	; 0
    13ee:	02 c0       	rjmp	.+4      	; 0x13f4 <_ZN15OrangutanSerial15initUART_inlineEh+0x46>
    13f0:	e9 ec       	ldi	r30, 0xC9	; 201
    13f2:	f0 e0       	ldi	r31, 0x00	; 0
    13f4:	98 e1       	ldi	r25, 0x18	; 24
    13f6:	90 83       	st	Z, r25
    13f8:	0e 94 8d 09 	call	0x131a	; 0x131a <_ZN15OrangutanSerial24uart_update_tx_interruptEh>
    13fc:	78 94       	sei
    13fe:	08 95       	ret

00001400 <_ZN15OrangutanSerial8initPortEh>:
    1400:	88 23       	and	r24, r24
    1402:	19 f0       	breq	.+6      	; 0x140a <_ZN15OrangutanSerial8initPortEh+0xa>
    1404:	81 30       	cpi	r24, 0x01	; 1
    1406:	41 f4       	brne	.+16     	; 0x1418 <_ZN15OrangutanSerial8initPortEh+0x18>
    1408:	04 c0       	rjmp	.+8      	; 0x1412 <_ZN15OrangutanSerial8initPortEh+0x12>
    140a:	80 e0       	ldi	r24, 0x00	; 0
    140c:	0e 94 d7 09 	call	0x13ae	; 0x13ae <_ZN15OrangutanSerial15initUART_inlineEh>
    1410:	08 95       	ret
    1412:	81 e0       	ldi	r24, 0x01	; 1
    1414:	0e 94 d7 09 	call	0x13ae	; 0x13ae <_ZN15OrangutanSerial15initUART_inlineEh>
    1418:	08 95       	ret

0000141a <_ZN15OrangutanSerial11setBaudRateEhm>:
    141a:	a0 e0       	ldi	r26, 0x00	; 0
    141c:	b0 e0       	ldi	r27, 0x00	; 0
    141e:	e3 e1       	ldi	r30, 0x13	; 19
    1420:	fa e0       	ldi	r31, 0x0A	; 10
    1422:	0c 94 cf 13 	jmp	0x279e	; 0x279e <__prologue_saves__+0x16>
    1426:	d8 2e       	mov	r13, r24
    1428:	7a 01       	movw	r14, r20
    142a:	8b 01       	movw	r16, r22
    142c:	0e 94 00 0a 	call	0x1400	; 0x1400 <_ZN15OrangutanSerial8initPortEh>
    1430:	8d 2d       	mov	r24, r13
    1432:	82 30       	cpi	r24, 0x02	; 2
    1434:	01 f1       	breq	.+64     	; 0x1476 <_ZN15OrangutanSerial11setBaudRateEhm+0x5c>
    1436:	dd 20       	and	r13, r13
    1438:	19 f4       	brne	.+6      	; 0x1440 <_ZN15OrangutanSerial11setBaudRateEhm+0x26>
    143a:	c4 ec       	ldi	r28, 0xC4	; 196
    143c:	d0 e0       	ldi	r29, 0x00	; 0
    143e:	02 c0       	rjmp	.+4      	; 0x1444 <_ZN15OrangutanSerial11setBaudRateEhm+0x2a>
    1440:	cc ec       	ldi	r28, 0xCC	; 204
    1442:	d0 e0       	ldi	r29, 0x00	; 0
    1444:	c8 01       	movw	r24, r16
    1446:	b7 01       	movw	r22, r14
    1448:	28 ef       	ldi	r18, 0xF8	; 248
    144a:	3f ef       	ldi	r19, 0xFF	; 255
    144c:	4f ef       	ldi	r20, 0xFF	; 255
    144e:	5f ef       	ldi	r21, 0xFF	; 255
    1450:	0e 94 48 13 	call	0x2690	; 0x2690 <__mulsi3>
    1454:	60 50       	subi	r22, 0x00	; 0
    1456:	73 4d       	sbci	r23, 0xD3	; 211
    1458:	8e 4c       	sbci	r24, 0xCE	; 206
    145a:	9e 4f       	sbci	r25, 0xFE	; 254
    145c:	a8 01       	movw	r20, r16
    145e:	97 01       	movw	r18, r14
    1460:	e4 e0       	ldi	r30, 0x04	; 4
    1462:	22 0f       	add	r18, r18
    1464:	33 1f       	adc	r19, r19
    1466:	44 1f       	adc	r20, r20
    1468:	55 1f       	adc	r21, r21
    146a:	ea 95       	dec	r30
    146c:	d1 f7       	brne	.-12     	; 0x1462 <_ZN15OrangutanSerial11setBaudRateEhm+0x48>
    146e:	0e 94 87 13 	call	0x270e	; 0x270e <__udivmodsi4>
    1472:	39 83       	std	Y+1, r19	; 0x01
    1474:	28 83       	st	Y, r18
    1476:	cd b7       	in	r28, 0x3d	; 61
    1478:	de b7       	in	r29, 0x3e	; 62
    147a:	e7 e0       	ldi	r30, 0x07	; 7
    147c:	0c 94 eb 13 	jmp	0x27d6	; 0x27d6 <__epilogue_restores__+0x16>

00001480 <serial_set_baud_rate>:
    1480:	0e 94 0d 0a 	call	0x141a	; 0x141a <_ZN15OrangutanSerial11setBaudRateEhm>
    1484:	08 95       	ret

00001486 <_ZN15OrangutanSerial11uart_tx_isrEh>:
    1486:	28 2f       	mov	r18, r24
    1488:	30 e0       	ldi	r19, 0x00	; 0
    148a:	f9 01       	movw	r30, r18
    148c:	ee 0f       	add	r30, r30
    148e:	ff 1f       	adc	r31, r31
    1490:	73 e0       	ldi	r23, 0x03	; 3
    1492:	22 0f       	add	r18, r18
    1494:	33 1f       	adc	r19, r19
    1496:	7a 95       	dec	r23
    1498:	e1 f7       	brne	.-8      	; 0x1492 <_ZN15OrangutanSerial11uart_tx_isrEh+0xc>
    149a:	e2 0f       	add	r30, r18
    149c:	f3 1f       	adc	r31, r19
    149e:	eb 51       	subi	r30, 0x1B	; 27
    14a0:	fe 4f       	sbci	r31, 0xFE	; 254
    14a2:	46 81       	ldd	r20, Z+6	; 0x06
    14a4:	57 81       	ldd	r21, Z+7	; 0x07
    14a6:	41 15       	cp	r20, r1
    14a8:	51 05       	cpc	r21, r1
    14aa:	09 f4       	brne	.+2      	; 0x14ae <_ZN15OrangutanSerial11uart_tx_isrEh+0x28>
    14ac:	65 c0       	rjmp	.+202    	; 0x1578 <_ZN15OrangutanSerial11uart_tx_isrEh+0xf2>
    14ae:	28 2f       	mov	r18, r24
    14b0:	30 e0       	ldi	r19, 0x00	; 0
    14b2:	f9 01       	movw	r30, r18
    14b4:	ee 0f       	add	r30, r30
    14b6:	ff 1f       	adc	r31, r31
    14b8:	93 e0       	ldi	r25, 0x03	; 3
    14ba:	22 0f       	add	r18, r18
    14bc:	33 1f       	adc	r19, r19
    14be:	9a 95       	dec	r25
    14c0:	e1 f7       	brne	.-8      	; 0x14ba <_ZN15OrangutanSerial11uart_tx_isrEh+0x34>
    14c2:	e2 0f       	add	r30, r18
    14c4:	f3 1f       	adc	r31, r19
    14c6:	eb 51       	subi	r30, 0x1B	; 27
    14c8:	fe 4f       	sbci	r31, 0xFE	; 254
    14ca:	61 81       	ldd	r22, Z+1	; 0x01
    14cc:	28 2f       	mov	r18, r24
    14ce:	30 e0       	ldi	r19, 0x00	; 0
    14d0:	f9 01       	movw	r30, r18
    14d2:	ee 0f       	add	r30, r30
    14d4:	ff 1f       	adc	r31, r31
    14d6:	a3 e0       	ldi	r26, 0x03	; 3
    14d8:	22 0f       	add	r18, r18
    14da:	33 1f       	adc	r19, r19
    14dc:	aa 95       	dec	r26
    14de:	e1 f7       	brne	.-8      	; 0x14d8 <_ZN15OrangutanSerial11uart_tx_isrEh+0x52>
    14e0:	e2 0f       	add	r30, r18
    14e2:	f3 1f       	adc	r31, r19
    14e4:	eb 51       	subi	r30, 0x1B	; 27
    14e6:	fe 4f       	sbci	r31, 0xFE	; 254
    14e8:	93 81       	ldd	r25, Z+3	; 0x03
    14ea:	69 17       	cp	r22, r25
    14ec:	08 f0       	brcs	.+2      	; 0x14f0 <_ZN15OrangutanSerial11uart_tx_isrEh+0x6a>
    14ee:	44 c0       	rjmp	.+136    	; 0x1578 <_ZN15OrangutanSerial11uart_tx_isrEh+0xf2>
    14f0:	88 23       	and	r24, r24
    14f2:	19 f4       	brne	.+6      	; 0x14fa <_ZN15OrangutanSerial11uart_tx_isrEh+0x74>
    14f4:	e0 ec       	ldi	r30, 0xC0	; 192
    14f6:	f0 e0       	ldi	r31, 0x00	; 0
    14f8:	02 c0       	rjmp	.+4      	; 0x14fe <_ZN15OrangutanSerial11uart_tx_isrEh+0x78>
    14fa:	e8 ec       	ldi	r30, 0xC8	; 200
    14fc:	f0 e0       	ldi	r31, 0x00	; 0
    14fe:	90 81       	ld	r25, Z
    1500:	95 ff       	sbrs	r25, 5
    1502:	3a c0       	rjmp	.+116    	; 0x1578 <_ZN15OrangutanSerial11uart_tx_isrEh+0xf2>
    1504:	88 23       	and	r24, r24
    1506:	19 f4       	brne	.+6      	; 0x150e <_ZN15OrangutanSerial11uart_tx_isrEh+0x88>
    1508:	a6 ec       	ldi	r26, 0xC6	; 198
    150a:	b0 e0       	ldi	r27, 0x00	; 0
    150c:	02 c0       	rjmp	.+4      	; 0x1512 <_ZN15OrangutanSerial11uart_tx_isrEh+0x8c>
    150e:	ae ec       	ldi	r26, 0xCE	; 206
    1510:	b0 e0       	ldi	r27, 0x00	; 0
    1512:	28 2f       	mov	r18, r24
    1514:	30 e0       	ldi	r19, 0x00	; 0
    1516:	f9 01       	movw	r30, r18
    1518:	ee 0f       	add	r30, r30
    151a:	ff 1f       	adc	r31, r31
    151c:	63 e0       	ldi	r22, 0x03	; 3
    151e:	22 0f       	add	r18, r18
    1520:	33 1f       	adc	r19, r19
    1522:	6a 95       	dec	r22
    1524:	e1 f7       	brne	.-8      	; 0x151e <_ZN15OrangutanSerial11uart_tx_isrEh+0x98>
    1526:	e2 0f       	add	r30, r18
    1528:	f3 1f       	adc	r31, r19
    152a:	eb 51       	subi	r30, 0x1B	; 27
    152c:	fe 4f       	sbci	r31, 0xFE	; 254
    152e:	91 81       	ldd	r25, Z+1	; 0x01
    1530:	49 0f       	add	r20, r25
    1532:	51 1d       	adc	r21, r1
    1534:	fa 01       	movw	r30, r20
    1536:	90 81       	ld	r25, Z
    1538:	9c 93       	st	X, r25
    153a:	28 2f       	mov	r18, r24
    153c:	30 e0       	ldi	r19, 0x00	; 0
    153e:	f9 01       	movw	r30, r18
    1540:	ee 0f       	add	r30, r30
    1542:	ff 1f       	adc	r31, r31
    1544:	93 e0       	ldi	r25, 0x03	; 3
    1546:	22 0f       	add	r18, r18
    1548:	33 1f       	adc	r19, r19
    154a:	9a 95       	dec	r25
    154c:	e1 f7       	brne	.-8      	; 0x1546 <_ZN15OrangutanSerial11uart_tx_isrEh+0xc0>
    154e:	e2 0f       	add	r30, r18
    1550:	f3 1f       	adc	r31, r19
    1552:	eb 51       	subi	r30, 0x1B	; 27
    1554:	fe 4f       	sbci	r31, 0xFE	; 254
    1556:	91 81       	ldd	r25, Z+1	; 0x01
    1558:	9f 5f       	subi	r25, 0xFF	; 255
    155a:	28 2f       	mov	r18, r24
    155c:	30 e0       	ldi	r19, 0x00	; 0
    155e:	f9 01       	movw	r30, r18
    1560:	ee 0f       	add	r30, r30
    1562:	ff 1f       	adc	r31, r31
    1564:	a3 e0       	ldi	r26, 0x03	; 3
    1566:	22 0f       	add	r18, r18
    1568:	33 1f       	adc	r19, r19
    156a:	aa 95       	dec	r26
    156c:	e1 f7       	brne	.-8      	; 0x1566 <_ZN15OrangutanSerial11uart_tx_isrEh+0xe0>
    156e:	e2 0f       	add	r30, r18
    1570:	f3 1f       	adc	r31, r19
    1572:	eb 51       	subi	r30, 0x1B	; 27
    1574:	fe 4f       	sbci	r31, 0xFE	; 254
    1576:	91 83       	std	Z+1, r25	; 0x01
    1578:	0e 94 8d 09 	call	0x131a	; 0x131a <_ZN15OrangutanSerial24uart_update_tx_interruptEh>
    157c:	08 95       	ret

0000157e <_ZN15OrangutanSerial15serial_tx_checkEh>:
    157e:	1f 93       	push	r17
    1580:	18 2f       	mov	r17, r24
    1582:	82 30       	cpi	r24, 0x02	; 2
    1584:	31 f0       	breq	.+12     	; 0x1592 <_ZN15OrangutanSerial15serial_tx_checkEh+0x14>
    1586:	0e 94 82 09 	call	0x1304	; 0x1304 <_Z25uart_disable_tx_interrupth>
    158a:	81 2f       	mov	r24, r17
    158c:	0e 94 43 0a 	call	0x1486	; 0x1486 <_ZN15OrangutanSerial11uart_tx_isrEh>
    1590:	1d c0       	rjmp	.+58     	; 0x15cc <_ZN15OrangutanSerial15serial_tx_checkEh+0x4e>
    1592:	80 91 ff 01 	lds	r24, 0x01FF
    1596:	90 91 00 02 	lds	r25, 0x0200
    159a:	00 97       	sbiw	r24, 0x00	; 0
    159c:	b9 f0       	breq	.+46     	; 0x15cc <_ZN15OrangutanSerial15serial_tx_checkEh+0x4e>
    159e:	30 91 fa 01 	lds	r19, 0x01FA
    15a2:	20 91 fc 01 	lds	r18, 0x01FC
    15a6:	32 17       	cp	r19, r18
    15a8:	88 f4       	brcc	.+34     	; 0x15cc <_ZN15OrangutanSerial15serial_tx_checkEh+0x4e>
    15aa:	06 c0       	rjmp	.+12     	; 0x15b8 <_ZN15OrangutanSerial15serial_tx_checkEh+0x3a>
    15ac:	80 91 fa 01 	lds	r24, 0x01FA
    15b0:	8f 5f       	subi	r24, 0xFF	; 255
    15b2:	80 93 fa 01 	sts	0x01FA, r24
    15b6:	ed cf       	rjmp	.-38     	; 0x1592 <_ZN15OrangutanSerial15serial_tx_checkEh+0x14>
    15b8:	20 91 fa 01 	lds	r18, 0x01FA
    15bc:	82 0f       	add	r24, r18
    15be:	91 1d       	adc	r25, r1
    15c0:	fc 01       	movw	r30, r24
    15c2:	80 81       	ld	r24, Z
    15c4:	0e 94 be 0f 	call	0x1f7c	; 0x1f7c <_ZN12OrangutanSVP17serialSendIfReadyEc>
    15c8:	88 23       	and	r24, r24
    15ca:	81 f7       	brne	.-32     	; 0x15ac <_ZN15OrangutanSerial15serial_tx_checkEh+0x2e>
    15cc:	1f 91       	pop	r17
    15ce:	08 95       	ret

000015d0 <_ZN15OrangutanSerial5checkEv>:
    15d0:	80 e0       	ldi	r24, 0x00	; 0
    15d2:	0e 94 bf 0a 	call	0x157e	; 0x157e <_ZN15OrangutanSerial15serial_tx_checkEh>
    15d6:	81 e0       	ldi	r24, 0x01	; 1
    15d8:	0e 94 bf 0a 	call	0x157e	; 0x157e <_ZN15OrangutanSerial15serial_tx_checkEh>
    15dc:	82 e0       	ldi	r24, 0x02	; 2
    15de:	0e 94 bf 0a 	call	0x157e	; 0x157e <_ZN15OrangutanSerial15serial_tx_checkEh>
    15e2:	80 e0       	ldi	r24, 0x00	; 0
    15e4:	0e 94 ee 07 	call	0xfdc	; 0xfdc <_ZN15OrangutanSerial15serial_rx_checkEh>
    15e8:	81 e0       	ldi	r24, 0x01	; 1
    15ea:	0e 94 ee 07 	call	0xfdc	; 0xfdc <_ZN15OrangutanSerial15serial_rx_checkEh>
    15ee:	82 e0       	ldi	r24, 0x02	; 2
    15f0:	0e 94 ee 07 	call	0xfdc	; 0xfdc <_ZN15OrangutanSerial15serial_rx_checkEh>
    15f4:	08 95       	ret

000015f6 <serial_check>:
    15f6:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <_ZN15OrangutanSerial5checkEv>
    15fa:	08 95       	ret

000015fc <_ZN15OrangutanSerial4sendEhPch>:
    15fc:	28 2f       	mov	r18, r24
    15fe:	30 e0       	ldi	r19, 0x00	; 0
    1600:	f9 01       	movw	r30, r18
    1602:	ee 0f       	add	r30, r30
    1604:	ff 1f       	adc	r31, r31
    1606:	93 e0       	ldi	r25, 0x03	; 3
    1608:	22 0f       	add	r18, r18
    160a:	33 1f       	adc	r19, r19
    160c:	9a 95       	dec	r25
    160e:	e1 f7       	brne	.-8      	; 0x1608 <_ZN15OrangutanSerial4sendEhPch+0xc>
    1610:	e2 0f       	add	r30, r18
    1612:	f3 1f       	adc	r31, r19
    1614:	eb 51       	subi	r30, 0x1B	; 27
    1616:	fe 4f       	sbci	r31, 0xFE	; 254
    1618:	77 83       	std	Z+7, r23	; 0x07
    161a:	66 83       	std	Z+6, r22	; 0x06
    161c:	28 2f       	mov	r18, r24
    161e:	30 e0       	ldi	r19, 0x00	; 0
    1620:	f9 01       	movw	r30, r18
    1622:	ee 0f       	add	r30, r30
    1624:	ff 1f       	adc	r31, r31
    1626:	a3 e0       	ldi	r26, 0x03	; 3
    1628:	22 0f       	add	r18, r18
    162a:	33 1f       	adc	r19, r19
    162c:	aa 95       	dec	r26
    162e:	e1 f7       	brne	.-8      	; 0x1628 <_ZN15OrangutanSerial4sendEhPch+0x2c>
    1630:	e2 0f       	add	r30, r18
    1632:	f3 1f       	adc	r31, r19
    1634:	eb 51       	subi	r30, 0x1B	; 27
    1636:	fe 4f       	sbci	r31, 0xFE	; 254
    1638:	11 82       	std	Z+1, r1	; 0x01
    163a:	28 2f       	mov	r18, r24
    163c:	30 e0       	ldi	r19, 0x00	; 0
    163e:	f9 01       	movw	r30, r18
    1640:	ee 0f       	add	r30, r30
    1642:	ff 1f       	adc	r31, r31
    1644:	63 e0       	ldi	r22, 0x03	; 3
    1646:	22 0f       	add	r18, r18
    1648:	33 1f       	adc	r19, r19
    164a:	6a 95       	dec	r22
    164c:	e1 f7       	brne	.-8      	; 0x1646 <_ZN15OrangutanSerial4sendEhPch+0x4a>
    164e:	e2 0f       	add	r30, r18
    1650:	f3 1f       	adc	r31, r19
    1652:	eb 51       	subi	r30, 0x1B	; 27
    1654:	fe 4f       	sbci	r31, 0xFE	; 254
    1656:	43 83       	std	Z+3, r20	; 0x03
    1658:	82 30       	cpi	r24, 0x02	; 2
    165a:	11 f0       	breq	.+4      	; 0x1660 <_ZN15OrangutanSerial4sendEhPch+0x64>
    165c:	0e 94 8d 09 	call	0x131a	; 0x131a <_ZN15OrangutanSerial24uart_update_tx_interruptEh>
    1660:	08 95       	ret

00001662 <serial_send>:
    1662:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <_ZN15OrangutanSerial4sendEhPch>
    1666:	08 95       	ret

00001668 <__vector_21>:
    1668:	1f 92       	push	r1
    166a:	0f 92       	push	r0
    166c:	0f b6       	in	r0, 0x3f	; 63
    166e:	0f 92       	push	r0
    1670:	0b b6       	in	r0, 0x3b	; 59
    1672:	0f 92       	push	r0
    1674:	11 24       	eor	r1, r1
    1676:	2f 93       	push	r18
    1678:	3f 93       	push	r19
    167a:	4f 93       	push	r20
    167c:	5f 93       	push	r21
    167e:	6f 93       	push	r22
    1680:	7f 93       	push	r23
    1682:	8f 93       	push	r24
    1684:	9f 93       	push	r25
    1686:	af 93       	push	r26
    1688:	bf 93       	push	r27
    168a:	ef 93       	push	r30
    168c:	ff 93       	push	r31
    168e:	80 e0       	ldi	r24, 0x00	; 0
    1690:	0e 94 43 0a 	call	0x1486	; 0x1486 <_ZN15OrangutanSerial11uart_tx_isrEh>
    1694:	ff 91       	pop	r31
    1696:	ef 91       	pop	r30
    1698:	bf 91       	pop	r27
    169a:	af 91       	pop	r26
    169c:	9f 91       	pop	r25
    169e:	8f 91       	pop	r24
    16a0:	7f 91       	pop	r23
    16a2:	6f 91       	pop	r22
    16a4:	5f 91       	pop	r21
    16a6:	4f 91       	pop	r20
    16a8:	3f 91       	pop	r19
    16aa:	2f 91       	pop	r18
    16ac:	0f 90       	pop	r0
    16ae:	0b be       	out	0x3b, r0	; 59
    16b0:	0f 90       	pop	r0
    16b2:	0f be       	out	0x3f, r0	; 63
    16b4:	0f 90       	pop	r0
    16b6:	1f 90       	pop	r1
    16b8:	18 95       	reti

000016ba <__vector_29>:
    16ba:	1f 92       	push	r1
    16bc:	0f 92       	push	r0
    16be:	0f b6       	in	r0, 0x3f	; 63
    16c0:	0f 92       	push	r0
    16c2:	0b b6       	in	r0, 0x3b	; 59
    16c4:	0f 92       	push	r0
    16c6:	11 24       	eor	r1, r1
    16c8:	2f 93       	push	r18
    16ca:	3f 93       	push	r19
    16cc:	4f 93       	push	r20
    16ce:	5f 93       	push	r21
    16d0:	6f 93       	push	r22
    16d2:	7f 93       	push	r23
    16d4:	8f 93       	push	r24
    16d6:	9f 93       	push	r25
    16d8:	af 93       	push	r26
    16da:	bf 93       	push	r27
    16dc:	ef 93       	push	r30
    16de:	ff 93       	push	r31
    16e0:	81 e0       	ldi	r24, 0x01	; 1
    16e2:	0e 94 43 0a 	call	0x1486	; 0x1486 <_ZN15OrangutanSerial11uart_tx_isrEh>
    16e6:	ff 91       	pop	r31
    16e8:	ef 91       	pop	r30
    16ea:	bf 91       	pop	r27
    16ec:	af 91       	pop	r26
    16ee:	9f 91       	pop	r25
    16f0:	8f 91       	pop	r24
    16f2:	7f 91       	pop	r23
    16f4:	6f 91       	pop	r22
    16f6:	5f 91       	pop	r21
    16f8:	4f 91       	pop	r20
    16fa:	3f 91       	pop	r19
    16fc:	2f 91       	pop	r18
    16fe:	0f 90       	pop	r0
    1700:	0b be       	out	0x3b, r0	; 59
    1702:	0f 90       	pop	r0
    1704:	0f be       	out	0x3f, r0	; 63
    1706:	0f 90       	pop	r0
    1708:	1f 90       	pop	r1
    170a:	18 95       	reti

0000170c <_ZN16OrangutanDigital14getIORegistersEP8IOStructh>:
    170c:	fc 01       	movw	r30, r24
    170e:	11 82       	std	Z+1, r1	; 0x01
    1710:	10 82       	st	Z, r1
    1712:	13 82       	std	Z+3, r1	; 0x03
    1714:	12 82       	std	Z+2, r1	; 0x02
    1716:	15 82       	std	Z+5, r1	; 0x05
    1718:	14 82       	std	Z+4, r1	; 0x04
    171a:	16 82       	std	Z+6, r1	; 0x06
    171c:	68 30       	cpi	r22, 0x08	; 8
    171e:	68 f4       	brcc	.+26     	; 0x173a <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x2e>
    1720:	89 e2       	ldi	r24, 0x29	; 41
    1722:	90 e0       	ldi	r25, 0x00	; 0
    1724:	91 83       	std	Z+1, r25	; 0x01
    1726:	80 83       	st	Z, r24
    1728:	8b e2       	ldi	r24, 0x2B	; 43
    172a:	90 e0       	ldi	r25, 0x00	; 0
    172c:	93 83       	std	Z+3, r25	; 0x03
    172e:	82 83       	std	Z+2, r24	; 0x02
    1730:	8a e2       	ldi	r24, 0x2A	; 42
    1732:	90 e0       	ldi	r25, 0x00	; 0
    1734:	95 83       	std	Z+5, r25	; 0x05
    1736:	84 83       	std	Z+4, r24	; 0x04
    1738:	23 c0       	rjmp	.+70     	; 0x1780 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x74>
    173a:	60 31       	cpi	r22, 0x10	; 16
    173c:	80 f4       	brcc	.+32     	; 0x175e <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x52>
    173e:	83 e2       	ldi	r24, 0x23	; 35
    1740:	90 e0       	ldi	r25, 0x00	; 0
    1742:	91 83       	std	Z+1, r25	; 0x01
    1744:	80 83       	st	Z, r24
    1746:	85 e2       	ldi	r24, 0x25	; 37
    1748:	90 e0       	ldi	r25, 0x00	; 0
    174a:	93 83       	std	Z+3, r25	; 0x03
    174c:	82 83       	std	Z+2, r24	; 0x02
    174e:	84 e2       	ldi	r24, 0x24	; 36
    1750:	90 e0       	ldi	r25, 0x00	; 0
    1752:	95 83       	std	Z+5, r25	; 0x05
    1754:	84 83       	std	Z+4, r24	; 0x04
    1756:	70 e0       	ldi	r23, 0x00	; 0
    1758:	68 50       	subi	r22, 0x08	; 8
    175a:	70 40       	sbci	r23, 0x00	; 0
    175c:	11 c0       	rjmp	.+34     	; 0x1780 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x74>
    175e:	68 31       	cpi	r22, 0x18	; 24
    1760:	c0 f4       	brcc	.+48     	; 0x1792 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x86>
    1762:	86 e2       	ldi	r24, 0x26	; 38
    1764:	90 e0       	ldi	r25, 0x00	; 0
    1766:	91 83       	std	Z+1, r25	; 0x01
    1768:	80 83       	st	Z, r24
    176a:	88 e2       	ldi	r24, 0x28	; 40
    176c:	90 e0       	ldi	r25, 0x00	; 0
    176e:	93 83       	std	Z+3, r25	; 0x03
    1770:	82 83       	std	Z+2, r24	; 0x02
    1772:	87 e2       	ldi	r24, 0x27	; 39
    1774:	90 e0       	ldi	r25, 0x00	; 0
    1776:	95 83       	std	Z+5, r25	; 0x05
    1778:	84 83       	std	Z+4, r24	; 0x04
    177a:	70 e0       	ldi	r23, 0x00	; 0
    177c:	60 51       	subi	r22, 0x10	; 16
    177e:	70 40       	sbci	r23, 0x00	; 0
    1780:	81 e0       	ldi	r24, 0x01	; 1
    1782:	90 e0       	ldi	r25, 0x00	; 0
    1784:	02 c0       	rjmp	.+4      	; 0x178a <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x7e>
    1786:	88 0f       	add	r24, r24
    1788:	99 1f       	adc	r25, r25
    178a:	6a 95       	dec	r22
    178c:	e2 f7       	brpl	.-8      	; 0x1786 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x7a>
    178e:	86 83       	std	Z+6, r24	; 0x06
    1790:	08 95       	ret
    1792:	60 32       	cpi	r22, 0x20	; 32
    1794:	c0 f4       	brcc	.+48     	; 0x17c6 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0xba>
    1796:	80 e2       	ldi	r24, 0x20	; 32
    1798:	90 e0       	ldi	r25, 0x00	; 0
    179a:	91 83       	std	Z+1, r25	; 0x01
    179c:	80 83       	st	Z, r24
    179e:	82 e2       	ldi	r24, 0x22	; 34
    17a0:	90 e0       	ldi	r25, 0x00	; 0
    17a2:	93 83       	std	Z+3, r25	; 0x03
    17a4:	82 83       	std	Z+2, r24	; 0x02
    17a6:	81 e2       	ldi	r24, 0x21	; 33
    17a8:	90 e0       	ldi	r25, 0x00	; 0
    17aa:	95 83       	std	Z+5, r25	; 0x05
    17ac:	84 83       	std	Z+4, r24	; 0x04
    17ae:	2f e1       	ldi	r18, 0x1F	; 31
    17b0:	30 e0       	ldi	r19, 0x00	; 0
    17b2:	26 1b       	sub	r18, r22
    17b4:	31 09       	sbc	r19, r1
    17b6:	81 e0       	ldi	r24, 0x01	; 1
    17b8:	90 e0       	ldi	r25, 0x00	; 0
    17ba:	02 c0       	rjmp	.+4      	; 0x17c0 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0xb4>
    17bc:	88 0f       	add	r24, r24
    17be:	99 1f       	adc	r25, r25
    17c0:	2a 95       	dec	r18
    17c2:	e2 f7       	brpl	.-8      	; 0x17bc <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0xb0>
    17c4:	86 83       	std	Z+6, r24	; 0x06
    17c6:	08 95       	ret

000017c8 <_ZN16OrangutanDigital16setDataDirectionEP8IOStructh>:
    17c8:	fc 01       	movw	r30, r24
    17ca:	a4 81       	ldd	r26, Z+4	; 0x04
    17cc:	b5 81       	ldd	r27, Z+5	; 0x05
    17ce:	86 81       	ldd	r24, Z+6	; 0x06
    17d0:	66 23       	and	r22, r22
    17d2:	21 f0       	breq	.+8      	; 0x17dc <_ZN16OrangutanDigital16setDataDirectionEP8IOStructh+0x14>
    17d4:	9c 91       	ld	r25, X
    17d6:	98 2b       	or	r25, r24
    17d8:	9c 93       	st	X, r25
    17da:	08 95       	ret
    17dc:	9c 91       	ld	r25, X
    17de:	80 95       	com	r24
    17e0:	89 23       	and	r24, r25
    17e2:	8c 93       	st	X, r24
    17e4:	08 95       	ret

000017e6 <_ZN16OrangutanDigital14setOutputValueEP8IOStructh>:
    17e6:	fc 01       	movw	r30, r24
    17e8:	6f 3f       	cpi	r22, 0xFF	; 255
    17ea:	31 f4       	brne	.+12     	; 0x17f8 <_ZN16OrangutanDigital14setOutputValueEP8IOStructh+0x12>
    17ec:	a2 81       	ldd	r26, Z+2	; 0x02
    17ee:	b3 81       	ldd	r27, Z+3	; 0x03
    17f0:	8c 91       	ld	r24, X
    17f2:	96 81       	ldd	r25, Z+6	; 0x06
    17f4:	89 27       	eor	r24, r25
    17f6:	0c c0       	rjmp	.+24     	; 0x1810 <_ZN16OrangutanDigital14setOutputValueEP8IOStructh+0x2a>
    17f8:	a2 81       	ldd	r26, Z+2	; 0x02
    17fa:	b3 81       	ldd	r27, Z+3	; 0x03
    17fc:	86 81       	ldd	r24, Z+6	; 0x06
    17fe:	66 23       	and	r22, r22
    1800:	21 f0       	breq	.+8      	; 0x180a <_ZN16OrangutanDigital14setOutputValueEP8IOStructh+0x24>
    1802:	9c 91       	ld	r25, X
    1804:	98 2b       	or	r25, r24
    1806:	9c 93       	st	X, r25
    1808:	08 95       	ret
    180a:	9c 91       	ld	r25, X
    180c:	80 95       	com	r24
    180e:	89 23       	and	r24, r25
    1810:	8c 93       	st	X, r24
    1812:	08 95       	ret

00001814 <_ZN15OrangutanServos11initPortPinEP10PortStructh>:
    1814:	a7 e0       	ldi	r26, 0x07	; 7
    1816:	b0 e0       	ldi	r27, 0x00	; 0
    1818:	e0 e1       	ldi	r30, 0x10	; 16
    181a:	fc e0       	ldi	r31, 0x0C	; 12
    181c:	0c 94 d0 13 	jmp	0x27a0	; 0x27a0 <__prologue_saves__+0x18>
    1820:	7c 01       	movw	r14, r24
    1822:	8e 01       	movw	r16, r28
    1824:	0f 5f       	subi	r16, 0xFF	; 255
    1826:	1f 4f       	sbci	r17, 0xFF	; 255
    1828:	c8 01       	movw	r24, r16
    182a:	0e 94 86 0b 	call	0x170c	; 0x170c <_ZN16OrangutanDigital14getIORegistersEP8IOStructh>
    182e:	c8 01       	movw	r24, r16
    1830:	60 e0       	ldi	r22, 0x00	; 0
    1832:	0e 94 f3 0b 	call	0x17e6	; 0x17e6 <_ZN16OrangutanDigital14setOutputValueEP8IOStructh>
    1836:	c8 01       	movw	r24, r16
    1838:	61 e0       	ldi	r22, 0x01	; 1
    183a:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <_ZN16OrangutanDigital16setDataDirectionEP8IOStructh>
    183e:	8b 81       	ldd	r24, Y+3	; 0x03
    1840:	9c 81       	ldd	r25, Y+4	; 0x04
    1842:	f7 01       	movw	r30, r14
    1844:	91 83       	std	Z+1, r25	; 0x01
    1846:	80 83       	st	Z, r24
    1848:	8f 81       	ldd	r24, Y+7	; 0x07
    184a:	82 83       	std	Z+2, r24	; 0x02
    184c:	27 96       	adiw	r28, 0x07	; 7
    184e:	e6 e0       	ldi	r30, 0x06	; 6
    1850:	0c 94 ec 13 	jmp	0x27d8	; 0x27d8 <__epilogue_restores__+0x18>

00001854 <__vector_12>:
    1854:	1f 92       	push	r1
    1856:	0f 92       	push	r0
    1858:	0f b6       	in	r0, 0x3f	; 63
    185a:	0f 92       	push	r0
    185c:	0b b6       	in	r0, 0x3b	; 59
    185e:	0f 92       	push	r0
    1860:	11 24       	eor	r1, r1
    1862:	1f 93       	push	r17
    1864:	2f 93       	push	r18
    1866:	3f 93       	push	r19
    1868:	4f 93       	push	r20
    186a:	5f 93       	push	r21
    186c:	6f 93       	push	r22
    186e:	7f 93       	push	r23
    1870:	8f 93       	push	r24
    1872:	9f 93       	push	r25
    1874:	af 93       	push	r26
    1876:	bf 93       	push	r27
    1878:	ef 93       	push	r30
    187a:	ff 93       	push	r31
    187c:	80 91 5f 02 	lds	r24, 0x025F
    1880:	8f 5f       	subi	r24, 0xFF	; 255
    1882:	87 70       	andi	r24, 0x07	; 7
    1884:	80 93 5f 02 	sts	0x025F, r24
    1888:	40 e0       	ldi	r20, 0x00	; 0
    188a:	53 e0       	ldi	r21, 0x03	; 3
    188c:	21 c0       	rjmp	.+66     	; 0x18d0 <__vector_12+0x7c>
    188e:	90 e0       	ldi	r25, 0x00	; 0
    1890:	20 91 60 02 	lds	r18, 0x0260
    1894:	30 91 61 02 	lds	r19, 0x0261
    1898:	80 ff       	sbrs	r24, 0
    189a:	0b c0       	rjmp	.+22     	; 0x18b2 <__vector_12+0x5e>
    189c:	45 9f       	mul	r20, r21
    189e:	f0 01       	movw	r30, r0
    18a0:	11 24       	eor	r1, r1
    18a2:	e2 0f       	add	r30, r18
    18a4:	f3 1f       	adc	r31, r19
    18a6:	a0 81       	ld	r26, Z
    18a8:	b1 81       	ldd	r27, Z+1	; 0x01
    18aa:	2c 91       	ld	r18, X
    18ac:	32 81       	ldd	r19, Z+2	; 0x02
    18ae:	23 2b       	or	r18, r19
    18b0:	0b c0       	rjmp	.+22     	; 0x18c8 <__vector_12+0x74>
    18b2:	45 9f       	mul	r20, r21
    18b4:	f0 01       	movw	r30, r0
    18b6:	11 24       	eor	r1, r1
    18b8:	e2 0f       	add	r30, r18
    18ba:	f3 1f       	adc	r31, r19
    18bc:	a0 81       	ld	r26, Z
    18be:	b1 81       	ldd	r27, Z+1	; 0x01
    18c0:	3c 91       	ld	r19, X
    18c2:	22 81       	ldd	r18, Z+2	; 0x02
    18c4:	20 95       	com	r18
    18c6:	23 23       	and	r18, r19
    18c8:	2c 93       	st	X, r18
    18ca:	95 95       	asr	r25
    18cc:	87 95       	ror	r24
    18ce:	4f 5f       	subi	r20, 0xFF	; 255
    18d0:	90 91 5c 02 	lds	r25, 0x025C
    18d4:	49 17       	cp	r20, r25
    18d6:	d8 f2       	brcs	.-74     	; 0x188e <__vector_12+0x3a>
    18d8:	10 91 5f 02 	lds	r17, 0x025F
    18dc:	1f 5f       	subi	r17, 0xFF	; 255
    18de:	17 70       	andi	r17, 0x07	; 7
    18e0:	80 91 5d 02 	lds	r24, 0x025D
    18e4:	18 17       	cp	r17, r24
    18e6:	28 f0       	brcs	.+10     	; 0x18f2 <__vector_12+0x9e>
    18e8:	10 92 89 00 	sts	0x0089, r1
    18ec:	10 92 88 00 	sts	0x0088, r1
    18f0:	49 c0       	rjmp	.+146    	; 0x1984 <__vector_12+0x130>
    18f2:	21 2f       	mov	r18, r17
    18f4:	30 e0       	ldi	r19, 0x00	; 0
    18f6:	22 0f       	add	r18, r18
    18f8:	33 1f       	adc	r19, r19
    18fa:	e0 91 50 02 	lds	r30, 0x0250
    18fe:	f0 91 51 02 	lds	r31, 0x0251
    1902:	e2 0f       	add	r30, r18
    1904:	f3 1f       	adc	r31, r19
    1906:	40 81       	ld	r20, Z
    1908:	51 81       	ldd	r21, Z+1	; 0x01
    190a:	a0 91 58 02 	lds	r26, 0x0258
    190e:	b0 91 59 02 	lds	r27, 0x0259
    1912:	a2 0f       	add	r26, r18
    1914:	b3 1f       	adc	r27, r19
    1916:	6d 91       	ld	r22, X+
    1918:	7c 91       	ld	r23, X
    191a:	11 97       	sbiw	r26, 0x01	; 1
    191c:	61 15       	cp	r22, r1
    191e:	71 05       	cpc	r23, r1
    1920:	11 f1       	breq	.+68     	; 0x1966 <__vector_12+0x112>
    1922:	41 15       	cp	r20, r1
    1924:	51 05       	cpc	r21, r1
    1926:	f9 f0       	breq	.+62     	; 0x1966 <__vector_12+0x112>
    1928:	a0 91 54 02 	lds	r26, 0x0254
    192c:	b0 91 55 02 	lds	r27, 0x0255
    1930:	a2 0f       	add	r26, r18
    1932:	b3 1f       	adc	r27, r19
    1934:	8d 91       	ld	r24, X+
    1936:	9c 91       	ld	r25, X
    1938:	11 97       	sbiw	r26, 0x01	; 1
    193a:	00 97       	sbiw	r24, 0x00	; 0
    193c:	a1 f0       	breq	.+40     	; 0x1966 <__vector_12+0x112>
    193e:	48 17       	cp	r20, r24
    1940:	59 07       	cpc	r21, r25
    1942:	38 f4       	brcc	.+14     	; 0x1952 <__vector_12+0xfe>
    1944:	46 0f       	add	r20, r22
    1946:	57 1f       	adc	r21, r23
    1948:	48 17       	cp	r20, r24
    194a:	59 07       	cpc	r21, r25
    194c:	a8 f4       	brcc	.+42     	; 0x1978 <__vector_12+0x124>
    194e:	ca 01       	movw	r24, r20
    1950:	13 c0       	rjmp	.+38     	; 0x1978 <__vector_12+0x124>
    1952:	9c 01       	movw	r18, r24
    1954:	26 0f       	add	r18, r22
    1956:	37 1f       	adc	r19, r23
    1958:	42 17       	cp	r20, r18
    195a:	53 07       	cpc	r21, r19
    195c:	68 f0       	brcs	.+26     	; 0x1978 <__vector_12+0x124>
    195e:	ca 01       	movw	r24, r20
    1960:	86 1b       	sub	r24, r22
    1962:	97 0b       	sbc	r25, r23
    1964:	09 c0       	rjmp	.+18     	; 0x1978 <__vector_12+0x124>
    1966:	a0 91 54 02 	lds	r26, 0x0254
    196a:	b0 91 55 02 	lds	r27, 0x0255
    196e:	a2 0f       	add	r26, r18
    1970:	b3 1f       	adc	r27, r19
    1972:	8d 91       	ld	r24, X+
    1974:	9c 91       	ld	r25, X
    1976:	11 97       	sbiw	r26, 0x01	; 1
    1978:	90 93 89 00 	sts	0x0089, r25
    197c:	80 93 88 00 	sts	0x0088, r24
    1980:	91 83       	std	Z+1, r25	; 0x01
    1982:	80 83       	st	Z, r24
    1984:	80 91 5e 02 	lds	r24, 0x025E
    1988:	18 17       	cp	r17, r24
    198a:	28 f0       	brcs	.+10     	; 0x1996 <__vector_12+0x142>
    198c:	10 92 8b 00 	sts	0x008B, r1
    1990:	10 92 8a 00 	sts	0x008A, r1
    1994:	42 c0       	rjmp	.+132    	; 0x1a1a <__vector_12+0x1c6>
    1996:	81 2f       	mov	r24, r17
    1998:	90 e0       	ldi	r25, 0x00	; 0
    199a:	88 0f       	add	r24, r24
    199c:	99 1f       	adc	r25, r25
    199e:	e0 91 52 02 	lds	r30, 0x0252
    19a2:	f0 91 53 02 	lds	r31, 0x0253
    19a6:	e8 0f       	add	r30, r24
    19a8:	f9 1f       	adc	r31, r25
    19aa:	40 81       	ld	r20, Z
    19ac:	51 81       	ldd	r21, Z+1	; 0x01
    19ae:	a0 91 5a 02 	lds	r26, 0x025A
    19b2:	b0 91 5b 02 	lds	r27, 0x025B
    19b6:	a8 0f       	add	r26, r24
    19b8:	b9 1f       	adc	r27, r25
    19ba:	2d 91       	ld	r18, X+
    19bc:	3c 91       	ld	r19, X
    19be:	11 97       	sbiw	r26, 0x01	; 1
    19c0:	60 91 56 02 	lds	r22, 0x0256
    19c4:	70 91 57 02 	lds	r23, 0x0257
    19c8:	21 15       	cp	r18, r1
    19ca:	31 05       	cpc	r19, r1
    19cc:	d1 f0       	breq	.+52     	; 0x1a02 <__vector_12+0x1ae>
    19ce:	86 0f       	add	r24, r22
    19d0:	97 1f       	adc	r25, r23
    19d2:	dc 01       	movw	r26, r24
    19d4:	8d 91       	ld	r24, X+
    19d6:	9c 91       	ld	r25, X
    19d8:	11 97       	sbiw	r26, 0x01	; 1
    19da:	48 17       	cp	r20, r24
    19dc:	59 07       	cpc	r21, r25
    19de:	38 f4       	brcc	.+14     	; 0x19ee <__vector_12+0x19a>
    19e0:	24 0f       	add	r18, r20
    19e2:	35 1f       	adc	r19, r21
    19e4:	28 17       	cp	r18, r24
    19e6:	39 07       	cpc	r19, r25
    19e8:	90 f4       	brcc	.+36     	; 0x1a0e <__vector_12+0x1ba>
    19ea:	c9 01       	movw	r24, r18
    19ec:	10 c0       	rjmp	.+32     	; 0x1a0e <__vector_12+0x1ba>
    19ee:	bc 01       	movw	r22, r24
    19f0:	62 0f       	add	r22, r18
    19f2:	73 1f       	adc	r23, r19
    19f4:	46 17       	cp	r20, r22
    19f6:	57 07       	cpc	r21, r23
    19f8:	50 f0       	brcs	.+20     	; 0x1a0e <__vector_12+0x1ba>
    19fa:	ca 01       	movw	r24, r20
    19fc:	82 1b       	sub	r24, r18
    19fe:	93 0b       	sbc	r25, r19
    1a00:	06 c0       	rjmp	.+12     	; 0x1a0e <__vector_12+0x1ba>
    1a02:	86 0f       	add	r24, r22
    1a04:	97 1f       	adc	r25, r23
    1a06:	dc 01       	movw	r26, r24
    1a08:	8d 91       	ld	r24, X+
    1a0a:	9c 91       	ld	r25, X
    1a0c:	11 97       	sbiw	r26, 0x01	; 1
    1a0e:	90 93 8b 00 	sts	0x008B, r25
    1a12:	80 93 8a 00 	sts	0x008A, r24
    1a16:	91 83       	std	Z+1, r25	; 0x01
    1a18:	80 83       	st	Z, r24
    1a1a:	80 91 5f 02 	lds	r24, 0x025F
    1a1e:	90 91 5e 02 	lds	r25, 0x025E
    1a22:	89 17       	cp	r24, r25
    1a24:	88 f4       	brcc	.+34     	; 0x1a48 <__vector_12+0x1f4>
    1a26:	93 e0       	ldi	r25, 0x03	; 3
    1a28:	89 9f       	mul	r24, r25
    1a2a:	c0 01       	movw	r24, r0
    1a2c:	11 24       	eor	r1, r1
    1a2e:	e0 91 62 02 	lds	r30, 0x0262
    1a32:	f0 91 63 02 	lds	r31, 0x0263
    1a36:	e8 0f       	add	r30, r24
    1a38:	f9 1f       	adc	r31, r25
    1a3a:	a0 81       	ld	r26, Z
    1a3c:	b1 81       	ldd	r27, Z+1	; 0x01
    1a3e:	9c 91       	ld	r25, X
    1a40:	82 81       	ldd	r24, Z+2	; 0x02
    1a42:	80 95       	com	r24
    1a44:	89 23       	and	r24, r25
    1a46:	8c 93       	st	X, r24
    1a48:	ff 91       	pop	r31
    1a4a:	ef 91       	pop	r30
    1a4c:	bf 91       	pop	r27
    1a4e:	af 91       	pop	r26
    1a50:	9f 91       	pop	r25
    1a52:	8f 91       	pop	r24
    1a54:	7f 91       	pop	r23
    1a56:	6f 91       	pop	r22
    1a58:	5f 91       	pop	r21
    1a5a:	4f 91       	pop	r20
    1a5c:	3f 91       	pop	r19
    1a5e:	2f 91       	pop	r18
    1a60:	1f 91       	pop	r17
    1a62:	0f 90       	pop	r0
    1a64:	0b be       	out	0x3b, r0	; 59
    1a66:	0f 90       	pop	r0
    1a68:	0f be       	out	0x3f, r0	; 63
    1a6a:	0f 90       	pop	r0
    1a6c:	1f 90       	pop	r1
    1a6e:	18 95       	reti

00001a70 <__vector_14>:
    1a70:	1f 92       	push	r1
    1a72:	0f 92       	push	r0
    1a74:	0f b6       	in	r0, 0x3f	; 63
    1a76:	0f 92       	push	r0
    1a78:	0b b6       	in	r0, 0x3b	; 59
    1a7a:	0f 92       	push	r0
    1a7c:	11 24       	eor	r1, r1
    1a7e:	8f 93       	push	r24
    1a80:	9f 93       	push	r25
    1a82:	af 93       	push	r26
    1a84:	bf 93       	push	r27
    1a86:	ef 93       	push	r30
    1a88:	ff 93       	push	r31
    1a8a:	80 91 5f 02 	lds	r24, 0x025F
    1a8e:	90 91 5e 02 	lds	r25, 0x025E
    1a92:	89 17       	cp	r24, r25
    1a94:	80 f4       	brcc	.+32     	; 0x1ab6 <__vector_14+0x46>
    1a96:	93 e0       	ldi	r25, 0x03	; 3
    1a98:	89 9f       	mul	r24, r25
    1a9a:	c0 01       	movw	r24, r0
    1a9c:	11 24       	eor	r1, r1
    1a9e:	e0 91 62 02 	lds	r30, 0x0262
    1aa2:	f0 91 63 02 	lds	r31, 0x0263
    1aa6:	e8 0f       	add	r30, r24
    1aa8:	f9 1f       	adc	r31, r25
    1aaa:	a0 81       	ld	r26, Z
    1aac:	b1 81       	ldd	r27, Z+1	; 0x01
    1aae:	8c 91       	ld	r24, X
    1ab0:	92 81       	ldd	r25, Z+2	; 0x02
    1ab2:	89 27       	eor	r24, r25
    1ab4:	8c 93       	st	X, r24
    1ab6:	ff 91       	pop	r31
    1ab8:	ef 91       	pop	r30
    1aba:	bf 91       	pop	r27
    1abc:	af 91       	pop	r26
    1abe:	9f 91       	pop	r25
    1ac0:	8f 91       	pop	r24
    1ac2:	0f 90       	pop	r0
    1ac4:	0b be       	out	0x3b, r0	; 59
    1ac6:	0f 90       	pop	r0
    1ac8:	0f be       	out	0x3f, r0	; 63
    1aca:	0f 90       	pop	r0
    1acc:	1f 90       	pop	r1
    1ace:	18 95       	reti

00001ad0 <_Z15freeServoMemoryv>:
    1ad0:	80 91 60 02 	lds	r24, 0x0260
    1ad4:	90 91 61 02 	lds	r25, 0x0261
    1ad8:	00 97       	sbiw	r24, 0x00	; 0
    1ada:	31 f0       	breq	.+12     	; 0x1ae8 <_Z15freeServoMemoryv+0x18>
    1adc:	0e 94 91 14 	call	0x2922	; 0x2922 <free>
    1ae0:	10 92 61 02 	sts	0x0261, r1
    1ae4:	10 92 60 02 	sts	0x0260, r1
    1ae8:	80 91 50 02 	lds	r24, 0x0250
    1aec:	90 91 51 02 	lds	r25, 0x0251
    1af0:	00 97       	sbiw	r24, 0x00	; 0
    1af2:	31 f0       	breq	.+12     	; 0x1b00 <_Z15freeServoMemoryv+0x30>
    1af4:	0e 94 91 14 	call	0x2922	; 0x2922 <free>
    1af8:	10 92 51 02 	sts	0x0251, r1
    1afc:	10 92 50 02 	sts	0x0250, r1
    1b00:	80 91 54 02 	lds	r24, 0x0254
    1b04:	90 91 55 02 	lds	r25, 0x0255
    1b08:	00 97       	sbiw	r24, 0x00	; 0
    1b0a:	31 f0       	breq	.+12     	; 0x1b18 <_Z15freeServoMemoryv+0x48>
    1b0c:	0e 94 91 14 	call	0x2922	; 0x2922 <free>
    1b10:	10 92 55 02 	sts	0x0255, r1
    1b14:	10 92 54 02 	sts	0x0254, r1
    1b18:	80 91 58 02 	lds	r24, 0x0258
    1b1c:	90 91 59 02 	lds	r25, 0x0259
    1b20:	00 97       	sbiw	r24, 0x00	; 0
    1b22:	31 f0       	breq	.+12     	; 0x1b30 <_Z15freeServoMemoryv+0x60>
    1b24:	0e 94 91 14 	call	0x2922	; 0x2922 <free>
    1b28:	10 92 59 02 	sts	0x0259, r1
    1b2c:	10 92 58 02 	sts	0x0258, r1
    1b30:	80 91 62 02 	lds	r24, 0x0262
    1b34:	90 91 63 02 	lds	r25, 0x0263
    1b38:	00 97       	sbiw	r24, 0x00	; 0
    1b3a:	31 f0       	breq	.+12     	; 0x1b48 <_Z15freeServoMemoryv+0x78>
    1b3c:	0e 94 91 14 	call	0x2922	; 0x2922 <free>
    1b40:	10 92 63 02 	sts	0x0263, r1
    1b44:	10 92 62 02 	sts	0x0262, r1
    1b48:	80 91 52 02 	lds	r24, 0x0252
    1b4c:	90 91 53 02 	lds	r25, 0x0253
    1b50:	00 97       	sbiw	r24, 0x00	; 0
    1b52:	31 f0       	breq	.+12     	; 0x1b60 <_Z15freeServoMemoryv+0x90>
    1b54:	0e 94 91 14 	call	0x2922	; 0x2922 <free>
    1b58:	10 92 53 02 	sts	0x0253, r1
    1b5c:	10 92 52 02 	sts	0x0252, r1
    1b60:	80 91 56 02 	lds	r24, 0x0256
    1b64:	90 91 57 02 	lds	r25, 0x0257
    1b68:	00 97       	sbiw	r24, 0x00	; 0
    1b6a:	31 f0       	breq	.+12     	; 0x1b78 <_Z15freeServoMemoryv+0xa8>
    1b6c:	0e 94 91 14 	call	0x2922	; 0x2922 <free>
    1b70:	10 92 57 02 	sts	0x0257, r1
    1b74:	10 92 56 02 	sts	0x0256, r1
    1b78:	80 91 5a 02 	lds	r24, 0x025A
    1b7c:	90 91 5b 02 	lds	r25, 0x025B
    1b80:	00 97       	sbiw	r24, 0x00	; 0
    1b82:	31 f0       	breq	.+12     	; 0x1b90 <_Z15freeServoMemoryv+0xc0>
    1b84:	0e 94 91 14 	call	0x2922	; 0x2922 <free>
    1b88:	10 92 5b 02 	sts	0x025B, r1
    1b8c:	10 92 5a 02 	sts	0x025A, r1
    1b90:	08 95       	ret

00001b92 <_ZN15OrangutanServos5startEPKhhS1_h>:
    1b92:	a1 e0       	ldi	r26, 0x01	; 1
    1b94:	b0 e0       	ldi	r27, 0x00	; 0
    1b96:	ef ec       	ldi	r30, 0xCF	; 207
    1b98:	fd e0       	ldi	r31, 0x0D	; 13
    1b9a:	0c 94 c6 13 	jmp	0x278c	; 0x278c <__prologue_saves__+0x4>
    1b9e:	98 2e       	mov	r9, r24
    1ba0:	79 2e       	mov	r7, r25
    1ba2:	84 2e       	mov	r8, r20
    1ba4:	65 2e       	mov	r6, r21
    1ba6:	10 92 6f 00 	sts	0x006F, r1
    1baa:	10 92 6f 02 	sts	0x026F, r1
    1bae:	81 e0       	ldi	r24, 0x01	; 1
    1bb0:	80 93 03 02 	sts	0x0203, r24
    1bb4:	10 92 71 02 	sts	0x0271, r1
    1bb8:	10 92 70 02 	sts	0x0270, r1
    1bbc:	10 92 81 00 	sts	0x0081, r1
    1bc0:	c6 2e       	mov	r12, r22
    1bc2:	64 30       	cpi	r22, 0x04	; 4
    1bc4:	10 f0       	brcs	.+4      	; 0x1bca <_ZN15OrangutanServos5startEPKhhS1_h+0x38>
    1bc6:	13 e0       	ldi	r17, 0x03	; 3
    1bc8:	c1 2e       	mov	r12, r17
    1bca:	c0 92 5c 02 	sts	0x025C, r12
    1bce:	81 e0       	ldi	r24, 0x01	; 1
    1bd0:	90 e0       	ldi	r25, 0x00	; 0
    1bd2:	0c 2c       	mov	r0, r12
    1bd4:	02 c0       	rjmp	.+4      	; 0x1bda <_ZN15OrangutanServos5startEPKhhS1_h+0x48>
    1bd6:	88 0f       	add	r24, r24
    1bd8:	99 1f       	adc	r25, r25
    1bda:	0a 94       	dec	r0
    1bdc:	e2 f7       	brpl	.-8      	; 0x1bd6 <_ZN15OrangutanServos5startEPKhhS1_h+0x44>
    1bde:	80 93 5d 02 	sts	0x025D, r24
    1be2:	5d 98       	cbi	0x0b, 5	; 11
    1be4:	55 9a       	sbi	0x0a, 5	; 10
    1be6:	82 e8       	ldi	r24, 0x82	; 130
    1be8:	80 93 80 00 	sts	0x0080, r24
    1bec:	d2 2e       	mov	r13, r18
    1bee:	29 30       	cpi	r18, 0x09	; 9
    1bf0:	10 f0       	brcs	.+4      	; 0x1bf6 <_ZN15OrangutanServos5startEPKhhS1_h+0x64>
    1bf2:	b8 e0       	ldi	r27, 0x08	; 8
    1bf4:	db 2e       	mov	r13, r27
    1bf6:	d0 92 5e 02 	sts	0x025E, r13
    1bfa:	0e 94 68 0d 	call	0x1ad0	; 0x1ad0 <_Z15freeServoMemoryv>
    1bfe:	43 e0       	ldi	r20, 0x03	; 3
    1c00:	2c 2d       	mov	r18, r12
    1c02:	24 9f       	mul	r18, r20
    1c04:	c0 01       	movw	r24, r0
    1c06:	11 24       	eor	r1, r1
    1c08:	49 83       	std	Y+1, r20	; 0x01
    1c0a:	0e 94 fb 13 	call	0x27f6	; 0x27f6 <malloc>
    1c0e:	8c 01       	movw	r16, r24
    1c10:	90 93 61 02 	sts	0x0261, r25
    1c14:	80 93 60 02 	sts	0x0260, r24
    1c18:	80 91 5d 02 	lds	r24, 0x025D
    1c1c:	48 2e       	mov	r4, r24
    1c1e:	55 24       	eor	r5, r5
    1c20:	44 0c       	add	r4, r4
    1c22:	55 1c       	adc	r5, r5
    1c24:	c2 01       	movw	r24, r4
    1c26:	0e 94 fb 13 	call	0x27f6	; 0x27f6 <malloc>
    1c2a:	7c 01       	movw	r14, r24
    1c2c:	90 93 51 02 	sts	0x0251, r25
    1c30:	80 93 50 02 	sts	0x0250, r24
    1c34:	c2 01       	movw	r24, r4
    1c36:	0e 94 fb 13 	call	0x27f6	; 0x27f6 <malloc>
    1c3a:	5c 01       	movw	r10, r24
    1c3c:	90 93 55 02 	sts	0x0255, r25
    1c40:	80 93 54 02 	sts	0x0254, r24
    1c44:	c2 01       	movw	r24, r4
    1c46:	0e 94 fb 13 	call	0x27f6	; 0x27f6 <malloc>
    1c4a:	90 93 59 02 	sts	0x0259, r25
    1c4e:	80 93 58 02 	sts	0x0258, r24
    1c52:	49 81       	ldd	r20, Y+1	; 0x01
    1c54:	01 15       	cp	r16, r1
    1c56:	11 05       	cpc	r17, r1
    1c58:	09 f4       	brne	.+2      	; 0x1c5c <_ZN15OrangutanServos5startEPKhhS1_h+0xca>
    1c5a:	43 c0       	rjmp	.+134    	; 0x1ce2 <_ZN15OrangutanServos5startEPKhhS1_h+0x150>
    1c5c:	e1 14       	cp	r14, r1
    1c5e:	f1 04       	cpc	r15, r1
    1c60:	09 f4       	brne	.+2      	; 0x1c64 <_ZN15OrangutanServos5startEPKhhS1_h+0xd2>
    1c62:	3f c0       	rjmp	.+126    	; 0x1ce2 <_ZN15OrangutanServos5startEPKhhS1_h+0x150>
    1c64:	a1 14       	cp	r10, r1
    1c66:	b1 04       	cpc	r11, r1
    1c68:	e1 f1       	breq	.+120    	; 0x1ce2 <_ZN15OrangutanServos5startEPKhhS1_h+0x150>
    1c6a:	00 97       	sbiw	r24, 0x00	; 0
    1c6c:	d1 f1       	breq	.+116    	; 0x1ce2 <_ZN15OrangutanServos5startEPKhhS1_h+0x150>
    1c6e:	dd 20       	and	r13, r13
    1c70:	29 f4       	brne	.+10     	; 0x1c7c <_ZN15OrangutanServos5startEPKhhS1_h+0xea>
    1c72:	09 2d       	mov	r16, r9
    1c74:	17 2d       	mov	r17, r7
    1c76:	ee 24       	eor	r14, r14
    1c78:	ff 24       	eor	r15, r15
    1c7a:	46 c0       	rjmp	.+140    	; 0x1d08 <_ZN15OrangutanServos5startEPKhhS1_h+0x176>
    1c7c:	ed 2d       	mov	r30, r13
    1c7e:	e4 9f       	mul	r30, r20
    1c80:	c0 01       	movw	r24, r0
    1c82:	11 24       	eor	r1, r1
    1c84:	0e 94 fb 13 	call	0x27f6	; 0x27f6 <malloc>
    1c88:	8c 01       	movw	r16, r24
    1c8a:	90 93 63 02 	sts	0x0263, r25
    1c8e:	80 93 62 02 	sts	0x0262, r24
    1c92:	80 91 5e 02 	lds	r24, 0x025E
    1c96:	48 2e       	mov	r4, r24
    1c98:	55 24       	eor	r5, r5
    1c9a:	44 0c       	add	r4, r4
    1c9c:	55 1c       	adc	r5, r5
    1c9e:	c2 01       	movw	r24, r4
    1ca0:	0e 94 fb 13 	call	0x27f6	; 0x27f6 <malloc>
    1ca4:	7c 01       	movw	r14, r24
    1ca6:	90 93 53 02 	sts	0x0253, r25
    1caa:	80 93 52 02 	sts	0x0252, r24
    1cae:	c2 01       	movw	r24, r4
    1cb0:	0e 94 fb 13 	call	0x27f6	; 0x27f6 <malloc>
    1cb4:	5c 01       	movw	r10, r24
    1cb6:	90 93 57 02 	sts	0x0257, r25
    1cba:	80 93 56 02 	sts	0x0256, r24
    1cbe:	c2 01       	movw	r24, r4
    1cc0:	0e 94 fb 13 	call	0x27f6	; 0x27f6 <malloc>
    1cc4:	90 93 5b 02 	sts	0x025B, r25
    1cc8:	80 93 5a 02 	sts	0x025A, r24
    1ccc:	01 15       	cp	r16, r1
    1cce:	11 05       	cpc	r17, r1
    1cd0:	41 f0       	breq	.+16     	; 0x1ce2 <_ZN15OrangutanServos5startEPKhhS1_h+0x150>
    1cd2:	e1 14       	cp	r14, r1
    1cd4:	f1 04       	cpc	r15, r1
    1cd6:	29 f0       	breq	.+10     	; 0x1ce2 <_ZN15OrangutanServos5startEPKhhS1_h+0x150>
    1cd8:	a1 14       	cp	r10, r1
    1cda:	b1 04       	cpc	r11, r1
    1cdc:	11 f0       	breq	.+4      	; 0x1ce2 <_ZN15OrangutanServos5startEPKhhS1_h+0x150>
    1cde:	00 97       	sbiw	r24, 0x00	; 0
    1ce0:	41 f6       	brne	.-112    	; 0x1c72 <_ZN15OrangutanServos5startEPKhhS1_h+0xe0>
    1ce2:	0e 94 68 0d 	call	0x1ad0	; 0x1ad0 <_Z15freeServoMemoryv>
    1ce6:	81 e0       	ldi	r24, 0x01	; 1
    1ce8:	88 c0       	rjmp	.+272    	; 0x1dfa <_ZN15OrangutanServos5startEPKhhS1_h+0x268>
    1cea:	f8 01       	movw	r30, r16
    1cec:	61 91       	ld	r22, Z+
    1cee:	8f 01       	movw	r16, r30
    1cf0:	80 91 60 02 	lds	r24, 0x0260
    1cf4:	90 91 61 02 	lds	r25, 0x0261
    1cf8:	8e 0d       	add	r24, r14
    1cfa:	9f 1d       	adc	r25, r15
    1cfc:	0e 94 0a 0c 	call	0x1814	; 0x1814 <_ZN15OrangutanServos11initPortPinEP10PortStructh>
    1d00:	83 e0       	ldi	r24, 0x03	; 3
    1d02:	90 e0       	ldi	r25, 0x00	; 0
    1d04:	e8 0e       	add	r14, r24
    1d06:	f9 1e       	adc	r15, r25
    1d08:	80 2f       	mov	r24, r16
    1d0a:	89 19       	sub	r24, r9
    1d0c:	8c 15       	cp	r24, r12
    1d0e:	68 f3       	brcs	.-38     	; 0x1cea <_ZN15OrangutanServos5startEPKhhS1_h+0x158>
    1d10:	60 91 50 02 	lds	r22, 0x0250
    1d14:	70 91 51 02 	lds	r23, 0x0251
    1d18:	40 91 54 02 	lds	r20, 0x0254
    1d1c:	50 91 55 02 	lds	r21, 0x0255
    1d20:	20 91 58 02 	lds	r18, 0x0258
    1d24:	30 91 59 02 	lds	r19, 0x0259
    1d28:	a0 e0       	ldi	r26, 0x00	; 0
    1d2a:	14 c0       	rjmp	.+40     	; 0x1d54 <_ZN15OrangutanServos5startEPKhhS1_h+0x1c2>
    1d2c:	8a 2f       	mov	r24, r26
    1d2e:	90 e0       	ldi	r25, 0x00	; 0
    1d30:	88 0f       	add	r24, r24
    1d32:	99 1f       	adc	r25, r25
    1d34:	fb 01       	movw	r30, r22
    1d36:	e8 0f       	add	r30, r24
    1d38:	f9 1f       	adc	r31, r25
    1d3a:	11 82       	std	Z+1, r1	; 0x01
    1d3c:	10 82       	st	Z, r1
    1d3e:	fa 01       	movw	r30, r20
    1d40:	e8 0f       	add	r30, r24
    1d42:	f9 1f       	adc	r31, r25
    1d44:	11 82       	std	Z+1, r1	; 0x01
    1d46:	10 82       	st	Z, r1
    1d48:	82 0f       	add	r24, r18
    1d4a:	93 1f       	adc	r25, r19
    1d4c:	fc 01       	movw	r30, r24
    1d4e:	11 82       	std	Z+1, r1	; 0x01
    1d50:	10 82       	st	Z, r1
    1d52:	af 5f       	subi	r26, 0xFF	; 255
    1d54:	80 91 5d 02 	lds	r24, 0x025D
    1d58:	a8 17       	cp	r26, r24
    1d5a:	40 f3       	brcs	.-48     	; 0x1d2c <_ZN15OrangutanServos5startEPKhhS1_h+0x19a>
    1d5c:	e8 2c       	mov	r14, r8
    1d5e:	f6 2c       	mov	r15, r6
    1d60:	aa 24       	eor	r10, r10
    1d62:	bb 24       	eor	r11, r11
    1d64:	00 e0       	ldi	r16, 0x00	; 0
    1d66:	10 e0       	ldi	r17, 0x00	; 0
    1d68:	29 c0       	rjmp	.+82     	; 0x1dbc <_ZN15OrangutanServos5startEPKhhS1_h+0x22a>
    1d6a:	f7 01       	movw	r30, r14
    1d6c:	61 91       	ld	r22, Z+
    1d6e:	7f 01       	movw	r14, r30
    1d70:	80 91 62 02 	lds	r24, 0x0262
    1d74:	90 91 63 02 	lds	r25, 0x0263
    1d78:	80 0f       	add	r24, r16
    1d7a:	91 1f       	adc	r25, r17
    1d7c:	0e 94 0a 0c 	call	0x1814	; 0x1814 <_ZN15OrangutanServos11initPortPinEP10PortStructh>
    1d80:	e0 91 52 02 	lds	r30, 0x0252
    1d84:	f0 91 53 02 	lds	r31, 0x0253
    1d88:	ea 0d       	add	r30, r10
    1d8a:	fb 1d       	adc	r31, r11
    1d8c:	11 82       	std	Z+1, r1	; 0x01
    1d8e:	10 82       	st	Z, r1
    1d90:	e0 91 56 02 	lds	r30, 0x0256
    1d94:	f0 91 57 02 	lds	r31, 0x0257
    1d98:	ea 0d       	add	r30, r10
    1d9a:	fb 1d       	adc	r31, r11
    1d9c:	11 82       	std	Z+1, r1	; 0x01
    1d9e:	10 82       	st	Z, r1
    1da0:	e0 91 5a 02 	lds	r30, 0x025A
    1da4:	f0 91 5b 02 	lds	r31, 0x025B
    1da8:	ea 0d       	add	r30, r10
    1daa:	fb 1d       	adc	r31, r11
    1dac:	11 82       	std	Z+1, r1	; 0x01
    1dae:	10 82       	st	Z, r1
    1db0:	0d 5f       	subi	r16, 0xFD	; 253
    1db2:	1f 4f       	sbci	r17, 0xFF	; 255
    1db4:	82 e0       	ldi	r24, 0x02	; 2
    1db6:	90 e0       	ldi	r25, 0x00	; 0
    1db8:	a8 0e       	add	r10, r24
    1dba:	b9 1e       	adc	r11, r25
    1dbc:	8e 2d       	mov	r24, r14
    1dbe:	88 19       	sub	r24, r8
    1dc0:	8d 15       	cp	r24, r13
    1dc2:	98 f2       	brcs	.-90     	; 0x1d6a <_ZN15OrangutanServos5startEPKhhS1_h+0x1d8>
    1dc4:	10 92 5f 02 	sts	0x025F, r1
    1dc8:	81 e1       	ldi	r24, 0x11	; 17
    1dca:	80 93 81 00 	sts	0x0081, r24
    1dce:	88 ea       	ldi	r24, 0xA8	; 168
    1dd0:	91 e6       	ldi	r25, 0x61	; 97
    1dd2:	90 93 87 00 	sts	0x0087, r25
    1dd6:	80 93 86 00 	sts	0x0086, r24
    1dda:	8f ef       	ldi	r24, 0xFF	; 255
    1ddc:	86 bb       	out	0x16, r24	; 22
    1dde:	80 91 6f 00 	lds	r24, 0x006F
    1de2:	80 62       	ori	r24, 0x20	; 32
    1de4:	80 93 6f 00 	sts	0x006F, r24
    1de8:	dd 20       	and	r13, r13
    1dea:	29 f0       	breq	.+10     	; 0x1df6 <_ZN15OrangutanServos5startEPKhhS1_h+0x264>
    1dec:	80 91 6f 00 	lds	r24, 0x006F
    1df0:	84 60       	ori	r24, 0x04	; 4
    1df2:	80 93 6f 00 	sts	0x006F, r24
    1df6:	78 94       	sei
    1df8:	80 e0       	ldi	r24, 0x00	; 0
    1dfa:	21 96       	adiw	r28, 0x01	; 1
    1dfc:	e0 e1       	ldi	r30, 0x10	; 16
    1dfe:	0c 94 e2 13 	jmp	0x27c4	; 0x27c4 <__epilogue_restores__+0x4>

00001e02 <servos_start>:
    1e02:	40 e0       	ldi	r20, 0x00	; 0
    1e04:	50 e0       	ldi	r21, 0x00	; 0
    1e06:	20 e0       	ldi	r18, 0x00	; 0
    1e08:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <_ZN15OrangutanServos5startEPKhhS1_h>
    1e0c:	08 95       	ret

00001e0e <_ZN15OrangutanServos14setServoTargetEhj>:
    1e0e:	90 91 5d 02 	lds	r25, 0x025D
    1e12:	89 17       	cp	r24, r25
    1e14:	48 f5       	brcc	.+82     	; 0x1e68 <_ZN15OrangutanServos14setServoTargetEhj+0x5a>
    1e16:	90 91 6f 00 	lds	r25, 0x006F
    1e1a:	9f 7d       	andi	r25, 0xDF	; 223
    1e1c:	90 93 6f 00 	sts	0x006F, r25
    1e20:	90 e0       	ldi	r25, 0x00	; 0
    1e22:	87 70       	andi	r24, 0x07	; 7
    1e24:	90 70       	andi	r25, 0x00	; 0
    1e26:	88 0f       	add	r24, r24
    1e28:	99 1f       	adc	r25, r25
    1e2a:	e0 91 54 02 	lds	r30, 0x0254
    1e2e:	f0 91 55 02 	lds	r31, 0x0255
    1e32:	e8 0f       	add	r30, r24
    1e34:	f9 1f       	adc	r31, r25
    1e36:	86 2f       	mov	r24, r22
    1e38:	97 2f       	mov	r25, r23
    1e3a:	29 e0       	ldi	r18, 0x09	; 9
    1e3c:	83 39       	cpi	r24, 0x93	; 147
    1e3e:	92 07       	cpc	r25, r18
    1e40:	10 f0       	brcs	.+4      	; 0x1e46 <_ZN15OrangutanServos14setServoTargetEhj+0x38>
    1e42:	82 e9       	ldi	r24, 0x92	; 146
    1e44:	99 e0       	ldi	r25, 0x09	; 9
    1e46:	9c 01       	movw	r18, r24
    1e48:	22 0f       	add	r18, r18
    1e4a:	33 1f       	adc	r19, r19
    1e4c:	43 e0       	ldi	r20, 0x03	; 3
    1e4e:	88 0f       	add	r24, r24
    1e50:	99 1f       	adc	r25, r25
    1e52:	4a 95       	dec	r20
    1e54:	e1 f7       	brne	.-8      	; 0x1e4e <_ZN15OrangutanServos14setServoTargetEhj+0x40>
    1e56:	28 0f       	add	r18, r24
    1e58:	39 1f       	adc	r19, r25
    1e5a:	31 83       	std	Z+1, r19	; 0x01
    1e5c:	20 83       	st	Z, r18
    1e5e:	80 91 6f 00 	lds	r24, 0x006F
    1e62:	80 62       	ori	r24, 0x20	; 32
    1e64:	80 93 6f 00 	sts	0x006F, r24
    1e68:	08 95       	ret

00001e6a <set_servo_target>:
    1e6a:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <_ZN15OrangutanServos14setServoTargetEhj>
    1e6e:	08 95       	ret

00001e70 <_ZN15OrangutanServos13setServoSpeedEhj>:
    1e70:	90 91 5d 02 	lds	r25, 0x025D
    1e74:	89 17       	cp	r24, r25
    1e76:	f8 f4       	brcc	.+62     	; 0x1eb6 <_ZN15OrangutanServos13setServoSpeedEhj+0x46>
    1e78:	90 91 6f 00 	lds	r25, 0x006F
    1e7c:	9f 7d       	andi	r25, 0xDF	; 223
    1e7e:	90 93 6f 00 	sts	0x006F, r25
    1e82:	90 e0       	ldi	r25, 0x00	; 0
    1e84:	87 70       	andi	r24, 0x07	; 7
    1e86:	90 70       	andi	r25, 0x00	; 0
    1e88:	88 0f       	add	r24, r24
    1e8a:	99 1f       	adc	r25, r25
    1e8c:	e0 91 58 02 	lds	r30, 0x0258
    1e90:	f0 91 59 02 	lds	r31, 0x0259
    1e94:	e8 0f       	add	r30, r24
    1e96:	f9 1f       	adc	r31, r25
    1e98:	86 2f       	mov	r24, r22
    1e9a:	97 2f       	mov	r25, r23
    1e9c:	21 e6       	ldi	r18, 0x61	; 97
    1e9e:	89 3a       	cpi	r24, 0xA9	; 169
    1ea0:	92 07       	cpc	r25, r18
    1ea2:	10 f0       	brcs	.+4      	; 0x1ea8 <_ZN15OrangutanServos13setServoSpeedEhj+0x38>
    1ea4:	88 ea       	ldi	r24, 0xA8	; 168
    1ea6:	91 e6       	ldi	r25, 0x61	; 97
    1ea8:	91 83       	std	Z+1, r25	; 0x01
    1eaa:	80 83       	st	Z, r24
    1eac:	80 91 6f 00 	lds	r24, 0x006F
    1eb0:	80 62       	ori	r24, 0x20	; 32
    1eb2:	80 93 6f 00 	sts	0x006F, r24
    1eb6:	08 95       	ret

00001eb8 <set_servo_speed>:
    1eb8:	0e 94 38 0f 	call	0x1e70	; 0x1e70 <_ZN15OrangutanServos13setServoSpeedEhj>
    1ebc:	08 95       	ret

00001ebe <_ZN13OrangutanTime17delayMicrosecondsEj>:
    1ebe:	6f 93       	push	r22
    1ec0:	64 e0       	ldi	r22, 0x04	; 4
    1ec2:	6a 95       	dec	r22
    1ec4:	f1 f7       	brne	.-4      	; 0x1ec2 <_ZN13OrangutanTime17delayMicrosecondsEj+0x4>
    1ec6:	6f 91       	pop	r22
    1ec8:	01 97       	sbiw	r24, 0x01	; 1
    1eca:	c9 f7       	brne	.-14     	; 0x1ebe <_ZN13OrangutanTime17delayMicrosecondsEj>
    1ecc:	08 95       	ret

00001ece <__vector_11>:
    1ece:	2f 92       	push	r2
    1ed0:	8f 93       	push	r24
    1ed2:	9f 93       	push	r25
    1ed4:	2f b6       	in	r2, 0x3f	; 63
    1ed6:	80 91 65 02 	lds	r24, 0x0265
    1eda:	90 91 66 02 	lds	r25, 0x0266
    1ede:	01 96       	adiw	r24, 0x01	; 1
    1ee0:	80 93 65 02 	sts	0x0265, r24
    1ee4:	90 93 66 02 	sts	0x0266, r25
    1ee8:	90 e0       	ldi	r25, 0x00	; 0
    1eea:	80 91 67 02 	lds	r24, 0x0267
    1eee:	89 1f       	adc	r24, r25
    1ef0:	80 93 67 02 	sts	0x0267, r24
    1ef4:	90 91 6d 02 	lds	r25, 0x026D
    1ef8:	9c 5f       	subi	r25, 0xFC	; 252
    1efa:	90 93 6d 02 	sts	0x026D, r25
    1efe:	80 91 6c 02 	lds	r24, 0x026C
    1f02:	80 51       	subi	r24, 0x10	; 16
    1f04:	97 42       	sbci	r25, 0x27	; 39
    1f06:	c0 f0       	brcs	.+48     	; 0x1f38 <end>
    1f08:	90 93 6d 02 	sts	0x026D, r25
    1f0c:	80 93 6c 02 	sts	0x026C, r24
    1f10:	80 91 68 02 	lds	r24, 0x0268
    1f14:	90 91 69 02 	lds	r25, 0x0269
    1f18:	01 96       	adiw	r24, 0x01	; 1
    1f1a:	80 93 68 02 	sts	0x0268, r24
    1f1e:	90 93 69 02 	sts	0x0269, r25
    1f22:	90 e0       	ldi	r25, 0x00	; 0
    1f24:	80 91 6a 02 	lds	r24, 0x026A
    1f28:	89 1f       	adc	r24, r25
    1f2a:	80 93 6a 02 	sts	0x026A, r24
    1f2e:	80 91 6b 02 	lds	r24, 0x026B
    1f32:	89 1f       	adc	r24, r25
    1f34:	80 93 6b 02 	sts	0x026B, r24

00001f38 <end>:
    1f38:	2f be       	out	0x3f, r2	; 63
    1f3a:	9f 91       	pop	r25
    1f3c:	8f 91       	pop	r24
    1f3e:	2f 90       	pop	r2
    1f40:	18 95       	reti

00001f42 <_ZN13OrangutanTime17delayMillisecondsEj>:
    1f42:	cf 93       	push	r28
    1f44:	df 93       	push	r29
    1f46:	ec 01       	movw	r28, r24
    1f48:	05 c0       	rjmp	.+10     	; 0x1f54 <_ZN13OrangutanTime17delayMillisecondsEj+0x12>
    1f4a:	88 ee       	ldi	r24, 0xE8	; 232
    1f4c:	93 e0       	ldi	r25, 0x03	; 3
    1f4e:	0e 94 5f 0f 	call	0x1ebe	; 0x1ebe <_ZN13OrangutanTime17delayMicrosecondsEj>
    1f52:	21 97       	sbiw	r28, 0x01	; 1
    1f54:	20 97       	sbiw	r28, 0x00	; 0
    1f56:	c9 f7       	brne	.-14     	; 0x1f4a <_ZN13OrangutanTime17delayMillisecondsEj+0x8>
    1f58:	df 91       	pop	r29
    1f5a:	cf 91       	pop	r28
    1f5c:	08 95       	ret

00001f5e <delay_ms>:
    1f5e:	0e 94 a1 0f 	call	0x1f42	; 0x1f42 <_ZN13OrangutanTime17delayMillisecondsEj>
    1f62:	08 95       	ret

00001f64 <_ZN12OrangutanSVP11getNextByteEv>:
    1f64:	8f ef       	ldi	r24, 0xFF	; 255
    1f66:	64 e0       	ldi	r22, 0x04	; 4
    1f68:	0e 94 23 13 	call	0x2646	; 0x2646 <_ZN18OrangutanSPIMaster16transmitAndDelayEhh>
    1f6c:	08 95       	ret

00001f6e <_ZN12OrangutanSVP15serialReadStartEv>:
    1f6e:	83 e8       	ldi	r24, 0x83	; 131
    1f70:	67 e0       	ldi	r22, 0x07	; 7
    1f72:	0e 94 23 13 	call	0x2646	; 0x2646 <_ZN18OrangutanSPIMaster16transmitAndDelayEhh>
    1f76:	0e 94 b2 0f 	call	0x1f64	; 0x1f64 <_ZN12OrangutanSVP11getNextByteEv>
    1f7a:	08 95       	ret

00001f7c <_ZN12OrangutanSVP17serialSendIfReadyEc>:
    1f7c:	1f 93       	push	r17
    1f7e:	18 2f       	mov	r17, r24
    1f80:	98 2f       	mov	r25, r24
    1f82:	90 95       	com	r25
    1f84:	99 1f       	adc	r25, r25
    1f86:	99 27       	eor	r25, r25
    1f88:	99 1f       	adc	r25, r25
    1f8a:	85 e8       	ldi	r24, 0x85	; 133
    1f8c:	89 1b       	sub	r24, r25
    1f8e:	65 e0       	ldi	r22, 0x05	; 5
    1f90:	0e 94 23 13 	call	0x2646	; 0x2646 <_ZN18OrangutanSPIMaster16transmitAndDelayEhh>
    1f94:	81 2f       	mov	r24, r17
    1f96:	8f 77       	andi	r24, 0x7F	; 127
    1f98:	65 e0       	ldi	r22, 0x05	; 5
    1f9a:	0e 94 23 13 	call	0x2646	; 0x2646 <_ZN18OrangutanSPIMaster16transmitAndDelayEhh>
    1f9e:	1f 91       	pop	r17
    1fa0:	08 95       	ret

00001fa2 <_ZL16currentCharacterv>:
    1fa2:	90 91 74 02 	lds	r25, 0x0274
    1fa6:	e0 91 70 02 	lds	r30, 0x0270
    1faa:	f0 91 71 02 	lds	r31, 0x0271
    1fae:	99 23       	and	r25, r25
    1fb0:	11 f0       	breq	.+4      	; 0x1fb6 <_ZL16currentCharacterv+0x14>
    1fb2:	84 91       	lpm	r24, Z
    1fb4:	01 c0       	rjmp	.+2      	; 0x1fb8 <_ZL16currentCharacterv+0x16>
    1fb6:	80 81       	ld	r24, Z
    1fb8:	28 2f       	mov	r18, r24
    1fba:	21 54       	subi	r18, 0x41	; 65
    1fbc:	2a 31       	cpi	r18, 0x1A	; 26
    1fbe:	10 f4       	brcc	.+4      	; 0x1fc4 <_ZL16currentCharacterv+0x22>
    1fc0:	80 5e       	subi	r24, 0xE0	; 224
    1fc2:	08 95       	ret
    1fc4:	80 32       	cpi	r24, 0x20	; 32
    1fc6:	71 f4       	brne	.+28     	; 0x1fe4 <_ZL16currentCharacterv+0x42>
    1fc8:	20 91 70 02 	lds	r18, 0x0270
    1fcc:	30 91 71 02 	lds	r19, 0x0271
    1fd0:	a9 01       	movw	r20, r18
    1fd2:	4f 5f       	subi	r20, 0xFF	; 255
    1fd4:	5f 4f       	sbci	r21, 0xFF	; 255
    1fd6:	50 93 71 02 	sts	0x0271, r21
    1fda:	40 93 70 02 	sts	0x0270, r20
    1fde:	21 15       	cp	r18, r1
    1fe0:	31 05       	cpc	r19, r1
    1fe2:	09 f7       	brne	.-62     	; 0x1fa6 <_ZL16currentCharacterv+0x4>
    1fe4:	08 95       	ret

00001fe6 <_ZL9getNumberv>:
    1fe6:	ef 92       	push	r14
    1fe8:	ff 92       	push	r15
    1fea:	cf 93       	push	r28
    1fec:	df 93       	push	r29
    1fee:	0e 94 d1 0f 	call	0x1fa2	; 0x1fa2 <_ZL16currentCharacterv>
    1ff2:	c0 e0       	ldi	r28, 0x00	; 0
    1ff4:	d0 e0       	ldi	r29, 0x00	; 0
    1ff6:	1b c0       	rjmp	.+54     	; 0x202e <_ZL9getNumberv+0x48>
    1ff8:	9e 01       	movw	r18, r28
    1ffa:	22 0f       	add	r18, r18
    1ffc:	33 1f       	adc	r19, r19
    1ffe:	93 e0       	ldi	r25, 0x03	; 3
    2000:	cc 0f       	add	r28, r28
    2002:	dd 1f       	adc	r29, r29
    2004:	9a 95       	dec	r25
    2006:	e1 f7       	brne	.-8      	; 0x2000 <_ZL9getNumberv+0x1a>
    2008:	c2 0f       	add	r28, r18
    200a:	d3 1f       	adc	r29, r19
    200c:	99 27       	eor	r25, r25
    200e:	87 fd       	sbrc	r24, 7
    2010:	90 95       	com	r25
    2012:	c8 0f       	add	r28, r24
    2014:	d9 1f       	adc	r29, r25
    2016:	e0 97       	sbiw	r28, 0x30	; 48
    2018:	80 91 70 02 	lds	r24, 0x0270
    201c:	90 91 71 02 	lds	r25, 0x0271
    2020:	01 96       	adiw	r24, 0x01	; 1
    2022:	90 93 71 02 	sts	0x0271, r25
    2026:	80 93 70 02 	sts	0x0270, r24
    202a:	0e 94 d1 0f 	call	0x1fa2	; 0x1fa2 <_ZL16currentCharacterv>
    202e:	98 2f       	mov	r25, r24
    2030:	90 53       	subi	r25, 0x30	; 48
    2032:	9a 30       	cpi	r25, 0x0A	; 10
    2034:	08 f3       	brcs	.-62     	; 0x1ff8 <_ZL9getNumberv+0x12>
    2036:	ce 01       	movw	r24, r28
    2038:	df 91       	pop	r29
    203a:	cf 91       	pop	r28
    203c:	ff 90       	pop	r15
    203e:	ef 90       	pop	r14
    2040:	08 95       	ret

00002042 <_ZN15OrangutanBuzzer5init2Ev>:
    2042:	10 92 6f 00 	sts	0x006F, r1
    2046:	83 e2       	ldi	r24, 0x23	; 35
    2048:	80 93 80 00 	sts	0x0080, r24
    204c:	81 e1       	ldi	r24, 0x11	; 17
    204e:	80 93 81 00 	sts	0x0081, r24
    2052:	10 92 82 00 	sts	0x0082, r1
    2056:	80 e1       	ldi	r24, 0x10	; 16
    2058:	97 e2       	ldi	r25, 0x27	; 39
    205a:	90 93 89 00 	sts	0x0089, r25
    205e:	80 93 88 00 	sts	0x0088, r24
    2062:	10 92 8b 00 	sts	0x008B, r1
    2066:	10 92 8a 00 	sts	0x008A, r1
    206a:	54 9a       	sbi	0x0a, 4	; 10
    206c:	78 94       	sei
    206e:	08 95       	ret

00002070 <_ZN15OrangutanBuzzer4initEv>:
    2070:	80 91 6f 02 	lds	r24, 0x026F
    2074:	88 23       	and	r24, r24
    2076:	29 f4       	brne	.+10     	; 0x2082 <_ZN15OrangutanBuzzer4initEv+0x12>
    2078:	81 e0       	ldi	r24, 0x01	; 1
    207a:	80 93 6f 02 	sts	0x026F, r24
    207e:	0e 94 21 10 	call	0x2042	; 0x2042 <_ZN15OrangutanBuzzer5init2Ev>
    2082:	08 95       	ret

00002084 <_ZN15OrangutanBuzzer13playFrequencyEjjh>:
    2084:	a0 e0       	ldi	r26, 0x00	; 0
    2086:	b0 e0       	ldi	r27, 0x00	; 0
    2088:	e8 e4       	ldi	r30, 0x48	; 72
    208a:	f0 e1       	ldi	r31, 0x10	; 16
    208c:	0c 94 ca 13 	jmp	0x2794	; 0x2794 <__prologue_saves__+0xc>
    2090:	8c 01       	movw	r16, r24
    2092:	5b 01       	movw	r10, r22
    2094:	e4 2e       	mov	r14, r20
    2096:	0e 94 38 10 	call	0x2070	; 0x2070 <_ZN15OrangutanBuzzer4initEv>
    209a:	10 92 03 02 	sts	0x0203, r1
    209e:	17 ff       	sbrs	r17, 7
    20a0:	04 c0       	rjmp	.+8      	; 0x20aa <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x26>
    20a2:	1f 77       	andi	r17, 0x7F	; 127
    20a4:	aa e0       	ldi	r26, 0x0A	; 10
    20a6:	fa 2e       	mov	r15, r26
    20a8:	02 c0       	rjmp	.+4      	; 0x20ae <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x2a>
    20aa:	ff 24       	eor	r15, r15
    20ac:	f3 94       	inc	r15
    20ae:	c0 90 81 00 	lds	r12, 0x0081
    20b2:	dd 24       	eor	r13, r13
    20b4:	28 ef       	ldi	r18, 0xF8	; 248
    20b6:	c2 22       	and	r12, r18
    20b8:	dd 24       	eor	r13, r13
    20ba:	88 ec       	ldi	r24, 0xC8	; 200
    20bc:	3f 2d       	mov	r19, r15
    20be:	38 9f       	mul	r19, r24
    20c0:	c0 01       	movw	r24, r0
    20c2:	11 24       	eor	r1, r1
    20c4:	80 17       	cp	r24, r16
    20c6:	91 07       	cpc	r25, r17
    20c8:	d8 f4       	brcc	.+54     	; 0x2100 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x7c>
    20ca:	e8 01       	movw	r28, r16
    20cc:	67 e2       	ldi	r22, 0x27	; 39
    20ce:	01 31       	cpi	r16, 0x11	; 17
    20d0:	16 07       	cpc	r17, r22
    20d2:	10 f0       	brcs	.+4      	; 0x20d8 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x54>
    20d4:	c0 e1       	ldi	r28, 0x10	; 16
    20d6:	d7 e2       	ldi	r29, 0x27	; 39
    20d8:	be 01       	movw	r22, r28
    20da:	76 95       	lsr	r23
    20dc:	67 95       	ror	r22
    20de:	80 e0       	ldi	r24, 0x00	; 0
    20e0:	90 e0       	ldi	r25, 0x00	; 0
    20e2:	60 58       	subi	r22, 0x80	; 128
    20e4:	79 46       	sbci	r23, 0x69	; 105
    20e6:	87 46       	sbci	r24, 0x67	; 103
    20e8:	9f 4f       	sbci	r25, 0xFF	; 255
    20ea:	9e 01       	movw	r18, r28
    20ec:	40 e0       	ldi	r20, 0x00	; 0
    20ee:	50 e0       	ldi	r21, 0x00	; 0
    20f0:	0e 94 87 13 	call	0x270e	; 0x270e <__udivmodsi4>
    20f4:	89 01       	movw	r16, r18
    20f6:	81 e0       	ldi	r24, 0x01	; 1
    20f8:	90 e0       	ldi	r25, 0x00	; 0
    20fa:	c8 2a       	or	r12, r24
    20fc:	d9 2a       	or	r13, r25
    20fe:	2c c0       	rjmp	.+88     	; 0x2158 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xd4>
    2100:	98 e2       	ldi	r25, 0x28	; 40
    2102:	f9 9e       	mul	r15, r25
    2104:	90 2d       	mov	r25, r0
    2106:	11 24       	eor	r1, r1
    2108:	80 e0       	ldi	r24, 0x00	; 0
    210a:	89 2e       	mov	r8, r25
    210c:	e4 01       	movw	r28, r8
    210e:	4e 01       	movw	r8, r28
    2110:	98 2e       	mov	r9, r24
    2112:	e4 01       	movw	r28, r8
    2114:	80 16       	cp	r8, r16
    2116:	91 06       	cpc	r9, r17
    2118:	08 f4       	brcc	.+2      	; 0x211c <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x98>
    211a:	e8 01       	movw	r28, r16
    211c:	be 01       	movw	r22, r28
    211e:	76 95       	lsr	r23
    2120:	67 95       	ror	r22
    2122:	9e 01       	movw	r18, r28
    2124:	40 e0       	ldi	r20, 0x00	; 0
    2126:	50 e0       	ldi	r21, 0x00	; 0
    2128:	8f 2d       	mov	r24, r15
    212a:	8a 30       	cpi	r24, 0x0A	; 10
    212c:	39 f4       	brne	.+14     	; 0x213c <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xb8>
    212e:	80 e0       	ldi	r24, 0x00	; 0
    2130:	90 e0       	ldi	r25, 0x00	; 0
    2132:	60 5e       	subi	r22, 0xE0	; 224
    2134:	73 44       	sbci	r23, 0x43	; 67
    2136:	81 44       	sbci	r24, 0x41	; 65
    2138:	9f 4f       	sbci	r25, 0xFF	; 255
    213a:	06 c0       	rjmp	.+12     	; 0x2148 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xc4>
    213c:	80 e0       	ldi	r24, 0x00	; 0
    213e:	90 e0       	ldi	r25, 0x00	; 0
    2140:	60 53       	subi	r22, 0x30	; 48
    2142:	7d 4e       	sbci	r23, 0xED	; 237
    2144:	8c 4e       	sbci	r24, 0xEC	; 236
    2146:	9f 4f       	sbci	r25, 0xFF	; 255
    2148:	0e 94 87 13 	call	0x270e	; 0x270e <__udivmodsi4>
    214c:	89 01       	movw	r16, r18
    214e:	52 e0       	ldi	r21, 0x02	; 2
    2150:	85 2e       	mov	r8, r21
    2152:	91 2c       	mov	r9, r1
    2154:	c8 28       	or	r12, r8
    2156:	d9 28       	or	r13, r9
    2158:	2f 2d       	mov	r18, r15
    215a:	2a 30       	cpi	r18, 0x0A	; 10
    215c:	39 f4       	brne	.+14     	; 0x216c <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xe8>
    215e:	ce 01       	movw	r24, r28
    2160:	05 96       	adiw	r24, 0x05	; 5
    2162:	6a e0       	ldi	r22, 0x0A	; 10
    2164:	70 e0       	ldi	r23, 0x00	; 0
    2166:	0e 94 73 13 	call	0x26e6	; 0x26e6 <__udivmodhi4>
    216a:	eb 01       	movw	r28, r22
    216c:	33 e0       	ldi	r19, 0x03	; 3
    216e:	c8 3e       	cpi	r28, 0xE8	; 232
    2170:	d3 07       	cpc	r29, r19
    2172:	79 f0       	breq	.+30     	; 0x2192 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x10e>
    2174:	be 01       	movw	r22, r28
    2176:	80 e0       	ldi	r24, 0x00	; 0
    2178:	90 e0       	ldi	r25, 0x00	; 0
    217a:	95 01       	movw	r18, r10
    217c:	40 e0       	ldi	r20, 0x00	; 0
    217e:	50 e0       	ldi	r21, 0x00	; 0
    2180:	0e 94 48 13 	call	0x2690	; 0x2690 <__mulsi3>
    2184:	28 ee       	ldi	r18, 0xE8	; 232
    2186:	33 e0       	ldi	r19, 0x03	; 3
    2188:	40 e0       	ldi	r20, 0x00	; 0
    218a:	50 e0       	ldi	r21, 0x00	; 0
    218c:	0e 94 a9 13 	call	0x2752	; 0x2752 <__divmodsi4>
    2190:	01 c0       	rjmp	.+2      	; 0x2194 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x110>
    2192:	95 01       	movw	r18, r10
    2194:	10 92 6f 00 	sts	0x006F, r1
    2198:	c0 92 81 00 	sts	0x0081, r12
    219c:	10 93 89 00 	sts	0x0089, r17
    21a0:	00 93 88 00 	sts	0x0088, r16
    21a4:	40 91 88 00 	lds	r20, 0x0088
    21a8:	50 91 89 00 	lds	r21, 0x0089
    21ac:	6e 2d       	mov	r22, r14
    21ae:	60 31       	cpi	r22, 0x10	; 16
    21b0:	08 f0       	brcs	.+2      	; 0x21b4 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x130>
    21b2:	6f e0       	ldi	r22, 0x0F	; 15
    21b4:	80 e1       	ldi	r24, 0x10	; 16
    21b6:	90 e0       	ldi	r25, 0x00	; 0
    21b8:	86 1b       	sub	r24, r22
    21ba:	91 09       	sbc	r25, r1
    21bc:	ba 01       	movw	r22, r20
    21be:	02 c0       	rjmp	.+4      	; 0x21c4 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x140>
    21c0:	76 95       	lsr	r23
    21c2:	67 95       	ror	r22
    21c4:	8a 95       	dec	r24
    21c6:	e2 f7       	brpl	.-8      	; 0x21c0 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x13c>
    21c8:	70 93 8b 00 	sts	0x008B, r23
    21cc:	60 93 8a 00 	sts	0x008A, r22
    21d0:	30 93 77 02 	sts	0x0277, r19
    21d4:	20 93 76 02 	sts	0x0276, r18
    21d8:	86 b3       	in	r24, 0x16	; 22
    21da:	8f ef       	ldi	r24, 0xFF	; 255
    21dc:	86 bb       	out	0x16, r24	; 22
    21de:	81 e0       	ldi	r24, 0x01	; 1
    21e0:	80 93 6f 00 	sts	0x006F, r24
    21e4:	cd b7       	in	r28, 0x3d	; 61
    21e6:	de b7       	in	r29, 0x3e	; 62
    21e8:	ec e0       	ldi	r30, 0x0C	; 12
    21ea:	0c 94 e6 13 	jmp	0x27cc	; 0x27cc <__epilogue_restores__+0xc>

000021ee <_ZN15OrangutanBuzzer8playNoteEhjh>:
    21ee:	9b 01       	movw	r18, r22
    21f0:	8f 3f       	cpi	r24, 0xFF	; 255
    21f2:	11 f0       	breq	.+4      	; 0x21f8 <_ZN15OrangutanBuzzer8playNoteEhjh+0xa>
    21f4:	44 23       	and	r20, r20
    21f6:	29 f4       	brne	.+10     	; 0x2202 <_ZN15OrangutanBuzzer8playNoteEhjh+0x14>
    21f8:	88 ee       	ldi	r24, 0xE8	; 232
    21fa:	93 e0       	ldi	r25, 0x03	; 3
    21fc:	b9 01       	movw	r22, r18
    21fe:	40 e0       	ldi	r20, 0x00	; 0
    2200:	49 c0       	rjmp	.+146    	; 0x2294 <_ZN15OrangutanBuzzer8playNoteEhjh+0xa6>
    2202:	81 31       	cpi	r24, 0x11	; 17
    2204:	30 f0       	brcs	.+12     	; 0x2212 <_ZN15OrangutanBuzzer8playNoteEhjh+0x24>
    2206:	58 2f       	mov	r21, r24
    2208:	50 51       	subi	r21, 0x10	; 16
    220a:	50 36       	cpi	r21, 0x60	; 96
    220c:	18 f0       	brcs	.+6      	; 0x2214 <_ZN15OrangutanBuzzer8playNoteEhjh+0x26>
    220e:	5f e5       	ldi	r21, 0x5F	; 95
    2210:	01 c0       	rjmp	.+2      	; 0x2214 <_ZN15OrangutanBuzzer8playNoteEhjh+0x26>
    2212:	50 e0       	ldi	r21, 0x00	; 0
    2214:	85 2f       	mov	r24, r21
    2216:	6c e0       	ldi	r22, 0x0C	; 12
    2218:	0e 94 67 13 	call	0x26ce	; 0x26ce <__udivmodqi4>
    221c:	a8 2f       	mov	r26, r24
    221e:	b0 e0       	ldi	r27, 0x00	; 0
    2220:	e4 ef       	ldi	r30, 0xF4	; 244
    2222:	ff ef       	ldi	r31, 0xFF	; 255
    2224:	ae 9f       	mul	r26, r30
    2226:	b0 01       	movw	r22, r0
    2228:	af 9f       	mul	r26, r31
    222a:	70 0d       	add	r23, r0
    222c:	be 9f       	mul	r27, r30
    222e:	70 0d       	add	r23, r0
    2230:	11 24       	eor	r1, r1
    2232:	65 0f       	add	r22, r21
    2234:	71 1d       	adc	r23, r1
    2236:	6c 30       	cpi	r22, 0x0C	; 12
    2238:	71 05       	cpc	r23, r1
    223a:	40 f4       	brcc	.+16     	; 0x224c <_ZN15OrangutanBuzzer8playNoteEhjh+0x5e>
    223c:	fb 01       	movw	r30, r22
    223e:	ee 0f       	add	r30, r30
    2240:	ff 1f       	adc	r31, r31
    2242:	e3 5f       	subi	r30, 0xF3	; 243
    2244:	fd 4f       	sbci	r31, 0xFD	; 253
    2246:	60 81       	ld	r22, Z
    2248:	71 81       	ldd	r23, Z+1	; 0x01
    224a:	02 c0       	rjmp	.+4      	; 0x2250 <_ZN15OrangutanBuzzer8playNoteEhjh+0x62>
    224c:	60 e0       	ldi	r22, 0x00	; 0
    224e:	70 e0       	ldi	r23, 0x00	; 0
    2250:	87 30       	cpi	r24, 0x07	; 7
    2252:	81 f0       	breq	.+32     	; 0x2274 <_ZN15OrangutanBuzzer8playNoteEhjh+0x86>
    2254:	08 2e       	mov	r0, r24
    2256:	02 c0       	rjmp	.+4      	; 0x225c <_ZN15OrangutanBuzzer8playNoteEhjh+0x6e>
    2258:	66 0f       	add	r22, r22
    225a:	77 1f       	adc	r23, r23
    225c:	0a 94       	dec	r0
    225e:	e2 f7       	brpl	.-8      	; 0x2258 <_ZN15OrangutanBuzzer8playNoteEhjh+0x6a>
    2260:	82 30       	cpi	r24, 0x02	; 2
    2262:	28 f0       	brcs	.+10     	; 0x226e <_ZN15OrangutanBuzzer8playNoteEhjh+0x80>
    2264:	cb 01       	movw	r24, r22
    2266:	05 96       	adiw	r24, 0x05	; 5
    2268:	6a e0       	ldi	r22, 0x0A	; 10
    226a:	70 e0       	ldi	r23, 0x00	; 0
    226c:	0c c0       	rjmp	.+24     	; 0x2286 <_ZN15OrangutanBuzzer8playNoteEhjh+0x98>
    226e:	60 50       	subi	r22, 0x00	; 0
    2270:	70 48       	sbci	r23, 0x80	; 128
    2272:	0b c0       	rjmp	.+22     	; 0x228a <_ZN15OrangutanBuzzer8playNoteEhjh+0x9c>
    2274:	cb 01       	movw	r24, r22
    2276:	b6 e0       	ldi	r27, 0x06	; 6
    2278:	88 0f       	add	r24, r24
    227a:	99 1f       	adc	r25, r25
    227c:	ba 95       	dec	r27
    227e:	e1 f7       	brne	.-8      	; 0x2278 <_ZN15OrangutanBuzzer8playNoteEhjh+0x8a>
    2280:	02 96       	adiw	r24, 0x02	; 2
    2282:	65 e0       	ldi	r22, 0x05	; 5
    2284:	70 e0       	ldi	r23, 0x00	; 0
    2286:	0e 94 73 13 	call	0x26e6	; 0x26e6 <__udivmodhi4>
    228a:	40 31       	cpi	r20, 0x10	; 16
    228c:	08 f0       	brcs	.+2      	; 0x2290 <_ZN15OrangutanBuzzer8playNoteEhjh+0xa2>
    228e:	4f e0       	ldi	r20, 0x0F	; 15
    2290:	cb 01       	movw	r24, r22
    2292:	b9 01       	movw	r22, r18
    2294:	0e 94 42 10 	call	0x2084	; 0x2084 <_ZN15OrangutanBuzzer13playFrequencyEjjh>
    2298:	08 95       	ret

0000229a <_ZL8nextNotev>:
    229a:	a0 e0       	ldi	r26, 0x00	; 0
    229c:	b0 e0       	ldi	r27, 0x00	; 0
    229e:	e3 e5       	ldi	r30, 0x53	; 83
    22a0:	f1 e1       	ldi	r31, 0x11	; 17
    22a2:	0c 94 c9 13 	jmp	0x2792	; 0x2792 <__prologue_saves__+0xa>
    22a6:	b0 90 04 02 	lds	r11, 0x0204
    22aa:	80 91 72 02 	lds	r24, 0x0272
    22ae:	88 23       	and	r24, r24
    22b0:	61 f0       	breq	.+24     	; 0x22ca <_ZL8nextNotev+0x30>
    22b2:	60 91 73 02 	lds	r22, 0x0273
    22b6:	66 23       	and	r22, r22
    22b8:	41 f0       	breq	.+16     	; 0x22ca <_ZL8nextNotev+0x30>
    22ba:	8f ef       	ldi	r24, 0xFF	; 255
    22bc:	70 e0       	ldi	r23, 0x00	; 0
    22be:	40 e0       	ldi	r20, 0x00	; 0
    22c0:	0e 94 f7 10 	call	0x21ee	; 0x21ee <_ZN15OrangutanBuzzer8playNoteEhjh>
    22c4:	10 92 73 02 	sts	0x0273, r1
    22c8:	34 c1       	rjmp	.+616    	; 0x2532 <_ZL8nextNotev+0x298>
    22ca:	c0 ec       	ldi	r28, 0xC0	; 192
    22cc:	dd e5       	ldi	r29, 0x5D	; 93
    22ce:	aa 24       	eor	r10, r10
    22d0:	a3 94       	inc	r10
    22d2:	14 e0       	ldi	r17, 0x04	; 4
    22d4:	71 2e       	mov	r7, r17
    22d6:	00 ed       	ldi	r16, 0xD0	; 208
    22d8:	17 e0       	ldi	r17, 0x07	; 7
    22da:	b4 e0       	ldi	r27, 0x04	; 4
    22dc:	eb 2e       	mov	r14, r27
    22de:	f1 2c       	mov	r15, r1
    22e0:	a4 ef       	ldi	r26, 0xF4	; 244
    22e2:	ca 2e       	mov	r12, r26
    22e4:	a1 e0       	ldi	r26, 0x01	; 1
    22e6:	da 2e       	mov	r13, r26
    22e8:	ff e0       	ldi	r31, 0x0F	; 15
    22ea:	8f 2e       	mov	r8, r31
    22ec:	91 2c       	mov	r9, r1
    22ee:	0e 94 d1 0f 	call	0x1fa2	; 0x1fa2 <_ZL16currentCharacterv>
    22f2:	20 91 70 02 	lds	r18, 0x0270
    22f6:	30 91 71 02 	lds	r19, 0x0271
    22fa:	2f 5f       	subi	r18, 0xFF	; 255
    22fc:	3f 4f       	sbci	r19, 0xFF	; 255
    22fe:	30 93 71 02 	sts	0x0271, r19
    2302:	20 93 70 02 	sts	0x0270, r18
    2306:	86 36       	cpi	r24, 0x66	; 102
    2308:	f1 f1       	breq	.+124    	; 0x2386 <_ZL8nextNotev+0xec>
    230a:	87 36       	cpi	r24, 0x67	; 103
    230c:	cc f4       	brge	.+50     	; 0x2340 <_ZL8nextNotev+0xa6>
    230e:	82 36       	cpi	r24, 0x62	; 98
    2310:	09 f4       	brne	.+2      	; 0x2314 <_ZL8nextNotev+0x7a>
    2312:	af c0       	rjmp	.+350    	; 0x2472 <_ZL8nextNotev+0x1d8>
    2314:	83 36       	cpi	r24, 0x63	; 99
    2316:	7c f4       	brge	.+30     	; 0x2336 <_ZL8nextNotev+0x9c>
    2318:	8e 33       	cpi	r24, 0x3E	; 62
    231a:	49 f1       	breq	.+82     	; 0x236e <_ZL8nextNotev+0xd4>
    231c:	8f 33       	cpi	r24, 0x3F	; 63
    231e:	3c f4       	brge	.+14     	; 0x232e <_ZL8nextNotev+0x94>
    2320:	81 32       	cpi	r24, 0x21	; 33
    2322:	09 f4       	brne	.+2      	; 0x2326 <_ZL8nextNotev+0x8c>
    2324:	87 c0       	rjmp	.+270    	; 0x2434 <_ZL8nextNotev+0x19a>
    2326:	8c 33       	cpi	r24, 0x3C	; 60
    2328:	09 f0       	breq	.+2      	; 0x232c <_ZL8nextNotev+0x92>
    232a:	9b c0       	rjmp	.+310    	; 0x2462 <_ZL8nextNotev+0x1c8>
    232c:	22 c0       	rjmp	.+68     	; 0x2372 <_ZL8nextNotev+0xd8>
    232e:	81 36       	cpi	r24, 0x61	; 97
    2330:	09 f0       	breq	.+2      	; 0x2334 <_ZL8nextNotev+0x9a>
    2332:	97 c0       	rjmp	.+302    	; 0x2462 <_ZL8nextNotev+0x1c8>
    2334:	9b c0       	rjmp	.+310    	; 0x246c <_ZL8nextNotev+0x1d2>
    2336:	84 36       	cpi	r24, 0x64	; 100
    2338:	01 f1       	breq	.+64     	; 0x237a <_ZL8nextNotev+0xe0>
    233a:	85 36       	cpi	r24, 0x65	; 101
    233c:	0c f5       	brge	.+66     	; 0x2380 <_ZL8nextNotev+0xe6>
    233e:	1b c0       	rjmp	.+54     	; 0x2376 <_ZL8nextNotev+0xdc>
    2340:	8f 36       	cpi	r24, 0x6F	; 111
    2342:	09 f4       	brne	.+2      	; 0x2346 <_ZL8nextNotev+0xac>
    2344:	47 c0       	rjmp	.+142    	; 0x23d4 <_ZL8nextNotev+0x13a>
    2346:	80 37       	cpi	r24, 0x70	; 112
    2348:	44 f4       	brge	.+16     	; 0x235a <_ZL8nextNotev+0xc0>
    234a:	8c 36       	cpi	r24, 0x6C	; 108
    234c:	11 f1       	breq	.+68     	; 0x2392 <_ZL8nextNotev+0xf8>
    234e:	8d 36       	cpi	r24, 0x6D	; 109
    2350:	61 f1       	breq	.+88     	; 0x23aa <_ZL8nextNotev+0x110>
    2352:	87 36       	cpi	r24, 0x67	; 103
    2354:	09 f0       	breq	.+2      	; 0x2358 <_ZL8nextNotev+0xbe>
    2356:	85 c0       	rjmp	.+266    	; 0x2462 <_ZL8nextNotev+0x1c8>
    2358:	19 c0       	rjmp	.+50     	; 0x238c <_ZL8nextNotev+0xf2>
    235a:	84 37       	cpi	r24, 0x74	; 116
    235c:	09 f4       	brne	.+2      	; 0x2360 <_ZL8nextNotev+0xc6>
    235e:	44 c0       	rjmp	.+136    	; 0x23e8 <_ZL8nextNotev+0x14e>
    2360:	86 37       	cpi	r24, 0x76	; 118
    2362:	09 f4       	brne	.+2      	; 0x2366 <_ZL8nextNotev+0xcc>
    2364:	60 c0       	rjmp	.+192    	; 0x2426 <_ZL8nextNotev+0x18c>
    2366:	82 37       	cpi	r24, 0x72	; 114
    2368:	09 f0       	breq	.+2      	; 0x236c <_ZL8nextNotev+0xd2>
    236a:	7b c0       	rjmp	.+246    	; 0x2462 <_ZL8nextNotev+0x1c8>
    236c:	39 c0       	rjmp	.+114    	; 0x23e0 <_ZL8nextNotev+0x146>
    236e:	b3 94       	inc	r11
    2370:	be cf       	rjmp	.-132    	; 0x22ee <_ZL8nextNotev+0x54>
    2372:	ba 94       	dec	r11
    2374:	bc cf       	rjmp	.-136    	; 0x22ee <_ZL8nextNotev+0x54>
    2376:	ee 24       	eor	r14, r14
    2378:	35 c0       	rjmp	.+106    	; 0x23e4 <_ZL8nextNotev+0x14a>
    237a:	ee 24       	eor	r14, r14
    237c:	82 e0       	ldi	r24, 0x02	; 2
    237e:	7b c0       	rjmp	.+246    	; 0x2476 <_ZL8nextNotev+0x1dc>
    2380:	ee 24       	eor	r14, r14
    2382:	84 e0       	ldi	r24, 0x04	; 4
    2384:	78 c0       	rjmp	.+240    	; 0x2476 <_ZL8nextNotev+0x1dc>
    2386:	ee 24       	eor	r14, r14
    2388:	85 e0       	ldi	r24, 0x05	; 5
    238a:	75 c0       	rjmp	.+234    	; 0x2476 <_ZL8nextNotev+0x1dc>
    238c:	ee 24       	eor	r14, r14
    238e:	87 e0       	ldi	r24, 0x07	; 7
    2390:	72 c0       	rjmp	.+228    	; 0x2476 <_ZL8nextNotev+0x1dc>
    2392:	0e 94 f3 0f 	call	0x1fe6	; 0x1fe6 <_ZL9getNumberv>
    2396:	bc 01       	movw	r22, r24
    2398:	90 93 06 02 	sts	0x0206, r25
    239c:	80 93 05 02 	sts	0x0205, r24
    23a0:	80 91 07 02 	lds	r24, 0x0207
    23a4:	90 91 08 02 	lds	r25, 0x0208
    23a8:	37 c0       	rjmp	.+110    	; 0x2418 <_ZL8nextNotev+0x17e>
    23aa:	0e 94 d1 0f 	call	0x1fa2	; 0x1fa2 <_ZL16currentCharacterv>
    23ae:	8c 36       	cpi	r24, 0x6C	; 108
    23b0:	19 f4       	brne	.+6      	; 0x23b8 <_ZL8nextNotev+0x11e>
    23b2:	10 92 72 02 	sts	0x0272, r1
    23b6:	04 c0       	rjmp	.+8      	; 0x23c0 <_ZL8nextNotev+0x126>
    23b8:	a0 92 72 02 	sts	0x0272, r10
    23bc:	10 92 73 02 	sts	0x0273, r1
    23c0:	80 91 70 02 	lds	r24, 0x0270
    23c4:	90 91 71 02 	lds	r25, 0x0271
    23c8:	01 96       	adiw	r24, 0x01	; 1
    23ca:	90 93 71 02 	sts	0x0271, r25
    23ce:	80 93 70 02 	sts	0x0270, r24
    23d2:	8d cf       	rjmp	.-230    	; 0x22ee <_ZL8nextNotev+0x54>
    23d4:	0e 94 f3 0f 	call	0x1fe6	; 0x1fe6 <_ZL9getNumberv>
    23d8:	b8 2e       	mov	r11, r24
    23da:	80 93 04 02 	sts	0x0204, r24
    23de:	87 cf       	rjmp	.-242    	; 0x22ee <_ZL8nextNotev+0x54>
    23e0:	ee 24       	eor	r14, r14
    23e2:	e3 94       	inc	r14
    23e4:	80 e0       	ldi	r24, 0x00	; 0
    23e6:	47 c0       	rjmp	.+142    	; 0x2476 <_ZL8nextNotev+0x1dc>
    23e8:	0e 94 f3 0f 	call	0x1fe6	; 0x1fe6 <_ZL9getNumberv>
    23ec:	bc 01       	movw	r22, r24
    23ee:	ce 01       	movw	r24, r28
    23f0:	0e 94 73 13 	call	0x26e6	; 0x26e6 <__udivmodhi4>
    23f4:	cb 01       	movw	r24, r22
    23f6:	88 0f       	add	r24, r24
    23f8:	99 1f       	adc	r25, r25
    23fa:	53 e0       	ldi	r21, 0x03	; 3
    23fc:	66 0f       	add	r22, r22
    23fe:	77 1f       	adc	r23, r23
    2400:	5a 95       	dec	r21
    2402:	e1 f7       	brne	.-8      	; 0x23fc <_ZL8nextNotev+0x162>
    2404:	86 0f       	add	r24, r22
    2406:	97 1f       	adc	r25, r23
    2408:	90 93 08 02 	sts	0x0208, r25
    240c:	80 93 07 02 	sts	0x0207, r24
    2410:	60 91 05 02 	lds	r22, 0x0205
    2414:	70 91 06 02 	lds	r23, 0x0206
    2418:	0e 94 73 13 	call	0x26e6	; 0x26e6 <__udivmodhi4>
    241c:	70 93 0a 02 	sts	0x020A, r23
    2420:	60 93 09 02 	sts	0x0209, r22
    2424:	64 cf       	rjmp	.-312    	; 0x22ee <_ZL8nextNotev+0x54>
    2426:	0e 94 f3 0f 	call	0x1fe6	; 0x1fe6 <_ZL9getNumberv>
    242a:	90 93 0c 02 	sts	0x020C, r25
    242e:	80 93 0b 02 	sts	0x020B, r24
    2432:	5d cf       	rjmp	.-326    	; 0x22ee <_ZL8nextNotev+0x54>
    2434:	70 92 04 02 	sts	0x0204, r7
    2438:	10 93 08 02 	sts	0x0208, r17
    243c:	00 93 07 02 	sts	0x0207, r16
    2440:	f0 92 06 02 	sts	0x0206, r15
    2444:	e0 92 05 02 	sts	0x0205, r14
    2448:	d0 92 0a 02 	sts	0x020A, r13
    244c:	c0 92 09 02 	sts	0x0209, r12
    2450:	90 92 0c 02 	sts	0x020C, r9
    2454:	80 92 0b 02 	sts	0x020B, r8
    2458:	10 92 72 02 	sts	0x0272, r1
    245c:	44 e0       	ldi	r20, 0x04	; 4
    245e:	b4 2e       	mov	r11, r20
    2460:	46 cf       	rjmp	.-372    	; 0x22ee <_ZL8nextNotev+0x54>
    2462:	10 92 71 02 	sts	0x0271, r1
    2466:	10 92 70 02 	sts	0x0270, r1
    246a:	63 c0       	rjmp	.+198    	; 0x2532 <_ZL8nextNotev+0x298>
    246c:	ee 24       	eor	r14, r14
    246e:	89 e0       	ldi	r24, 0x09	; 9
    2470:	02 c0       	rjmp	.+4      	; 0x2476 <_ZL8nextNotev+0x1dc>
    2472:	ee 24       	eor	r14, r14
    2474:	8b e0       	ldi	r24, 0x0B	; 11
    2476:	9c e0       	ldi	r25, 0x0C	; 12
    2478:	b9 9e       	mul	r11, r25
    247a:	b0 2c       	mov	r11, r0
    247c:	11 24       	eor	r1, r1
    247e:	b8 0e       	add	r11, r24
    2480:	0e 94 d1 0f 	call	0x1fa2	; 0x1fa2 <_ZL16currentCharacterv>
    2484:	8b 32       	cpi	r24, 0x2B	; 43
    2486:	11 f0       	breq	.+4      	; 0x248c <_ZL8nextNotev+0x1f2>
    2488:	83 32       	cpi	r24, 0x23	; 35
    248a:	b9 f4       	brne	.+46     	; 0x24ba <_ZL8nextNotev+0x220>
    248c:	80 91 70 02 	lds	r24, 0x0270
    2490:	90 91 71 02 	lds	r25, 0x0271
    2494:	01 96       	adiw	r24, 0x01	; 1
    2496:	90 93 71 02 	sts	0x0271, r25
    249a:	80 93 70 02 	sts	0x0270, r24
    249e:	b3 94       	inc	r11
    24a0:	ef cf       	rjmp	.-34     	; 0x2480 <_ZL8nextNotev+0x1e6>
    24a2:	80 91 70 02 	lds	r24, 0x0270
    24a6:	90 91 71 02 	lds	r25, 0x0271
    24aa:	01 96       	adiw	r24, 0x01	; 1
    24ac:	90 93 71 02 	sts	0x0271, r25
    24b0:	80 93 70 02 	sts	0x0270, r24
    24b4:	ba 94       	dec	r11
    24b6:	0e 94 d1 0f 	call	0x1fa2	; 0x1fa2 <_ZL16currentCharacterv>
    24ba:	8d 32       	cpi	r24, 0x2D	; 45
    24bc:	91 f3       	breq	.-28     	; 0x24a2 <_ZL8nextNotev+0x208>
    24be:	c0 91 09 02 	lds	r28, 0x0209
    24c2:	d0 91 0a 02 	lds	r29, 0x020A
    24c6:	81 53       	subi	r24, 0x31	; 49
    24c8:	88 30       	cpi	r24, 0x08	; 8
    24ca:	58 f4       	brcc	.+22     	; 0x24e2 <_ZL8nextNotev+0x248>
    24cc:	c0 91 07 02 	lds	r28, 0x0207
    24d0:	d0 91 08 02 	lds	r29, 0x0208
    24d4:	0e 94 f3 0f 	call	0x1fe6	; 0x1fe6 <_ZL9getNumberv>
    24d8:	bc 01       	movw	r22, r24
    24da:	ce 01       	movw	r24, r28
    24dc:	0e 94 73 13 	call	0x26e6	; 0x26e6 <__udivmodhi4>
    24e0:	eb 01       	movw	r28, r22
    24e2:	8e 01       	movw	r16, r28
    24e4:	0b c0       	rjmp	.+22     	; 0x24fc <_ZL8nextNotev+0x262>
    24e6:	80 91 70 02 	lds	r24, 0x0270
    24ea:	90 91 71 02 	lds	r25, 0x0271
    24ee:	01 96       	adiw	r24, 0x01	; 1
    24f0:	90 93 71 02 	sts	0x0271, r25
    24f4:	80 93 70 02 	sts	0x0270, r24
    24f8:	c0 0f       	add	r28, r16
    24fa:	d1 1f       	adc	r29, r17
    24fc:	16 95       	lsr	r17
    24fe:	07 95       	ror	r16
    2500:	0e 94 d1 0f 	call	0x1fa2	; 0x1fa2 <_ZL16currentCharacterv>
    2504:	8e 32       	cpi	r24, 0x2E	; 46
    2506:	79 f3       	breq	.-34     	; 0x24e6 <_ZL8nextNotev+0x24c>
    2508:	80 91 72 02 	lds	r24, 0x0272
    250c:	88 23       	and	r24, r24
    250e:	39 f0       	breq	.+14     	; 0x251e <_ZL8nextNotev+0x284>
    2510:	ce 01       	movw	r24, r28
    2512:	96 95       	lsr	r25
    2514:	87 95       	ror	r24
    2516:	80 93 73 02 	sts	0x0273, r24
    251a:	c8 1b       	sub	r28, r24
    251c:	d1 09       	sbc	r29, r1
    251e:	ee 20       	and	r14, r14
    2520:	11 f0       	breq	.+4      	; 0x2526 <_ZL8nextNotev+0x28c>
    2522:	bb 24       	eor	r11, r11
    2524:	ba 94       	dec	r11
    2526:	8b 2d       	mov	r24, r11
    2528:	be 01       	movw	r22, r28
    252a:	40 91 0b 02 	lds	r20, 0x020B
    252e:	0e 94 f7 10 	call	0x21ee	; 0x21ee <_ZN15OrangutanBuzzer8playNoteEhjh>
    2532:	cd b7       	in	r28, 0x3d	; 61
    2534:	de b7       	in	r29, 0x3e	; 62
    2536:	ed e0       	ldi	r30, 0x0D	; 13
    2538:	0c 94 e5 13 	jmp	0x27ca	; 0x27ca <__epilogue_restores__+0xa>

0000253c <__vector_15>:
    253c:	1f 92       	push	r1
    253e:	0f 92       	push	r0
    2540:	0f b6       	in	r0, 0x3f	; 63
    2542:	0f 92       	push	r0
    2544:	0b b6       	in	r0, 0x3b	; 59
    2546:	0f 92       	push	r0
    2548:	11 24       	eor	r1, r1
    254a:	2f 93       	push	r18
    254c:	3f 93       	push	r19
    254e:	4f 93       	push	r20
    2550:	5f 93       	push	r21
    2552:	6f 93       	push	r22
    2554:	7f 93       	push	r23
    2556:	8f 93       	push	r24
    2558:	9f 93       	push	r25
    255a:	af 93       	push	r26
    255c:	bf 93       	push	r27
    255e:	ef 93       	push	r30
    2560:	ff 93       	push	r31
    2562:	80 91 76 02 	lds	r24, 0x0276
    2566:	90 91 77 02 	lds	r25, 0x0277
    256a:	9c 01       	movw	r18, r24
    256c:	21 50       	subi	r18, 0x01	; 1
    256e:	30 40       	sbci	r19, 0x00	; 0
    2570:	30 93 77 02 	sts	0x0277, r19
    2574:	20 93 76 02 	sts	0x0276, r18
    2578:	00 97       	sbiw	r24, 0x00	; 0
    257a:	11 f5       	brne	.+68     	; 0x25c0 <__vector_15+0x84>
    257c:	10 92 6f 00 	sts	0x006F, r1
    2580:	78 94       	sei
    2582:	80 91 81 00 	lds	r24, 0x0081
    2586:	88 7f       	andi	r24, 0xF8	; 248
    2588:	81 60       	ori	r24, 0x01	; 1
    258a:	80 93 81 00 	sts	0x0081, r24
    258e:	80 e1       	ldi	r24, 0x10	; 16
    2590:	97 e2       	ldi	r25, 0x27	; 39
    2592:	90 93 89 00 	sts	0x0089, r25
    2596:	80 93 88 00 	sts	0x0088, r24
    259a:	10 92 8b 00 	sts	0x008B, r1
    259e:	10 92 8a 00 	sts	0x008A, r1
    25a2:	81 e0       	ldi	r24, 0x01	; 1
    25a4:	80 93 03 02 	sts	0x0203, r24
    25a8:	80 91 70 02 	lds	r24, 0x0270
    25ac:	90 91 71 02 	lds	r25, 0x0271
    25b0:	00 97       	sbiw	r24, 0x00	; 0
    25b2:	31 f0       	breq	.+12     	; 0x25c0 <__vector_15+0x84>
    25b4:	80 91 75 02 	lds	r24, 0x0275
    25b8:	88 23       	and	r24, r24
    25ba:	11 f4       	brne	.+4      	; 0x25c0 <__vector_15+0x84>
    25bc:	0e 94 4d 11 	call	0x229a	; 0x229a <_ZL8nextNotev>
    25c0:	ff 91       	pop	r31
    25c2:	ef 91       	pop	r30
    25c4:	bf 91       	pop	r27
    25c6:	af 91       	pop	r26
    25c8:	9f 91       	pop	r25
    25ca:	8f 91       	pop	r24
    25cc:	7f 91       	pop	r23
    25ce:	6f 91       	pop	r22
    25d0:	5f 91       	pop	r21
    25d2:	4f 91       	pop	r20
    25d4:	3f 91       	pop	r19
    25d6:	2f 91       	pop	r18
    25d8:	0f 90       	pop	r0
    25da:	0b be       	out	0x3b, r0	; 59
    25dc:	0f 90       	pop	r0
    25de:	0f be       	out	0x3f, r0	; 63
    25e0:	0f 90       	pop	r0
    25e2:	1f 90       	pop	r1
    25e4:	18 95       	reti

000025e6 <delayMicroseconds>:
    25e6:	6f 93       	push	r22
    25e8:	64 e0       	ldi	r22, 0x04	; 4
    25ea:	6a 95       	dec	r22
    25ec:	f1 f7       	brne	.-4      	; 0x25ea <delayMicroseconds+0x4>
    25ee:	6f 91       	pop	r22
    25f0:	01 97       	sbiw	r24, 0x01	; 1
    25f2:	c9 f7       	brne	.-14     	; 0x25e6 <delayMicroseconds>
    25f4:	08 95       	ret

000025f6 <_ZN18OrangutanSPIMaster4initEhh>:
    25f6:	a1 e0       	ldi	r26, 0x01	; 1
    25f8:	b0 e0       	ldi	r27, 0x00	; 0
    25fa:	e1 e0       	ldi	r30, 0x01	; 1
    25fc:	f3 e1       	ldi	r31, 0x13	; 19
    25fe:	0c 94 d3 13 	jmp	0x27a6	; 0x27a6 <__prologue_saves__+0x1e>
    2602:	18 2f       	mov	r17, r24
    2604:	24 99       	sbic	0x04, 4	; 4
    2606:	09 c0       	rjmp	.+18     	; 0x261a <_ZN18OrangutanSPIMaster4initEhh+0x24>
    2608:	2c 99       	sbic	0x05, 4	; 5
    260a:	07 c0       	rjmp	.+14     	; 0x261a <_ZN18OrangutanSPIMaster4initEhh+0x24>
    260c:	2c 9a       	sbi	0x05, 4	; 5
    260e:	8e e1       	ldi	r24, 0x1E	; 30
    2610:	90 e0       	ldi	r25, 0x00	; 0
    2612:	69 83       	std	Y+1, r22	; 0x01
    2614:	0e 94 f3 12 	call	0x25e6	; 0x25e6 <delayMicroseconds>
    2618:	69 81       	ldd	r22, Y+1	; 0x01
    261a:	84 b1       	in	r24, 0x04	; 4
    261c:	80 6a       	ori	r24, 0xA0	; 160
    261e:	84 b9       	out	0x04, r24	; 4
    2620:	26 98       	cbi	0x04, 6	; 4
    2622:	81 2f       	mov	r24, r17
    2624:	83 70       	andi	r24, 0x03	; 3
    2626:	80 65       	ori	r24, 0x50	; 80
    2628:	6c 7a       	andi	r22, 0xAC	; 172
    262a:	86 2b       	or	r24, r22
    262c:	8c bd       	out	0x2c, r24	; 44
    262e:	81 e0       	ldi	r24, 0x01	; 1
    2630:	12 ff       	sbrs	r17, 2
    2632:	80 e0       	ldi	r24, 0x00	; 0
    2634:	8d bd       	out	0x2d, r24	; 45
    2636:	81 e0       	ldi	r24, 0x01	; 1
    2638:	90 e0       	ldi	r25, 0x00	; 0
    263a:	0e 94 a1 0f 	call	0x1f42	; 0x1f42 <_ZN13OrangutanTime17delayMillisecondsEj>
    263e:	21 96       	adiw	r28, 0x01	; 1
    2640:	e3 e0       	ldi	r30, 0x03	; 3
    2642:	0c 94 ef 13 	jmp	0x27de	; 0x27de <__epilogue_restores__+0x1e>

00002646 <_ZN18OrangutanSPIMaster16transmitAndDelayEhh>:
    2646:	0f 93       	push	r16
    2648:	1f 93       	push	r17
    264a:	08 2f       	mov	r16, r24
    264c:	16 2f       	mov	r17, r22
    264e:	0c b4       	in	r0, 0x2c	; 44
    2650:	06 fc       	sbrc	r0, 6
    2652:	04 c0       	rjmp	.+8      	; 0x265c <_ZN18OrangutanSPIMaster16transmitAndDelayEhh+0x16>
    2654:	80 e0       	ldi	r24, 0x00	; 0
    2656:	64 e0       	ldi	r22, 0x04	; 4
    2658:	0e 94 fb 12 	call	0x25f6	; 0x25f6 <_ZN18OrangutanSPIMaster4initEhh>
    265c:	0c b4       	in	r0, 0x2c	; 44
    265e:	04 fc       	sbrc	r0, 4
    2660:	03 c0       	rjmp	.+6      	; 0x2668 <_ZN18OrangutanSPIMaster16transmitAndDelayEhh+0x22>
    2662:	8c b5       	in	r24, 0x2c	; 44
    2664:	80 61       	ori	r24, 0x10	; 16
    2666:	8c bd       	out	0x2c, r24	; 44
    2668:	0e bd       	out	0x2e, r16	; 46
    266a:	03 c0       	rjmp	.+6      	; 0x2672 <_ZN18OrangutanSPIMaster16transmitAndDelayEhh+0x2c>
    266c:	0c b4       	in	r0, 0x2c	; 44
    266e:	04 fe       	sbrs	r0, 4
    2670:	0b c0       	rjmp	.+22     	; 0x2688 <_ZN18OrangutanSPIMaster16transmitAndDelayEhh+0x42>
    2672:	0d b4       	in	r0, 0x2d	; 45
    2674:	07 fe       	sbrs	r0, 7
    2676:	fa cf       	rjmp	.-12     	; 0x266c <_ZN18OrangutanSPIMaster16transmitAndDelayEhh+0x26>
    2678:	11 23       	and	r17, r17
    267a:	21 f0       	breq	.+8      	; 0x2684 <_ZN18OrangutanSPIMaster16transmitAndDelayEhh+0x3e>
    267c:	81 2f       	mov	r24, r17
    267e:	90 e0       	ldi	r25, 0x00	; 0
    2680:	0e 94 f3 12 	call	0x25e6	; 0x25e6 <delayMicroseconds>
    2684:	8e b5       	in	r24, 0x2e	; 46
    2686:	01 c0       	rjmp	.+2      	; 0x268a <_ZN18OrangutanSPIMaster16transmitAndDelayEhh+0x44>
    2688:	80 e0       	ldi	r24, 0x00	; 0
    268a:	1f 91       	pop	r17
    268c:	0f 91       	pop	r16
    268e:	08 95       	ret

00002690 <__mulsi3>:
    2690:	62 9f       	mul	r22, r18
    2692:	d0 01       	movw	r26, r0
    2694:	73 9f       	mul	r23, r19
    2696:	f0 01       	movw	r30, r0
    2698:	82 9f       	mul	r24, r18
    269a:	e0 0d       	add	r30, r0
    269c:	f1 1d       	adc	r31, r1
    269e:	64 9f       	mul	r22, r20
    26a0:	e0 0d       	add	r30, r0
    26a2:	f1 1d       	adc	r31, r1
    26a4:	92 9f       	mul	r25, r18
    26a6:	f0 0d       	add	r31, r0
    26a8:	83 9f       	mul	r24, r19
    26aa:	f0 0d       	add	r31, r0
    26ac:	74 9f       	mul	r23, r20
    26ae:	f0 0d       	add	r31, r0
    26b0:	65 9f       	mul	r22, r21
    26b2:	f0 0d       	add	r31, r0
    26b4:	99 27       	eor	r25, r25
    26b6:	72 9f       	mul	r23, r18
    26b8:	b0 0d       	add	r27, r0
    26ba:	e1 1d       	adc	r30, r1
    26bc:	f9 1f       	adc	r31, r25
    26be:	63 9f       	mul	r22, r19
    26c0:	b0 0d       	add	r27, r0
    26c2:	e1 1d       	adc	r30, r1
    26c4:	f9 1f       	adc	r31, r25
    26c6:	bd 01       	movw	r22, r26
    26c8:	cf 01       	movw	r24, r30
    26ca:	11 24       	eor	r1, r1
    26cc:	08 95       	ret

000026ce <__udivmodqi4>:
    26ce:	99 1b       	sub	r25, r25
    26d0:	79 e0       	ldi	r23, 0x09	; 9
    26d2:	04 c0       	rjmp	.+8      	; 0x26dc <__udivmodqi4_ep>

000026d4 <__udivmodqi4_loop>:
    26d4:	99 1f       	adc	r25, r25
    26d6:	96 17       	cp	r25, r22
    26d8:	08 f0       	brcs	.+2      	; 0x26dc <__udivmodqi4_ep>
    26da:	96 1b       	sub	r25, r22

000026dc <__udivmodqi4_ep>:
    26dc:	88 1f       	adc	r24, r24
    26de:	7a 95       	dec	r23
    26e0:	c9 f7       	brne	.-14     	; 0x26d4 <__udivmodqi4_loop>
    26e2:	80 95       	com	r24
    26e4:	08 95       	ret

000026e6 <__udivmodhi4>:
    26e6:	aa 1b       	sub	r26, r26
    26e8:	bb 1b       	sub	r27, r27
    26ea:	51 e1       	ldi	r21, 0x11	; 17
    26ec:	07 c0       	rjmp	.+14     	; 0x26fc <__udivmodhi4_ep>

000026ee <__udivmodhi4_loop>:
    26ee:	aa 1f       	adc	r26, r26
    26f0:	bb 1f       	adc	r27, r27
    26f2:	a6 17       	cp	r26, r22
    26f4:	b7 07       	cpc	r27, r23
    26f6:	10 f0       	brcs	.+4      	; 0x26fc <__udivmodhi4_ep>
    26f8:	a6 1b       	sub	r26, r22
    26fa:	b7 0b       	sbc	r27, r23

000026fc <__udivmodhi4_ep>:
    26fc:	88 1f       	adc	r24, r24
    26fe:	99 1f       	adc	r25, r25
    2700:	5a 95       	dec	r21
    2702:	a9 f7       	brne	.-22     	; 0x26ee <__udivmodhi4_loop>
    2704:	80 95       	com	r24
    2706:	90 95       	com	r25
    2708:	bc 01       	movw	r22, r24
    270a:	cd 01       	movw	r24, r26
    270c:	08 95       	ret

0000270e <__udivmodsi4>:
    270e:	a1 e2       	ldi	r26, 0x21	; 33
    2710:	1a 2e       	mov	r1, r26
    2712:	aa 1b       	sub	r26, r26
    2714:	bb 1b       	sub	r27, r27
    2716:	fd 01       	movw	r30, r26
    2718:	0d c0       	rjmp	.+26     	; 0x2734 <__udivmodsi4_ep>

0000271a <__udivmodsi4_loop>:
    271a:	aa 1f       	adc	r26, r26
    271c:	bb 1f       	adc	r27, r27
    271e:	ee 1f       	adc	r30, r30
    2720:	ff 1f       	adc	r31, r31
    2722:	a2 17       	cp	r26, r18
    2724:	b3 07       	cpc	r27, r19
    2726:	e4 07       	cpc	r30, r20
    2728:	f5 07       	cpc	r31, r21
    272a:	20 f0       	brcs	.+8      	; 0x2734 <__udivmodsi4_ep>
    272c:	a2 1b       	sub	r26, r18
    272e:	b3 0b       	sbc	r27, r19
    2730:	e4 0b       	sbc	r30, r20
    2732:	f5 0b       	sbc	r31, r21

00002734 <__udivmodsi4_ep>:
    2734:	66 1f       	adc	r22, r22
    2736:	77 1f       	adc	r23, r23
    2738:	88 1f       	adc	r24, r24
    273a:	99 1f       	adc	r25, r25
    273c:	1a 94       	dec	r1
    273e:	69 f7       	brne	.-38     	; 0x271a <__udivmodsi4_loop>
    2740:	60 95       	com	r22
    2742:	70 95       	com	r23
    2744:	80 95       	com	r24
    2746:	90 95       	com	r25
    2748:	9b 01       	movw	r18, r22
    274a:	ac 01       	movw	r20, r24
    274c:	bd 01       	movw	r22, r26
    274e:	cf 01       	movw	r24, r30
    2750:	08 95       	ret

00002752 <__divmodsi4>:
    2752:	97 fb       	bst	r25, 7
    2754:	09 2e       	mov	r0, r25
    2756:	05 26       	eor	r0, r21
    2758:	0e d0       	rcall	.+28     	; 0x2776 <__divmodsi4_neg1>
    275a:	57 fd       	sbrc	r21, 7
    275c:	04 d0       	rcall	.+8      	; 0x2766 <__divmodsi4_neg2>
    275e:	d7 df       	rcall	.-82     	; 0x270e <__udivmodsi4>
    2760:	0a d0       	rcall	.+20     	; 0x2776 <__divmodsi4_neg1>
    2762:	00 1c       	adc	r0, r0
    2764:	38 f4       	brcc	.+14     	; 0x2774 <__divmodsi4_exit>

00002766 <__divmodsi4_neg2>:
    2766:	50 95       	com	r21
    2768:	40 95       	com	r20
    276a:	30 95       	com	r19
    276c:	21 95       	neg	r18
    276e:	3f 4f       	sbci	r19, 0xFF	; 255
    2770:	4f 4f       	sbci	r20, 0xFF	; 255
    2772:	5f 4f       	sbci	r21, 0xFF	; 255

00002774 <__divmodsi4_exit>:
    2774:	08 95       	ret

00002776 <__divmodsi4_neg1>:
    2776:	f6 f7       	brtc	.-4      	; 0x2774 <__divmodsi4_exit>
    2778:	90 95       	com	r25
    277a:	80 95       	com	r24
    277c:	70 95       	com	r23
    277e:	61 95       	neg	r22
    2780:	7f 4f       	sbci	r23, 0xFF	; 255
    2782:	8f 4f       	sbci	r24, 0xFF	; 255
    2784:	9f 4f       	sbci	r25, 0xFF	; 255
    2786:	08 95       	ret

00002788 <__prologue_saves__>:
    2788:	2f 92       	push	r2
    278a:	3f 92       	push	r3
    278c:	4f 92       	push	r4
    278e:	5f 92       	push	r5
    2790:	6f 92       	push	r6
    2792:	7f 92       	push	r7
    2794:	8f 92       	push	r8
    2796:	9f 92       	push	r9
    2798:	af 92       	push	r10
    279a:	bf 92       	push	r11
    279c:	cf 92       	push	r12
    279e:	df 92       	push	r13
    27a0:	ef 92       	push	r14
    27a2:	ff 92       	push	r15
    27a4:	0f 93       	push	r16
    27a6:	1f 93       	push	r17
    27a8:	cf 93       	push	r28
    27aa:	df 93       	push	r29
    27ac:	cd b7       	in	r28, 0x3d	; 61
    27ae:	de b7       	in	r29, 0x3e	; 62
    27b0:	ca 1b       	sub	r28, r26
    27b2:	db 0b       	sbc	r29, r27
    27b4:	0f b6       	in	r0, 0x3f	; 63
    27b6:	f8 94       	cli
    27b8:	de bf       	out	0x3e, r29	; 62
    27ba:	0f be       	out	0x3f, r0	; 63
    27bc:	cd bf       	out	0x3d, r28	; 61
    27be:	09 94       	ijmp

000027c0 <__epilogue_restores__>:
    27c0:	2a 88       	ldd	r2, Y+18	; 0x12
    27c2:	39 88       	ldd	r3, Y+17	; 0x11
    27c4:	48 88       	ldd	r4, Y+16	; 0x10
    27c6:	5f 84       	ldd	r5, Y+15	; 0x0f
    27c8:	6e 84       	ldd	r6, Y+14	; 0x0e
    27ca:	7d 84       	ldd	r7, Y+13	; 0x0d
    27cc:	8c 84       	ldd	r8, Y+12	; 0x0c
    27ce:	9b 84       	ldd	r9, Y+11	; 0x0b
    27d0:	aa 84       	ldd	r10, Y+10	; 0x0a
    27d2:	b9 84       	ldd	r11, Y+9	; 0x09
    27d4:	c8 84       	ldd	r12, Y+8	; 0x08
    27d6:	df 80       	ldd	r13, Y+7	; 0x07
    27d8:	ee 80       	ldd	r14, Y+6	; 0x06
    27da:	fd 80       	ldd	r15, Y+5	; 0x05
    27dc:	0c 81       	ldd	r16, Y+4	; 0x04
    27de:	1b 81       	ldd	r17, Y+3	; 0x03
    27e0:	aa 81       	ldd	r26, Y+2	; 0x02
    27e2:	b9 81       	ldd	r27, Y+1	; 0x01
    27e4:	ce 0f       	add	r28, r30
    27e6:	d1 1d       	adc	r29, r1
    27e8:	0f b6       	in	r0, 0x3f	; 63
    27ea:	f8 94       	cli
    27ec:	de bf       	out	0x3e, r29	; 62
    27ee:	0f be       	out	0x3f, r0	; 63
    27f0:	cd bf       	out	0x3d, r28	; 61
    27f2:	ed 01       	movw	r28, r26
    27f4:	08 95       	ret

000027f6 <malloc>:
    27f6:	cf 93       	push	r28
    27f8:	df 93       	push	r29
    27fa:	ac 01       	movw	r20, r24
    27fc:	82 30       	cpi	r24, 0x02	; 2
    27fe:	91 05       	cpc	r25, r1
    2800:	10 f4       	brcc	.+4      	; 0x2806 <malloc+0x10>
    2802:	42 e0       	ldi	r20, 0x02	; 2
    2804:	50 e0       	ldi	r21, 0x00	; 0
    2806:	e0 91 d0 02 	lds	r30, 0x02D0
    280a:	f0 91 d1 02 	lds	r31, 0x02D1
    280e:	20 e0       	ldi	r18, 0x00	; 0
    2810:	30 e0       	ldi	r19, 0x00	; 0
    2812:	a0 e0       	ldi	r26, 0x00	; 0
    2814:	b0 e0       	ldi	r27, 0x00	; 0
    2816:	24 c0       	rjmp	.+72     	; 0x2860 <malloc+0x6a>
    2818:	80 81       	ld	r24, Z
    281a:	91 81       	ldd	r25, Z+1	; 0x01
    281c:	84 17       	cp	r24, r20
    281e:	95 07       	cpc	r25, r21
    2820:	d0 f0       	brcs	.+52     	; 0x2856 <malloc+0x60>
    2822:	84 17       	cp	r24, r20
    2824:	95 07       	cpc	r25, r21
    2826:	71 f4       	brne	.+28     	; 0x2844 <malloc+0x4e>
    2828:	82 81       	ldd	r24, Z+2	; 0x02
    282a:	93 81       	ldd	r25, Z+3	; 0x03
    282c:	10 97       	sbiw	r26, 0x00	; 0
    282e:	29 f0       	breq	.+10     	; 0x283a <malloc+0x44>
    2830:	13 96       	adiw	r26, 0x03	; 3
    2832:	9c 93       	st	X, r25
    2834:	8e 93       	st	-X, r24
    2836:	12 97       	sbiw	r26, 0x02	; 2
    2838:	2c c0       	rjmp	.+88     	; 0x2892 <malloc+0x9c>
    283a:	90 93 d1 02 	sts	0x02D1, r25
    283e:	80 93 d0 02 	sts	0x02D0, r24
    2842:	27 c0       	rjmp	.+78     	; 0x2892 <malloc+0x9c>
    2844:	21 15       	cp	r18, r1
    2846:	31 05       	cpc	r19, r1
    2848:	19 f0       	breq	.+6      	; 0x2850 <malloc+0x5a>
    284a:	82 17       	cp	r24, r18
    284c:	93 07       	cpc	r25, r19
    284e:	18 f4       	brcc	.+6      	; 0x2856 <malloc+0x60>
    2850:	9c 01       	movw	r18, r24
    2852:	bd 01       	movw	r22, r26
    2854:	ef 01       	movw	r28, r30
    2856:	92 81       	ldd	r25, Z+2	; 0x02
    2858:	83 81       	ldd	r24, Z+3	; 0x03
    285a:	df 01       	movw	r26, r30
    285c:	e9 2f       	mov	r30, r25
    285e:	f8 2f       	mov	r31, r24
    2860:	30 97       	sbiw	r30, 0x00	; 0
    2862:	d1 f6       	brne	.-76     	; 0x2818 <malloc+0x22>
    2864:	21 15       	cp	r18, r1
    2866:	31 05       	cpc	r19, r1
    2868:	f9 f0       	breq	.+62     	; 0x28a8 <malloc+0xb2>
    286a:	c9 01       	movw	r24, r18
    286c:	84 1b       	sub	r24, r20
    286e:	95 0b       	sbc	r25, r21
    2870:	84 30       	cpi	r24, 0x04	; 4
    2872:	91 05       	cpc	r25, r1
    2874:	80 f4       	brcc	.+32     	; 0x2896 <malloc+0xa0>
    2876:	8a 81       	ldd	r24, Y+2	; 0x02
    2878:	9b 81       	ldd	r25, Y+3	; 0x03
    287a:	61 15       	cp	r22, r1
    287c:	71 05       	cpc	r23, r1
    287e:	21 f0       	breq	.+8      	; 0x2888 <malloc+0x92>
    2880:	fb 01       	movw	r30, r22
    2882:	93 83       	std	Z+3, r25	; 0x03
    2884:	82 83       	std	Z+2, r24	; 0x02
    2886:	04 c0       	rjmp	.+8      	; 0x2890 <malloc+0x9a>
    2888:	90 93 d1 02 	sts	0x02D1, r25
    288c:	80 93 d0 02 	sts	0x02D0, r24
    2890:	fe 01       	movw	r30, r28
    2892:	32 96       	adiw	r30, 0x02	; 2
    2894:	42 c0       	rjmp	.+132    	; 0x291a <malloc+0x124>
    2896:	fe 01       	movw	r30, r28
    2898:	e8 0f       	add	r30, r24
    289a:	f9 1f       	adc	r31, r25
    289c:	41 93       	st	Z+, r20
    289e:	51 93       	st	Z+, r21
    28a0:	02 97       	sbiw	r24, 0x02	; 2
    28a2:	99 83       	std	Y+1, r25	; 0x01
    28a4:	88 83       	st	Y, r24
    28a6:	39 c0       	rjmp	.+114    	; 0x291a <malloc+0x124>
    28a8:	80 91 ce 02 	lds	r24, 0x02CE
    28ac:	90 91 cf 02 	lds	r25, 0x02CF
    28b0:	00 97       	sbiw	r24, 0x00	; 0
    28b2:	41 f4       	brne	.+16     	; 0x28c4 <malloc+0xce>
    28b4:	80 91 27 02 	lds	r24, 0x0227
    28b8:	90 91 28 02 	lds	r25, 0x0228
    28bc:	90 93 cf 02 	sts	0x02CF, r25
    28c0:	80 93 ce 02 	sts	0x02CE, r24
    28c4:	20 91 25 02 	lds	r18, 0x0225
    28c8:	30 91 26 02 	lds	r19, 0x0226
    28cc:	21 15       	cp	r18, r1
    28ce:	31 05       	cpc	r19, r1
    28d0:	41 f4       	brne	.+16     	; 0x28e2 <malloc+0xec>
    28d2:	2d b7       	in	r18, 0x3d	; 61
    28d4:	3e b7       	in	r19, 0x3e	; 62
    28d6:	80 91 29 02 	lds	r24, 0x0229
    28da:	90 91 2a 02 	lds	r25, 0x022A
    28de:	28 1b       	sub	r18, r24
    28e0:	39 0b       	sbc	r19, r25
    28e2:	e0 91 ce 02 	lds	r30, 0x02CE
    28e6:	f0 91 cf 02 	lds	r31, 0x02CF
    28ea:	e2 17       	cp	r30, r18
    28ec:	f3 07       	cpc	r31, r19
    28ee:	98 f4       	brcc	.+38     	; 0x2916 <malloc+0x120>
    28f0:	2e 1b       	sub	r18, r30
    28f2:	3f 0b       	sbc	r19, r31
    28f4:	24 17       	cp	r18, r20
    28f6:	35 07       	cpc	r19, r21
    28f8:	70 f0       	brcs	.+28     	; 0x2916 <malloc+0x120>
    28fa:	ca 01       	movw	r24, r20
    28fc:	02 96       	adiw	r24, 0x02	; 2
    28fe:	28 17       	cp	r18, r24
    2900:	39 07       	cpc	r19, r25
    2902:	48 f0       	brcs	.+18     	; 0x2916 <malloc+0x120>
    2904:	8e 0f       	add	r24, r30
    2906:	9f 1f       	adc	r25, r31
    2908:	90 93 cf 02 	sts	0x02CF, r25
    290c:	80 93 ce 02 	sts	0x02CE, r24
    2910:	41 93       	st	Z+, r20
    2912:	51 93       	st	Z+, r21
    2914:	02 c0       	rjmp	.+4      	; 0x291a <malloc+0x124>
    2916:	e0 e0       	ldi	r30, 0x00	; 0
    2918:	f0 e0       	ldi	r31, 0x00	; 0
    291a:	cf 01       	movw	r24, r30
    291c:	df 91       	pop	r29
    291e:	cf 91       	pop	r28
    2920:	08 95       	ret

00002922 <free>:
    2922:	0f 93       	push	r16
    2924:	1f 93       	push	r17
    2926:	cf 93       	push	r28
    2928:	df 93       	push	r29
    292a:	9c 01       	movw	r18, r24
    292c:	00 97       	sbiw	r24, 0x00	; 0
    292e:	09 f4       	brne	.+2      	; 0x2932 <free+0x10>
    2930:	8c c0       	rjmp	.+280    	; 0x2a4a <free+0x128>
    2932:	dc 01       	movw	r26, r24
    2934:	12 97       	sbiw	r26, 0x02	; 2
    2936:	13 96       	adiw	r26, 0x03	; 3
    2938:	1c 92       	st	X, r1
    293a:	1e 92       	st	-X, r1
    293c:	12 97       	sbiw	r26, 0x02	; 2
    293e:	60 91 d0 02 	lds	r22, 0x02D0
    2942:	70 91 d1 02 	lds	r23, 0x02D1
    2946:	61 15       	cp	r22, r1
    2948:	71 05       	cpc	r23, r1
    294a:	89 f4       	brne	.+34     	; 0x296e <free+0x4c>
    294c:	8d 91       	ld	r24, X+
    294e:	9c 91       	ld	r25, X
    2950:	11 97       	sbiw	r26, 0x01	; 1
    2952:	82 0f       	add	r24, r18
    2954:	93 1f       	adc	r25, r19
    2956:	20 91 ce 02 	lds	r18, 0x02CE
    295a:	30 91 cf 02 	lds	r19, 0x02CF
    295e:	28 17       	cp	r18, r24
    2960:	39 07       	cpc	r19, r25
    2962:	69 f5       	brne	.+90     	; 0x29be <free+0x9c>
    2964:	b0 93 cf 02 	sts	0x02CF, r27
    2968:	a0 93 ce 02 	sts	0x02CE, r26
    296c:	6e c0       	rjmp	.+220    	; 0x2a4a <free+0x128>
    296e:	fb 01       	movw	r30, r22
    2970:	40 e0       	ldi	r20, 0x00	; 0
    2972:	50 e0       	ldi	r21, 0x00	; 0
    2974:	01 c0       	rjmp	.+2      	; 0x2978 <free+0x56>
    2976:	fc 01       	movw	r30, r24
    2978:	ea 17       	cp	r30, r26
    297a:	fb 07       	cpc	r31, r27
    297c:	30 f4       	brcc	.+12     	; 0x298a <free+0x68>
    297e:	82 81       	ldd	r24, Z+2	; 0x02
    2980:	93 81       	ldd	r25, Z+3	; 0x03
    2982:	af 01       	movw	r20, r30
    2984:	00 97       	sbiw	r24, 0x00	; 0
    2986:	b9 f7       	brne	.-18     	; 0x2976 <free+0x54>
    2988:	1f c0       	rjmp	.+62     	; 0x29c8 <free+0xa6>
    298a:	e9 01       	movw	r28, r18
    298c:	22 97       	sbiw	r28, 0x02	; 2
    298e:	fb 83       	std	Y+3, r31	; 0x03
    2990:	ea 83       	std	Y+2, r30	; 0x02
    2992:	08 81       	ld	r16, Y
    2994:	19 81       	ldd	r17, Y+1	; 0x01
    2996:	c9 01       	movw	r24, r18
    2998:	80 0f       	add	r24, r16
    299a:	91 1f       	adc	r25, r17
    299c:	8e 17       	cp	r24, r30
    299e:	9f 07       	cpc	r25, r31
    29a0:	59 f4       	brne	.+22     	; 0x29b8 <free+0x96>
    29a2:	80 81       	ld	r24, Z
    29a4:	91 81       	ldd	r25, Z+1	; 0x01
    29a6:	80 0f       	add	r24, r16
    29a8:	91 1f       	adc	r25, r17
    29aa:	02 96       	adiw	r24, 0x02	; 2
    29ac:	99 83       	std	Y+1, r25	; 0x01
    29ae:	88 83       	st	Y, r24
    29b0:	82 81       	ldd	r24, Z+2	; 0x02
    29b2:	93 81       	ldd	r25, Z+3	; 0x03
    29b4:	9b 83       	std	Y+3, r25	; 0x03
    29b6:	8a 83       	std	Y+2, r24	; 0x02
    29b8:	41 15       	cp	r20, r1
    29ba:	51 05       	cpc	r21, r1
    29bc:	29 f4       	brne	.+10     	; 0x29c8 <free+0xa6>
    29be:	b0 93 d1 02 	sts	0x02D1, r27
    29c2:	a0 93 d0 02 	sts	0x02D0, r26
    29c6:	41 c0       	rjmp	.+130    	; 0x2a4a <free+0x128>
    29c8:	fa 01       	movw	r30, r20
    29ca:	b3 83       	std	Z+3, r27	; 0x03
    29cc:	a2 83       	std	Z+2, r26	; 0x02
    29ce:	c1 91       	ld	r28, Z+
    29d0:	d1 91       	ld	r29, Z+
    29d2:	ec 0f       	add	r30, r28
    29d4:	fd 1f       	adc	r31, r29
    29d6:	ae 17       	cp	r26, r30
    29d8:	bf 07       	cpc	r27, r31
    29da:	81 f4       	brne	.+32     	; 0x29fc <free+0xda>
    29dc:	f9 01       	movw	r30, r18
    29de:	92 91       	ld	r25, -Z
    29e0:	82 91       	ld	r24, -Z
    29e2:	8c 0f       	add	r24, r28
    29e4:	9d 1f       	adc	r25, r29
    29e6:	02 96       	adiw	r24, 0x02	; 2
    29e8:	da 01       	movw	r26, r20
    29ea:	11 96       	adiw	r26, 0x01	; 1
    29ec:	9c 93       	st	X, r25
    29ee:	8e 93       	st	-X, r24
    29f0:	82 81       	ldd	r24, Z+2	; 0x02
    29f2:	93 81       	ldd	r25, Z+3	; 0x03
    29f4:	13 96       	adiw	r26, 0x03	; 3
    29f6:	9c 93       	st	X, r25
    29f8:	8e 93       	st	-X, r24
    29fa:	12 97       	sbiw	r26, 0x02	; 2
    29fc:	e0 e0       	ldi	r30, 0x00	; 0
    29fe:	f0 e0       	ldi	r31, 0x00	; 0
    2a00:	02 c0       	rjmp	.+4      	; 0x2a06 <free+0xe4>
    2a02:	fb 01       	movw	r30, r22
    2a04:	bc 01       	movw	r22, r24
    2a06:	db 01       	movw	r26, r22
    2a08:	12 96       	adiw	r26, 0x02	; 2
    2a0a:	8d 91       	ld	r24, X+
    2a0c:	9c 91       	ld	r25, X
    2a0e:	13 97       	sbiw	r26, 0x03	; 3
    2a10:	00 97       	sbiw	r24, 0x00	; 0
    2a12:	b9 f7       	brne	.-18     	; 0x2a02 <free+0xe0>
    2a14:	cb 01       	movw	r24, r22
    2a16:	02 96       	adiw	r24, 0x02	; 2
    2a18:	2d 91       	ld	r18, X+
    2a1a:	3c 91       	ld	r19, X
    2a1c:	11 97       	sbiw	r26, 0x01	; 1
    2a1e:	82 0f       	add	r24, r18
    2a20:	93 1f       	adc	r25, r19
    2a22:	20 91 ce 02 	lds	r18, 0x02CE
    2a26:	30 91 cf 02 	lds	r19, 0x02CF
    2a2a:	28 17       	cp	r18, r24
    2a2c:	39 07       	cpc	r19, r25
    2a2e:	69 f4       	brne	.+26     	; 0x2a4a <free+0x128>
    2a30:	30 97       	sbiw	r30, 0x00	; 0
    2a32:	29 f4       	brne	.+10     	; 0x2a3e <free+0x11c>
    2a34:	10 92 d1 02 	sts	0x02D1, r1
    2a38:	10 92 d0 02 	sts	0x02D0, r1
    2a3c:	02 c0       	rjmp	.+4      	; 0x2a42 <free+0x120>
    2a3e:	13 82       	std	Z+3, r1	; 0x03
    2a40:	12 82       	std	Z+2, r1	; 0x02
    2a42:	70 93 cf 02 	sts	0x02CF, r23
    2a46:	60 93 ce 02 	sts	0x02CE, r22
    2a4a:	df 91       	pop	r29
    2a4c:	cf 91       	pop	r28
    2a4e:	1f 91       	pop	r17
    2a50:	0f 91       	pop	r16
    2a52:	08 95       	ret

00002a54 <memcpy_P>:
    2a54:	fb 01       	movw	r30, r22
    2a56:	dc 01       	movw	r26, r24
    2a58:	02 c0       	rjmp	.+4      	; 0x2a5e <memcpy_P+0xa>
    2a5a:	05 90       	lpm	r0, Z+
    2a5c:	0d 92       	st	X+, r0
    2a5e:	41 50       	subi	r20, 0x01	; 1
    2a60:	50 40       	sbci	r21, 0x00	; 0
    2a62:	d8 f7       	brcc	.-10     	; 0x2a5a <memcpy_P+0x6>
    2a64:	08 95       	ret

00002a66 <_exit>:
    2a66:	f8 94       	cli

00002a68 <__stop_program>:
    2a68:	ff cf       	rjmp	.-2      	; 0x2a68 <__stop_program>
