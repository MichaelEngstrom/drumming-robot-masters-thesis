
DrummingRobot.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000206  00800100  000034be  00003552  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000034be  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000a8  00800306  00800306  00003758  2**0
                  ALLOC
  3 .stab         000062dc  00000000  00000000  00003758  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00007b74  00000000  00000000  00009a34  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001c0  00000000  00000000  000115a8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002103  00000000  00000000  00011768  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000049f  00000000  00000000  0001386b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ed5  00000000  00000000  00013d0a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000154  00000000  00000000  00014be0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000045c  00000000  00000000  00014d34  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000134b  00000000  00000000  00015190  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  000164db  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__ctors_end>
       4:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
       8:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
       c:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
      10:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
      14:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
      18:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
      1c:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
      20:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
      24:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
      28:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
      2c:	0c 94 2c 14 	jmp	0x2858	; 0x2858 <__vector_11>
      30:	0c 94 ef 10 	jmp	0x21de	; 0x21de <__vector_12>
      34:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
      38:	0c 94 fd 11 	jmp	0x23fa	; 0x23fa <__vector_14>
      3c:	0c 94 63 17 	jmp	0x2ec6	; 0x2ec6 <__vector_15>
      40:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
      44:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
      48:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
      4c:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
      50:	0c 94 e6 0d 	jmp	0x1bcc	; 0x1bcc <__vector_20>
      54:	0c 94 f9 0f 	jmp	0x1ff2	; 0x1ff2 <__vector_21>
      58:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
      5c:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
      60:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
      64:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
      68:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
      6c:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
      70:	0c 94 11 0e 	jmp	0x1c22	; 0x1c22 <__vector_28>
      74:	0c 94 22 10 	jmp	0x2044	; 0x2044 <__vector_29>
      78:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
      7c:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
      80:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
      84:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
      88:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
      8c:	e3 00       	.word	0x00e3	; ????
      8e:	91 03       	fmuls	r17, r17
      90:	91 03       	fmuls	r17, r17
      92:	91 03       	fmuls	r17, r17
      94:	91 03       	fmuls	r17, r17
      96:	91 03       	fmuls	r17, r17
      98:	91 03       	fmuls	r17, r17
      9a:	91 03       	fmuls	r17, r17
      9c:	91 03       	fmuls	r17, r17
      9e:	91 03       	fmuls	r17, r17
      a0:	91 03       	fmuls	r17, r17
      a2:	91 03       	fmuls	r17, r17
      a4:	91 03       	fmuls	r17, r17
      a6:	91 03       	fmuls	r17, r17
      a8:	91 03       	fmuls	r17, r17
      aa:	91 03       	fmuls	r17, r17
      ac:	91 03       	fmuls	r17, r17
      ae:	91 03       	fmuls	r17, r17
      b0:	91 03       	fmuls	r17, r17
      b2:	91 03       	fmuls	r17, r17
      b4:	91 03       	fmuls	r17, r17
      b6:	91 03       	fmuls	r17, r17
      b8:	91 03       	fmuls	r17, r17
      ba:	91 03       	fmuls	r17, r17
      bc:	91 03       	fmuls	r17, r17
      be:	91 03       	fmuls	r17, r17
      c0:	91 03       	fmuls	r17, r17
      c2:	91 03       	fmuls	r17, r17
      c4:	91 03       	fmuls	r17, r17
      c6:	91 03       	fmuls	r17, r17
      c8:	91 03       	fmuls	r17, r17
      ca:	91 03       	fmuls	r17, r17
      cc:	91 03       	fmuls	r17, r17
      ce:	91 03       	fmuls	r17, r17
      d0:	91 03       	fmuls	r17, r17
      d2:	91 03       	fmuls	r17, r17
      d4:	91 03       	fmuls	r17, r17
      d6:	91 03       	fmuls	r17, r17
      d8:	91 03       	fmuls	r17, r17
      da:	f0 00       	.word	0x00f0	; ????
      dc:	07 01       	movw	r0, r14
      de:	21 01       	movw	r4, r2
      e0:	3b 01       	movw	r6, r22
      e2:	55 01       	movw	r10, r10
      e4:	6f 01       	movw	r12, r30
      e6:	89 01       	movw	r16, r18
      e8:	a3 01       	movw	r20, r6
      ea:	bd 01       	movw	r22, r26
      ec:	d7 01       	movw	r26, r14
      ee:	f1 01       	movw	r30, r2
      f0:	0b 02       	muls	r16, r27
      f2:	25 02       	muls	r18, r21
      f4:	3f 02       	muls	r19, r31
      f6:	59 02       	muls	r21, r25
      f8:	73 02       	muls	r23, r19
      fa:	8d 02       	muls	r24, r29
      fc:	a7 02       	muls	r26, r23
      fe:	c1 02       	muls	r28, r17
     100:	db 02       	muls	r29, r27
     102:	f5 02       	muls	r31, r21
     104:	0f 03       	fmul	r16, r23
     106:	29 03       	fmul	r18, r17
     108:	43 03       	mulsu	r20, r19
     10a:	5d 03       	fmul	r21, r21
     10c:	77 03       	mulsu	r23, r23

0000010e <__c.2066>:
     10e:	52 6f 62 6f 74 73 20 52 75 6c 65 21 0d 0a 00 00     Robots Rule!....

0000011e <__ctors_end>:
     11e:	11 24       	eor	r1, r1
     120:	1f be       	out	0x3f, r1	; 63
     122:	cf ef       	ldi	r28, 0xFF	; 255
     124:	d0 e4       	ldi	r29, 0x40	; 64
     126:	de bf       	out	0x3e, r29	; 62
     128:	cd bf       	out	0x3d, r28	; 61

0000012a <__do_copy_data>:
     12a:	13 e0       	ldi	r17, 0x03	; 3
     12c:	a0 e0       	ldi	r26, 0x00	; 0
     12e:	b1 e0       	ldi	r27, 0x01	; 1
     130:	ee eb       	ldi	r30, 0xBE	; 190
     132:	f4 e3       	ldi	r31, 0x34	; 52
     134:	00 e0       	ldi	r16, 0x00	; 0
     136:	0b bf       	out	0x3b, r16	; 59
     138:	02 c0       	rjmp	.+4      	; 0x13e <__do_copy_data+0x14>
     13a:	07 90       	elpm	r0, Z+
     13c:	0d 92       	st	X+, r0
     13e:	a6 30       	cpi	r26, 0x06	; 6
     140:	b1 07       	cpc	r27, r17
     142:	d9 f7       	brne	.-10     	; 0x13a <__do_copy_data+0x10>

00000144 <__do_clear_bss>:
     144:	13 e0       	ldi	r17, 0x03	; 3
     146:	a6 e0       	ldi	r26, 0x06	; 6
     148:	b3 e0       	ldi	r27, 0x03	; 3
     14a:	01 c0       	rjmp	.+2      	; 0x14e <.do_clear_bss_start>

0000014c <.do_clear_bss_loop>:
     14c:	1d 92       	st	X+, r1

0000014e <.do_clear_bss_start>:
     14e:	ae 3a       	cpi	r26, 0xAE	; 174
     150:	b1 07       	cpc	r27, r17
     152:	e1 f7       	brne	.-8      	; 0x14c <.do_clear_bss_loop>
     154:	0e 94 b6 03 	call	0x76c	; 0x76c <main>
     158:	0c 94 5d 1a 	jmp	0x34ba	; 0x34ba <_exit>

0000015c <__bad_interrupt>:
     15c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000160 <_pololu_atmel_studio_6_workaround>:
#define _POLOLU_ATMEL_STUDIO_6_WORKAROUND

static void __attribute__((used)) _pololu_atmel_studio_6_workaround(void)
{
    static volatile unsigned char w = 1;
    w++;
     160:	80 91 b4 02 	lds	r24, 0x02B4
     164:	8f 5f       	subi	r24, 0xFF	; 255
     166:	80 93 b4 02 	sts	0x02B4, r24
}
     16a:	08 95       	ret

0000016c <wait_for_sending_to_finish>:
// finish transmitting on USB_COMM.  We must call this before modifying
// send_buffer or trying to send more bytes, because otherwise we could
// corrupt an existing transmission.
void wait_for_sending_to_finish()
{
	while(!serial_send_buffer_empty(USB_COMM))
     16c:	02 c0       	rjmp	.+4      	; 0x172 <wait_for_sending_to_finish+0x6>
		serial_check();		// USB_COMM port is always in SERIAL_CHECK mode
     16e:	0e 94 c0 0f 	call	0x1f80	; 0x1f80 <serial_check>
// finish transmitting on USB_COMM.  We must call this before modifying
// send_buffer or trying to send more bytes, because otherwise we could
// corrupt an existing transmission.
void wait_for_sending_to_finish()
{
	while(!serial_send_buffer_empty(USB_COMM))
     172:	82 e0       	ldi	r24, 0x02	; 2
     174:	0e 94 ea 0b 	call	0x17d4	; 0x17d4 <serial_send_buffer_empty>
     178:	88 23       	and	r24, r24
     17a:	c9 f3       	breq	.-14     	; 0x16e <wait_for_sending_to_finish+0x2>
		serial_check();		// USB_COMM port is always in SERIAL_CHECK mode
}
     17c:	08 95       	ret

0000017e <process_received_byte>:

// process_received_byte: Responds to a byte that has been received on
// USB_COMM.  If you are writing your own serial program, you can
// replace all the code in this function with your own custom behaviors.
void process_received_byte(char byte)
{
     17e:	cf 93       	push	r28
     180:	c8 2f       	mov	r28, r24
	clear();		// clear LCD
     182:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <clear>
	print("Byte Received");
     186:	80 e0       	ldi	r24, 0x00	; 0
     188:	91 e0       	ldi	r25, 0x01	; 1
     18a:	0e 94 14 0b 	call	0x1628	; 0x1628 <print>
	lcd_goto_xy(0, 1);	// go to start of second LCD row
     18e:	80 e0       	ldi	r24, 0x00	; 0
     190:	61 e0       	ldi	r22, 0x01	; 1
     192:	0e 94 94 0b 	call	0x1728	; 0x1728 <lcd_goto_xy>
	print("RX: ");
     196:	8e e0       	ldi	r24, 0x0E	; 14
     198:	91 e0       	ldi	r25, 0x01	; 1
     19a:	0e 94 14 0b 	call	0x1628	; 0x1628 <print>
	delay_ms(750);
     19e:	8e ee       	ldi	r24, 0xEE	; 238
     1a0:	92 e0       	ldi	r25, 0x02	; 2
     1a2:	0e 94 74 14 	call	0x28e8	; 0x28e8 <delay_ms>
/*	
byte = '3';*/
	switch(byte)
     1a6:	8c 2f       	mov	r24, r28
     1a8:	90 e0       	ldi	r25, 0x00	; 0
     1aa:	ca 97       	sbiw	r24, 0x3a	; 58
     1ac:	81 34       	cpi	r24, 0x41	; 65
     1ae:	91 05       	cpc	r25, r1
     1b0:	08 f0       	brcs	.+2      	; 0x1b4 <process_received_byte+0x36>
     1b2:	b7 c2       	rjmp	.+1390   	; 0x722 <process_received_byte+0x5a4>
     1b4:	8a 5b       	subi	r24, 0xBA	; 186
     1b6:	9f 4f       	sbci	r25, 0xFF	; 255
     1b8:	fc 01       	movw	r30, r24
     1ba:	ee 0f       	add	r30, r30
     1bc:	ff 1f       	adc	r31, r31
     1be:	05 90       	lpm	r0, Z+
     1c0:	f4 91       	lpm	r31, Z
     1c2:	e0 2d       	mov	r30, r0
     1c4:	09 94       	ijmp
		// State Machine-style setup for incoming Serial values; expecting ':::'
		// then single byte over Serial connection. Increment 'byte_counter'
		// for each ':' until we have three, then next Serial byte is valid.
		// Single byte is BPM with granularity of 6 from range 60-120.
		case ':':
			byte_counter += 1;
     1c6:	80 91 06 03 	lds	r24, 0x0306
     1ca:	90 91 07 03 	lds	r25, 0x0307
     1ce:	01 96       	adiw	r24, 0x01	; 1
     1d0:	90 93 07 03 	sts	0x0307, r25
     1d4:	80 93 06 03 	sts	0x0306, r24
			print_character(byte);
     1d8:	8a e3       	ldi	r24, 0x3A	; 58
     1da:	0e 94 7e 0a 	call	0x14fc	; 0x14fc <print_character>
			break;
     1de:	a5 c2       	rjmp	.+1354   	; 0x72a <process_received_byte+0x5ac>
			
		case 'a':
			test = 0;
     1e0:	10 92 0b 03 	sts	0x030B, r1
     1e4:	10 92 0a 03 	sts	0x030A, r1
			print_long(test);
     1e8:	60 e0       	ldi	r22, 0x00	; 0
     1ea:	70 e0       	ldi	r23, 0x00	; 0
     1ec:	cb 01       	movw	r24, r22
     1ee:	0e 94 71 0b 	call	0x16e2	; 0x16e2 <print_long>
			delay_ms(100);
     1f2:	84 e6       	ldi	r24, 0x64	; 100
     1f4:	90 e0       	ldi	r25, 0x00	; 0
     1f6:	0e 94 74 14 	call	0x28e8	; 0x28e8 <delay_ms>
			byte_counter += 1;
     1fa:	80 91 06 03 	lds	r24, 0x0306
     1fe:	90 91 07 03 	lds	r25, 0x0307
     202:	01 96       	adiw	r24, 0x01	; 1
     204:	90 93 07 03 	sts	0x0307, r25
     208:	80 93 06 03 	sts	0x0306, r24
			break;
     20c:	8e c2       	rjmp	.+1308   	; 0x72a <process_received_byte+0x5ac>
			
		case 'b':
			test = 1;
     20e:	81 e0       	ldi	r24, 0x01	; 1
     210:	90 e0       	ldi	r25, 0x00	; 0
     212:	90 93 0b 03 	sts	0x030B, r25
     216:	80 93 0a 03 	sts	0x030A, r24
			print_long(test);
     21a:	61 e0       	ldi	r22, 0x01	; 1
     21c:	70 e0       	ldi	r23, 0x00	; 0
     21e:	80 e0       	ldi	r24, 0x00	; 0
     220:	90 e0       	ldi	r25, 0x00	; 0
     222:	0e 94 71 0b 	call	0x16e2	; 0x16e2 <print_long>
			delay_ms(100);
     226:	84 e6       	ldi	r24, 0x64	; 100
     228:	90 e0       	ldi	r25, 0x00	; 0
     22a:	0e 94 74 14 	call	0x28e8	; 0x28e8 <delay_ms>
			byte_counter += 1;
     22e:	80 91 06 03 	lds	r24, 0x0306
     232:	90 91 07 03 	lds	r25, 0x0307
     236:	01 96       	adiw	r24, 0x01	; 1
     238:	90 93 07 03 	sts	0x0307, r25
     23c:	80 93 06 03 	sts	0x0306, r24
			break;
     240:	74 c2       	rjmp	.+1256   	; 0x72a <process_received_byte+0x5ac>
						
		case 'c':
			test = 2;
     242:	82 e0       	ldi	r24, 0x02	; 2
     244:	90 e0       	ldi	r25, 0x00	; 0
     246:	90 93 0b 03 	sts	0x030B, r25
     24a:	80 93 0a 03 	sts	0x030A, r24
			print_long(test);
     24e:	62 e0       	ldi	r22, 0x02	; 2
     250:	70 e0       	ldi	r23, 0x00	; 0
     252:	80 e0       	ldi	r24, 0x00	; 0
     254:	90 e0       	ldi	r25, 0x00	; 0
     256:	0e 94 71 0b 	call	0x16e2	; 0x16e2 <print_long>
			delay_ms(100);
     25a:	84 e6       	ldi	r24, 0x64	; 100
     25c:	90 e0       	ldi	r25, 0x00	; 0
     25e:	0e 94 74 14 	call	0x28e8	; 0x28e8 <delay_ms>
			byte_counter += 1;
     262:	80 91 06 03 	lds	r24, 0x0306
     266:	90 91 07 03 	lds	r25, 0x0307
     26a:	01 96       	adiw	r24, 0x01	; 1
     26c:	90 93 07 03 	sts	0x0307, r25
     270:	80 93 06 03 	sts	0x0306, r24
			break;
     274:	5a c2       	rjmp	.+1204   	; 0x72a <process_received_byte+0x5ac>
									
		case 'd':
			test = 3;
     276:	83 e0       	ldi	r24, 0x03	; 3
     278:	90 e0       	ldi	r25, 0x00	; 0
     27a:	90 93 0b 03 	sts	0x030B, r25
     27e:	80 93 0a 03 	sts	0x030A, r24
			print_long(test);
     282:	63 e0       	ldi	r22, 0x03	; 3
     284:	70 e0       	ldi	r23, 0x00	; 0
     286:	80 e0       	ldi	r24, 0x00	; 0
     288:	90 e0       	ldi	r25, 0x00	; 0
     28a:	0e 94 71 0b 	call	0x16e2	; 0x16e2 <print_long>
			delay_ms(100);
     28e:	84 e6       	ldi	r24, 0x64	; 100
     290:	90 e0       	ldi	r25, 0x00	; 0
     292:	0e 94 74 14 	call	0x28e8	; 0x28e8 <delay_ms>
			byte_counter += 1;
     296:	80 91 06 03 	lds	r24, 0x0306
     29a:	90 91 07 03 	lds	r25, 0x0307
     29e:	01 96       	adiw	r24, 0x01	; 1
     2a0:	90 93 07 03 	sts	0x0307, r25
     2a4:	80 93 06 03 	sts	0x0306, r24
			break;
     2a8:	40 c2       	rjmp	.+1152   	; 0x72a <process_received_byte+0x5ac>
			
		case 'e':
			test = 4;
     2aa:	84 e0       	ldi	r24, 0x04	; 4
     2ac:	90 e0       	ldi	r25, 0x00	; 0
     2ae:	90 93 0b 03 	sts	0x030B, r25
     2b2:	80 93 0a 03 	sts	0x030A, r24
			print_long(test);
     2b6:	64 e0       	ldi	r22, 0x04	; 4
     2b8:	70 e0       	ldi	r23, 0x00	; 0
     2ba:	80 e0       	ldi	r24, 0x00	; 0
     2bc:	90 e0       	ldi	r25, 0x00	; 0
     2be:	0e 94 71 0b 	call	0x16e2	; 0x16e2 <print_long>
			delay_ms(100);
     2c2:	84 e6       	ldi	r24, 0x64	; 100
     2c4:	90 e0       	ldi	r25, 0x00	; 0
     2c6:	0e 94 74 14 	call	0x28e8	; 0x28e8 <delay_ms>
			byte_counter += 1;
     2ca:	80 91 06 03 	lds	r24, 0x0306
     2ce:	90 91 07 03 	lds	r25, 0x0307
     2d2:	01 96       	adiw	r24, 0x01	; 1
     2d4:	90 93 07 03 	sts	0x0307, r25
     2d8:	80 93 06 03 	sts	0x0306, r24
			break;
     2dc:	26 c2       	rjmp	.+1100   	; 0x72a <process_received_byte+0x5ac>
		
		case 'f':
			test = 5;
     2de:	85 e0       	ldi	r24, 0x05	; 5
     2e0:	90 e0       	ldi	r25, 0x00	; 0
     2e2:	90 93 0b 03 	sts	0x030B, r25
     2e6:	80 93 0a 03 	sts	0x030A, r24
			print_long(test);
     2ea:	65 e0       	ldi	r22, 0x05	; 5
     2ec:	70 e0       	ldi	r23, 0x00	; 0
     2ee:	80 e0       	ldi	r24, 0x00	; 0
     2f0:	90 e0       	ldi	r25, 0x00	; 0
     2f2:	0e 94 71 0b 	call	0x16e2	; 0x16e2 <print_long>
			delay_ms(100);
     2f6:	84 e6       	ldi	r24, 0x64	; 100
     2f8:	90 e0       	ldi	r25, 0x00	; 0
     2fa:	0e 94 74 14 	call	0x28e8	; 0x28e8 <delay_ms>
			byte_counter += 1;
     2fe:	80 91 06 03 	lds	r24, 0x0306
     302:	90 91 07 03 	lds	r25, 0x0307
     306:	01 96       	adiw	r24, 0x01	; 1
     308:	90 93 07 03 	sts	0x0307, r25
     30c:	80 93 06 03 	sts	0x0306, r24
			break;
     310:	0c c2       	rjmp	.+1048   	; 0x72a <process_received_byte+0x5ac>
		
		case 'g':
			test = 6;
     312:	86 e0       	ldi	r24, 0x06	; 6
     314:	90 e0       	ldi	r25, 0x00	; 0
     316:	90 93 0b 03 	sts	0x030B, r25
     31a:	80 93 0a 03 	sts	0x030A, r24
			print_long(test);
     31e:	66 e0       	ldi	r22, 0x06	; 6
     320:	70 e0       	ldi	r23, 0x00	; 0
     322:	80 e0       	ldi	r24, 0x00	; 0
     324:	90 e0       	ldi	r25, 0x00	; 0
     326:	0e 94 71 0b 	call	0x16e2	; 0x16e2 <print_long>
			delay_ms(100);
     32a:	84 e6       	ldi	r24, 0x64	; 100
     32c:	90 e0       	ldi	r25, 0x00	; 0
     32e:	0e 94 74 14 	call	0x28e8	; 0x28e8 <delay_ms>
			byte_counter += 1;
     332:	80 91 06 03 	lds	r24, 0x0306
     336:	90 91 07 03 	lds	r25, 0x0307
     33a:	01 96       	adiw	r24, 0x01	; 1
     33c:	90 93 07 03 	sts	0x0307, r25
     340:	80 93 06 03 	sts	0x0306, r24
			break;
     344:	f2 c1       	rjmp	.+996    	; 0x72a <process_received_byte+0x5ac>
		
		case 'h':
			test = 7;
     346:	87 e0       	ldi	r24, 0x07	; 7
     348:	90 e0       	ldi	r25, 0x00	; 0
     34a:	90 93 0b 03 	sts	0x030B, r25
     34e:	80 93 0a 03 	sts	0x030A, r24
			print_long(test);
     352:	67 e0       	ldi	r22, 0x07	; 7
     354:	70 e0       	ldi	r23, 0x00	; 0
     356:	80 e0       	ldi	r24, 0x00	; 0
     358:	90 e0       	ldi	r25, 0x00	; 0
     35a:	0e 94 71 0b 	call	0x16e2	; 0x16e2 <print_long>
			delay_ms(100);
     35e:	84 e6       	ldi	r24, 0x64	; 100
     360:	90 e0       	ldi	r25, 0x00	; 0
     362:	0e 94 74 14 	call	0x28e8	; 0x28e8 <delay_ms>
			byte_counter += 1;
     366:	80 91 06 03 	lds	r24, 0x0306
     36a:	90 91 07 03 	lds	r25, 0x0307
     36e:	01 96       	adiw	r24, 0x01	; 1
     370:	90 93 07 03 	sts	0x0307, r25
     374:	80 93 06 03 	sts	0x0306, r24
			break;
     378:	d8 c1       	rjmp	.+944    	; 0x72a <process_received_byte+0x5ac>
		
		case 'i':
			test = 8;
     37a:	88 e0       	ldi	r24, 0x08	; 8
     37c:	90 e0       	ldi	r25, 0x00	; 0
     37e:	90 93 0b 03 	sts	0x030B, r25
     382:	80 93 0a 03 	sts	0x030A, r24
			print_long(test);
     386:	68 e0       	ldi	r22, 0x08	; 8
     388:	70 e0       	ldi	r23, 0x00	; 0
     38a:	80 e0       	ldi	r24, 0x00	; 0
     38c:	90 e0       	ldi	r25, 0x00	; 0
     38e:	0e 94 71 0b 	call	0x16e2	; 0x16e2 <print_long>
			delay_ms(100);
     392:	84 e6       	ldi	r24, 0x64	; 100
     394:	90 e0       	ldi	r25, 0x00	; 0
     396:	0e 94 74 14 	call	0x28e8	; 0x28e8 <delay_ms>
			byte_counter += 1;
     39a:	80 91 06 03 	lds	r24, 0x0306
     39e:	90 91 07 03 	lds	r25, 0x0307
     3a2:	01 96       	adiw	r24, 0x01	; 1
     3a4:	90 93 07 03 	sts	0x0307, r25
     3a8:	80 93 06 03 	sts	0x0306, r24
			break;
     3ac:	be c1       	rjmp	.+892    	; 0x72a <process_received_byte+0x5ac>
		
		case 'j':
			test = 9;
     3ae:	89 e0       	ldi	r24, 0x09	; 9
     3b0:	90 e0       	ldi	r25, 0x00	; 0
     3b2:	90 93 0b 03 	sts	0x030B, r25
     3b6:	80 93 0a 03 	sts	0x030A, r24
			print_long(test);
     3ba:	69 e0       	ldi	r22, 0x09	; 9
     3bc:	70 e0       	ldi	r23, 0x00	; 0
     3be:	80 e0       	ldi	r24, 0x00	; 0
     3c0:	90 e0       	ldi	r25, 0x00	; 0
     3c2:	0e 94 71 0b 	call	0x16e2	; 0x16e2 <print_long>
			delay_ms(100);
     3c6:	84 e6       	ldi	r24, 0x64	; 100
     3c8:	90 e0       	ldi	r25, 0x00	; 0
     3ca:	0e 94 74 14 	call	0x28e8	; 0x28e8 <delay_ms>
			byte_counter += 1;
     3ce:	80 91 06 03 	lds	r24, 0x0306
     3d2:	90 91 07 03 	lds	r25, 0x0307
     3d6:	01 96       	adiw	r24, 0x01	; 1
     3d8:	90 93 07 03 	sts	0x0307, r25
     3dc:	80 93 06 03 	sts	0x0306, r24
			break;
     3e0:	a4 c1       	rjmp	.+840    	; 0x72a <process_received_byte+0x5ac>
		
		case 'k':
			test = 10;
     3e2:	8a e0       	ldi	r24, 0x0A	; 10
     3e4:	90 e0       	ldi	r25, 0x00	; 0
     3e6:	90 93 0b 03 	sts	0x030B, r25
     3ea:	80 93 0a 03 	sts	0x030A, r24
			print_long(test);
     3ee:	6a e0       	ldi	r22, 0x0A	; 10
     3f0:	70 e0       	ldi	r23, 0x00	; 0
     3f2:	80 e0       	ldi	r24, 0x00	; 0
     3f4:	90 e0       	ldi	r25, 0x00	; 0
     3f6:	0e 94 71 0b 	call	0x16e2	; 0x16e2 <print_long>
			delay_ms(100);
     3fa:	84 e6       	ldi	r24, 0x64	; 100
     3fc:	90 e0       	ldi	r25, 0x00	; 0
     3fe:	0e 94 74 14 	call	0x28e8	; 0x28e8 <delay_ms>
			byte_counter += 1;
     402:	80 91 06 03 	lds	r24, 0x0306
     406:	90 91 07 03 	lds	r25, 0x0307
     40a:	01 96       	adiw	r24, 0x01	; 1
     40c:	90 93 07 03 	sts	0x0307, r25
     410:	80 93 06 03 	sts	0x0306, r24
			break;
     414:	8a c1       	rjmp	.+788    	; 0x72a <process_received_byte+0x5ac>
		
		case 'l':
			test = 11;
     416:	8b e0       	ldi	r24, 0x0B	; 11
     418:	90 e0       	ldi	r25, 0x00	; 0
     41a:	90 93 0b 03 	sts	0x030B, r25
     41e:	80 93 0a 03 	sts	0x030A, r24
			print_long(test);
     422:	6b e0       	ldi	r22, 0x0B	; 11
     424:	70 e0       	ldi	r23, 0x00	; 0
     426:	80 e0       	ldi	r24, 0x00	; 0
     428:	90 e0       	ldi	r25, 0x00	; 0
     42a:	0e 94 71 0b 	call	0x16e2	; 0x16e2 <print_long>
			delay_ms(100);
     42e:	84 e6       	ldi	r24, 0x64	; 100
     430:	90 e0       	ldi	r25, 0x00	; 0
     432:	0e 94 74 14 	call	0x28e8	; 0x28e8 <delay_ms>
			byte_counter += 1;
     436:	80 91 06 03 	lds	r24, 0x0306
     43a:	90 91 07 03 	lds	r25, 0x0307
     43e:	01 96       	adiw	r24, 0x01	; 1
     440:	90 93 07 03 	sts	0x0307, r25
     444:	80 93 06 03 	sts	0x0306, r24
			break;	
     448:	70 c1       	rjmp	.+736    	; 0x72a <process_received_byte+0x5ac>
			
		case 'm':
			test = 12;
     44a:	8c e0       	ldi	r24, 0x0C	; 12
     44c:	90 e0       	ldi	r25, 0x00	; 0
     44e:	90 93 0b 03 	sts	0x030B, r25
     452:	80 93 0a 03 	sts	0x030A, r24
			print_long(test);
     456:	6c e0       	ldi	r22, 0x0C	; 12
     458:	70 e0       	ldi	r23, 0x00	; 0
     45a:	80 e0       	ldi	r24, 0x00	; 0
     45c:	90 e0       	ldi	r25, 0x00	; 0
     45e:	0e 94 71 0b 	call	0x16e2	; 0x16e2 <print_long>
			delay_ms(100);
     462:	84 e6       	ldi	r24, 0x64	; 100
     464:	90 e0       	ldi	r25, 0x00	; 0
     466:	0e 94 74 14 	call	0x28e8	; 0x28e8 <delay_ms>
			byte_counter += 1;
     46a:	80 91 06 03 	lds	r24, 0x0306
     46e:	90 91 07 03 	lds	r25, 0x0307
     472:	01 96       	adiw	r24, 0x01	; 1
     474:	90 93 07 03 	sts	0x0307, r25
     478:	80 93 06 03 	sts	0x0306, r24
			break;
     47c:	56 c1       	rjmp	.+684    	; 0x72a <process_received_byte+0x5ac>
			
		case 'n':
			test = 13;
     47e:	8d e0       	ldi	r24, 0x0D	; 13
     480:	90 e0       	ldi	r25, 0x00	; 0
     482:	90 93 0b 03 	sts	0x030B, r25
     486:	80 93 0a 03 	sts	0x030A, r24
			print_long(test);
     48a:	6d e0       	ldi	r22, 0x0D	; 13
     48c:	70 e0       	ldi	r23, 0x00	; 0
     48e:	80 e0       	ldi	r24, 0x00	; 0
     490:	90 e0       	ldi	r25, 0x00	; 0
     492:	0e 94 71 0b 	call	0x16e2	; 0x16e2 <print_long>
			delay_ms(100);
     496:	84 e6       	ldi	r24, 0x64	; 100
     498:	90 e0       	ldi	r25, 0x00	; 0
     49a:	0e 94 74 14 	call	0x28e8	; 0x28e8 <delay_ms>
			byte_counter += 1;
     49e:	80 91 06 03 	lds	r24, 0x0306
     4a2:	90 91 07 03 	lds	r25, 0x0307
     4a6:	01 96       	adiw	r24, 0x01	; 1
     4a8:	90 93 07 03 	sts	0x0307, r25
     4ac:	80 93 06 03 	sts	0x0306, r24
			break;
     4b0:	3c c1       	rjmp	.+632    	; 0x72a <process_received_byte+0x5ac>
		
		case 'o':
			test = 14;
     4b2:	8e e0       	ldi	r24, 0x0E	; 14
     4b4:	90 e0       	ldi	r25, 0x00	; 0
     4b6:	90 93 0b 03 	sts	0x030B, r25
     4ba:	80 93 0a 03 	sts	0x030A, r24
			print_long(test);
     4be:	6e e0       	ldi	r22, 0x0E	; 14
     4c0:	70 e0       	ldi	r23, 0x00	; 0
     4c2:	80 e0       	ldi	r24, 0x00	; 0
     4c4:	90 e0       	ldi	r25, 0x00	; 0
     4c6:	0e 94 71 0b 	call	0x16e2	; 0x16e2 <print_long>
			delay_ms(100);
     4ca:	84 e6       	ldi	r24, 0x64	; 100
     4cc:	90 e0       	ldi	r25, 0x00	; 0
     4ce:	0e 94 74 14 	call	0x28e8	; 0x28e8 <delay_ms>
			byte_counter += 1;
     4d2:	80 91 06 03 	lds	r24, 0x0306
     4d6:	90 91 07 03 	lds	r25, 0x0307
     4da:	01 96       	adiw	r24, 0x01	; 1
     4dc:	90 93 07 03 	sts	0x0307, r25
     4e0:	80 93 06 03 	sts	0x0306, r24
			break;
     4e4:	22 c1       	rjmp	.+580    	; 0x72a <process_received_byte+0x5ac>
		
		case 'p':
			test = 15;
     4e6:	8f e0       	ldi	r24, 0x0F	; 15
     4e8:	90 e0       	ldi	r25, 0x00	; 0
     4ea:	90 93 0b 03 	sts	0x030B, r25
     4ee:	80 93 0a 03 	sts	0x030A, r24
			print_long(test);
     4f2:	6f e0       	ldi	r22, 0x0F	; 15
     4f4:	70 e0       	ldi	r23, 0x00	; 0
     4f6:	80 e0       	ldi	r24, 0x00	; 0
     4f8:	90 e0       	ldi	r25, 0x00	; 0
     4fa:	0e 94 71 0b 	call	0x16e2	; 0x16e2 <print_long>
			delay_ms(100);
     4fe:	84 e6       	ldi	r24, 0x64	; 100
     500:	90 e0       	ldi	r25, 0x00	; 0
     502:	0e 94 74 14 	call	0x28e8	; 0x28e8 <delay_ms>
			byte_counter += 1;
     506:	80 91 06 03 	lds	r24, 0x0306
     50a:	90 91 07 03 	lds	r25, 0x0307
     50e:	01 96       	adiw	r24, 0x01	; 1
     510:	90 93 07 03 	sts	0x0307, r25
     514:	80 93 06 03 	sts	0x0306, r24
			break;	
     518:	08 c1       	rjmp	.+528    	; 0x72a <process_received_byte+0x5ac>
			
		case 'q':
			test = 16;
     51a:	80 e1       	ldi	r24, 0x10	; 16
     51c:	90 e0       	ldi	r25, 0x00	; 0
     51e:	90 93 0b 03 	sts	0x030B, r25
     522:	80 93 0a 03 	sts	0x030A, r24
			print_long(test);
     526:	60 e1       	ldi	r22, 0x10	; 16
     528:	70 e0       	ldi	r23, 0x00	; 0
     52a:	80 e0       	ldi	r24, 0x00	; 0
     52c:	90 e0       	ldi	r25, 0x00	; 0
     52e:	0e 94 71 0b 	call	0x16e2	; 0x16e2 <print_long>
			delay_ms(100);
     532:	84 e6       	ldi	r24, 0x64	; 100
     534:	90 e0       	ldi	r25, 0x00	; 0
     536:	0e 94 74 14 	call	0x28e8	; 0x28e8 <delay_ms>
			byte_counter += 1;
     53a:	80 91 06 03 	lds	r24, 0x0306
     53e:	90 91 07 03 	lds	r25, 0x0307
     542:	01 96       	adiw	r24, 0x01	; 1
     544:	90 93 07 03 	sts	0x0307, r25
     548:	80 93 06 03 	sts	0x0306, r24
			break;
     54c:	ee c0       	rjmp	.+476    	; 0x72a <process_received_byte+0x5ac>
		
		case 'r':
			test = 17;
     54e:	81 e1       	ldi	r24, 0x11	; 17
     550:	90 e0       	ldi	r25, 0x00	; 0
     552:	90 93 0b 03 	sts	0x030B, r25
     556:	80 93 0a 03 	sts	0x030A, r24
			print_long(test);
     55a:	61 e1       	ldi	r22, 0x11	; 17
     55c:	70 e0       	ldi	r23, 0x00	; 0
     55e:	80 e0       	ldi	r24, 0x00	; 0
     560:	90 e0       	ldi	r25, 0x00	; 0
     562:	0e 94 71 0b 	call	0x16e2	; 0x16e2 <print_long>
			delay_ms(100);
     566:	84 e6       	ldi	r24, 0x64	; 100
     568:	90 e0       	ldi	r25, 0x00	; 0
     56a:	0e 94 74 14 	call	0x28e8	; 0x28e8 <delay_ms>
			byte_counter += 1;
     56e:	80 91 06 03 	lds	r24, 0x0306
     572:	90 91 07 03 	lds	r25, 0x0307
     576:	01 96       	adiw	r24, 0x01	; 1
     578:	90 93 07 03 	sts	0x0307, r25
     57c:	80 93 06 03 	sts	0x0306, r24
			break;
     580:	d4 c0       	rjmp	.+424    	; 0x72a <process_received_byte+0x5ac>
		
		case 's':
			test = 18;
     582:	82 e1       	ldi	r24, 0x12	; 18
     584:	90 e0       	ldi	r25, 0x00	; 0
     586:	90 93 0b 03 	sts	0x030B, r25
     58a:	80 93 0a 03 	sts	0x030A, r24
			print_long(test);
     58e:	62 e1       	ldi	r22, 0x12	; 18
     590:	70 e0       	ldi	r23, 0x00	; 0
     592:	80 e0       	ldi	r24, 0x00	; 0
     594:	90 e0       	ldi	r25, 0x00	; 0
     596:	0e 94 71 0b 	call	0x16e2	; 0x16e2 <print_long>
			delay_ms(100);
     59a:	84 e6       	ldi	r24, 0x64	; 100
     59c:	90 e0       	ldi	r25, 0x00	; 0
     59e:	0e 94 74 14 	call	0x28e8	; 0x28e8 <delay_ms>
			byte_counter += 1;
     5a2:	80 91 06 03 	lds	r24, 0x0306
     5a6:	90 91 07 03 	lds	r25, 0x0307
     5aa:	01 96       	adiw	r24, 0x01	; 1
     5ac:	90 93 07 03 	sts	0x0307, r25
     5b0:	80 93 06 03 	sts	0x0306, r24
			break;
     5b4:	ba c0       	rjmp	.+372    	; 0x72a <process_received_byte+0x5ac>
		
		case 't':
			test = 19;
     5b6:	83 e1       	ldi	r24, 0x13	; 19
     5b8:	90 e0       	ldi	r25, 0x00	; 0
     5ba:	90 93 0b 03 	sts	0x030B, r25
     5be:	80 93 0a 03 	sts	0x030A, r24
			print_long(test);
     5c2:	63 e1       	ldi	r22, 0x13	; 19
     5c4:	70 e0       	ldi	r23, 0x00	; 0
     5c6:	80 e0       	ldi	r24, 0x00	; 0
     5c8:	90 e0       	ldi	r25, 0x00	; 0
     5ca:	0e 94 71 0b 	call	0x16e2	; 0x16e2 <print_long>
			delay_ms(100);
     5ce:	84 e6       	ldi	r24, 0x64	; 100
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	0e 94 74 14 	call	0x28e8	; 0x28e8 <delay_ms>
			byte_counter += 1;
     5d6:	80 91 06 03 	lds	r24, 0x0306
     5da:	90 91 07 03 	lds	r25, 0x0307
     5de:	01 96       	adiw	r24, 0x01	; 1
     5e0:	90 93 07 03 	sts	0x0307, r25
     5e4:	80 93 06 03 	sts	0x0306, r24
			break;
     5e8:	a0 c0       	rjmp	.+320    	; 0x72a <process_received_byte+0x5ac>
			
		case 'u':
			test = 20;
     5ea:	84 e1       	ldi	r24, 0x14	; 20
     5ec:	90 e0       	ldi	r25, 0x00	; 0
     5ee:	90 93 0b 03 	sts	0x030B, r25
     5f2:	80 93 0a 03 	sts	0x030A, r24
			print_long(test);
     5f6:	64 e1       	ldi	r22, 0x14	; 20
     5f8:	70 e0       	ldi	r23, 0x00	; 0
     5fa:	80 e0       	ldi	r24, 0x00	; 0
     5fc:	90 e0       	ldi	r25, 0x00	; 0
     5fe:	0e 94 71 0b 	call	0x16e2	; 0x16e2 <print_long>
			delay_ms(100);
     602:	84 e6       	ldi	r24, 0x64	; 100
     604:	90 e0       	ldi	r25, 0x00	; 0
     606:	0e 94 74 14 	call	0x28e8	; 0x28e8 <delay_ms>
			byte_counter += 1;
     60a:	80 91 06 03 	lds	r24, 0x0306
     60e:	90 91 07 03 	lds	r25, 0x0307
     612:	01 96       	adiw	r24, 0x01	; 1
     614:	90 93 07 03 	sts	0x0307, r25
     618:	80 93 06 03 	sts	0x0306, r24
			break;
     61c:	86 c0       	rjmp	.+268    	; 0x72a <process_received_byte+0x5ac>
		
		case 'v':
			test = 21;
     61e:	85 e1       	ldi	r24, 0x15	; 21
     620:	90 e0       	ldi	r25, 0x00	; 0
     622:	90 93 0b 03 	sts	0x030B, r25
     626:	80 93 0a 03 	sts	0x030A, r24
			print_long(test);
     62a:	65 e1       	ldi	r22, 0x15	; 21
     62c:	70 e0       	ldi	r23, 0x00	; 0
     62e:	80 e0       	ldi	r24, 0x00	; 0
     630:	90 e0       	ldi	r25, 0x00	; 0
     632:	0e 94 71 0b 	call	0x16e2	; 0x16e2 <print_long>
			delay_ms(100);
     636:	84 e6       	ldi	r24, 0x64	; 100
     638:	90 e0       	ldi	r25, 0x00	; 0
     63a:	0e 94 74 14 	call	0x28e8	; 0x28e8 <delay_ms>
			byte_counter += 1;
     63e:	80 91 06 03 	lds	r24, 0x0306
     642:	90 91 07 03 	lds	r25, 0x0307
     646:	01 96       	adiw	r24, 0x01	; 1
     648:	90 93 07 03 	sts	0x0307, r25
     64c:	80 93 06 03 	sts	0x0306, r24
			break;
     650:	6c c0       	rjmp	.+216    	; 0x72a <process_received_byte+0x5ac>
		
		case 'w':
			test = 22;
     652:	86 e1       	ldi	r24, 0x16	; 22
     654:	90 e0       	ldi	r25, 0x00	; 0
     656:	90 93 0b 03 	sts	0x030B, r25
     65a:	80 93 0a 03 	sts	0x030A, r24
			print_long(test);
     65e:	66 e1       	ldi	r22, 0x16	; 22
     660:	70 e0       	ldi	r23, 0x00	; 0
     662:	80 e0       	ldi	r24, 0x00	; 0
     664:	90 e0       	ldi	r25, 0x00	; 0
     666:	0e 94 71 0b 	call	0x16e2	; 0x16e2 <print_long>
			delay_ms(100);
     66a:	84 e6       	ldi	r24, 0x64	; 100
     66c:	90 e0       	ldi	r25, 0x00	; 0
     66e:	0e 94 74 14 	call	0x28e8	; 0x28e8 <delay_ms>
			byte_counter += 1;
     672:	80 91 06 03 	lds	r24, 0x0306
     676:	90 91 07 03 	lds	r25, 0x0307
     67a:	01 96       	adiw	r24, 0x01	; 1
     67c:	90 93 07 03 	sts	0x0307, r25
     680:	80 93 06 03 	sts	0x0306, r24
			break;
     684:	52 c0       	rjmp	.+164    	; 0x72a <process_received_byte+0x5ac>
		
		case 'x':
			test = 23;
     686:	87 e1       	ldi	r24, 0x17	; 23
     688:	90 e0       	ldi	r25, 0x00	; 0
     68a:	90 93 0b 03 	sts	0x030B, r25
     68e:	80 93 0a 03 	sts	0x030A, r24
			print_long(test);
     692:	67 e1       	ldi	r22, 0x17	; 23
     694:	70 e0       	ldi	r23, 0x00	; 0
     696:	80 e0       	ldi	r24, 0x00	; 0
     698:	90 e0       	ldi	r25, 0x00	; 0
     69a:	0e 94 71 0b 	call	0x16e2	; 0x16e2 <print_long>
			delay_ms(100);
     69e:	84 e6       	ldi	r24, 0x64	; 100
     6a0:	90 e0       	ldi	r25, 0x00	; 0
     6a2:	0e 94 74 14 	call	0x28e8	; 0x28e8 <delay_ms>
			byte_counter += 1;
     6a6:	80 91 06 03 	lds	r24, 0x0306
     6aa:	90 91 07 03 	lds	r25, 0x0307
     6ae:	01 96       	adiw	r24, 0x01	; 1
     6b0:	90 93 07 03 	sts	0x0307, r25
     6b4:	80 93 06 03 	sts	0x0306, r24
			break;		
     6b8:	38 c0       	rjmp	.+112    	; 0x72a <process_received_byte+0x5ac>
						
		case 'y':
			test = 24;
     6ba:	88 e1       	ldi	r24, 0x18	; 24
     6bc:	90 e0       	ldi	r25, 0x00	; 0
     6be:	90 93 0b 03 	sts	0x030B, r25
     6c2:	80 93 0a 03 	sts	0x030A, r24
			print_long(test);
     6c6:	68 e1       	ldi	r22, 0x18	; 24
     6c8:	70 e0       	ldi	r23, 0x00	; 0
     6ca:	80 e0       	ldi	r24, 0x00	; 0
     6cc:	90 e0       	ldi	r25, 0x00	; 0
     6ce:	0e 94 71 0b 	call	0x16e2	; 0x16e2 <print_long>
			delay_ms(100);
     6d2:	84 e6       	ldi	r24, 0x64	; 100
     6d4:	90 e0       	ldi	r25, 0x00	; 0
     6d6:	0e 94 74 14 	call	0x28e8	; 0x28e8 <delay_ms>
			byte_counter += 1;
     6da:	80 91 06 03 	lds	r24, 0x0306
     6de:	90 91 07 03 	lds	r25, 0x0307
     6e2:	01 96       	adiw	r24, 0x01	; 1
     6e4:	90 93 07 03 	sts	0x0307, r25
     6e8:	80 93 06 03 	sts	0x0306, r24
			break;
     6ec:	1e c0       	rjmp	.+60     	; 0x72a <process_received_byte+0x5ac>
		
		case 'z':
			test = 25;
     6ee:	89 e1       	ldi	r24, 0x19	; 25
     6f0:	90 e0       	ldi	r25, 0x00	; 0
     6f2:	90 93 0b 03 	sts	0x030B, r25
     6f6:	80 93 0a 03 	sts	0x030A, r24
			print_long(test);
     6fa:	69 e1       	ldi	r22, 0x19	; 25
     6fc:	70 e0       	ldi	r23, 0x00	; 0
     6fe:	80 e0       	ldi	r24, 0x00	; 0
     700:	90 e0       	ldi	r25, 0x00	; 0
     702:	0e 94 71 0b 	call	0x16e2	; 0x16e2 <print_long>
			delay_ms(100);
     706:	84 e6       	ldi	r24, 0x64	; 100
     708:	90 e0       	ldi	r25, 0x00	; 0
     70a:	0e 94 74 14 	call	0x28e8	; 0x28e8 <delay_ms>
			byte_counter += 1;
     70e:	80 91 06 03 	lds	r24, 0x0306
     712:	90 91 07 03 	lds	r25, 0x0307
     716:	01 96       	adiw	r24, 0x01	; 1
     718:	90 93 07 03 	sts	0x0307, r25
     71c:	80 93 06 03 	sts	0x0306, r24
			break;
     720:	04 c0       	rjmp	.+8      	; 0x72a <process_received_byte+0x5ac>
			byte_counter += 1;
			break;
*/
		// Default is to place byte in 'send_buffer'
		default:
			wait_for_sending_to_finish();
     722:	0e 94 b6 00 	call	0x16c	; 0x16c <wait_for_sending_to_finish>
			send_buffer[0] = byte;// ^ 0x20;
     726:	c0 93 76 03 	sts	0x0376, r28
			//print(byte_counter);
			//delay_ms(400);
			
			break;
	}
}
     72a:	cf 91       	pop	r28
     72c:	08 95       	ret

0000072e <check_for_new_bytes_received>:

void check_for_new_bytes_received()
{
     72e:	cf 93       	push	r28
     730:	df 93       	push	r29
	while(serial_get_received_bytes(USB_COMM) != receive_buffer_position)
	{
		// Process the new byte that has just been received.
		process_received_byte(receive_buffer[receive_buffer_position]);
     732:	c4 e5       	ldi	r28, 0x54	; 84
     734:	d3 e0       	ldi	r29, 0x03	; 3
	}
}

void check_for_new_bytes_received()
{
	while(serial_get_received_bytes(USB_COMM) != receive_buffer_position)
     736:	10 c0       	rjmp	.+32     	; 0x758 <check_for_new_bytes_received+0x2a>
	{
		// Process the new byte that has just been received.
		process_received_byte(receive_buffer[receive_buffer_position]);
     738:	fe 01       	movw	r30, r28
     73a:	e9 0f       	add	r30, r25
     73c:	f1 1d       	adc	r31, r1
     73e:	80 81       	ld	r24, Z
     740:	0e 94 bf 00 	call	0x17e	; 0x17e <process_received_byte>

		// Increment receive_buffer_position, but wrap around when it gets to
		// the end of the buffer. 
		if (receive_buffer_position == sizeof(receive_buffer)-1)
     744:	80 91 0c 03 	lds	r24, 0x030C
     748:	8f 31       	cpi	r24, 0x1F	; 31
     74a:	19 f4       	brne	.+6      	; 0x752 <check_for_new_bytes_received+0x24>
		{
			receive_buffer_position = 0;
     74c:	10 92 0c 03 	sts	0x030C, r1
     750:	03 c0       	rjmp	.+6      	; 0x758 <check_for_new_bytes_received+0x2a>
		}
		else
		{
			receive_buffer_position++;
     752:	8f 5f       	subi	r24, 0xFF	; 255
     754:	80 93 0c 03 	sts	0x030C, r24
	}
}

void check_for_new_bytes_received()
{
	while(serial_get_received_bytes(USB_COMM) != receive_buffer_position)
     758:	82 e0       	ldi	r24, 0x02	; 2
     75a:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <serial_get_received_bytes>
     75e:	90 91 0c 03 	lds	r25, 0x030C
     762:	89 17       	cp	r24, r25
     764:	49 f7       	brne	.-46     	; 0x738 <check_for_new_bytes_received+0xa>
		else
		{
			receive_buffer_position++;
		}
	}
}
     766:	df 91       	pop	r29
     768:	cf 91       	pop	r28
     76a:	08 95       	ret

0000076c <main>:

int main()
{

	
	servos_start(demuxPins, sizeof(demuxPins));
     76c:	87 eb       	ldi	r24, 0xB7	; 183
     76e:	92 e0       	ldi	r25, 0x02	; 2
     770:	62 e0       	ldi	r22, 0x02	; 2
     772:	0e 94 c6 13 	call	0x278c	; 0x278c <servos_start>
	
	// Set the servo speed to 150.  This means that the pulse width
	// will change by at most 15 microseconds every 20 ms.  So it will
	// take 1.33 seconds to go from a pulse width of 1000 us to 2000 us.
	set_servo_speed(0, init_speed);
     776:	80 e0       	ldi	r24, 0x00	; 0
     778:	66 e9       	ldi	r22, 0x96	; 150
     77a:	70 e0       	ldi	r23, 0x00	; 0
     77c:	0e 94 21 14 	call	0x2842	; 0x2842 <set_servo_speed>
	set_servo_speed(1, init_speed);
     780:	81 e0       	ldi	r24, 0x01	; 1
     782:	66 e9       	ldi	r22, 0x96	; 150
     784:	70 e0       	ldi	r23, 0x00	; 0
     786:	0e 94 21 14 	call	0x2842	; 0x2842 <set_servo_speed>
	set_servo_speed(2, init_speed);
     78a:	82 e0       	ldi	r24, 0x02	; 2
     78c:	66 e9       	ldi	r22, 0x96	; 150
     78e:	70 e0       	ldi	r23, 0x00	; 0
     790:	0e 94 21 14 	call	0x2842	; 0x2842 <set_servo_speed>
	set_servo_speed(3, init_speed);
     794:	83 e0       	ldi	r24, 0x03	; 3
     796:	66 e9       	ldi	r22, 0x96	; 150
     798:	70 e0       	ldi	r23, 0x00	; 0
     79a:	0e 94 21 14 	call	0x2842	; 0x2842 <set_servo_speed>

	// Make all the servos go to a neutral position.
	set_servo_target(0, rt_shoulder_rot);	//right shoulder rotation
     79e:	80 e0       	ldi	r24, 0x00	; 0
     7a0:	60 e4       	ldi	r22, 0x40	; 64
     7a2:	76 e0       	ldi	r23, 0x06	; 6
     7a4:	0e 94 fa 13 	call	0x27f4	; 0x27f4 <set_servo_target>
	set_servo_target(1, rt_elbow);				//right elbow
     7a8:	81 e0       	ldi	r24, 0x01	; 1
     7aa:	68 e0       	ldi	r22, 0x08	; 8
     7ac:	77 e0       	ldi	r23, 0x07	; 7
     7ae:	0e 94 fa 13 	call	0x27f4	; 0x27f4 <set_servo_target>
	set_servo_target(2, lt_shoulder_rot);	//left shoulder rotation
     7b2:	82 e0       	ldi	r24, 0x02	; 2
     7b4:	60 eb       	ldi	r22, 0xB0	; 176
     7b6:	74 e0       	ldi	r23, 0x04	; 4
     7b8:	0e 94 fa 13 	call	0x27f4	; 0x27f4 <set_servo_target>
	set_servo_target(3, lt_elbow);			//left elbow
     7bc:	83 e0       	ldi	r24, 0x03	; 3
     7be:	68 e9       	ldi	r22, 0x98	; 152
     7c0:	78 e0       	ldi	r23, 0x08	; 8
     7c2:	0e 94 fa 13 	call	0x27f4	; 0x27f4 <set_servo_target>
	
	clear();	// clear the LCD
     7c6:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <clear>
	print("Robot Drummer");
     7ca:	83 e1       	ldi	r24, 0x13	; 19
     7cc:	91 e0       	ldi	r25, 0x01	; 1
     7ce:	0e 94 14 0b 	call	0x1628	; 0x1628 <print>
	lcd_goto_xy(0, 1);	// go to start of second LCD row
     7d2:	80 e0       	ldi	r24, 0x00	; 0
     7d4:	61 e0       	ldi	r22, 0x01	; 1
     7d6:	0e 94 94 0b 	call	0x1728	; 0x1728 <lcd_goto_xy>
	//print("or press Btn");
	print("Send BPM Mode");
     7da:	81 e2       	ldi	r24, 0x21	; 33
     7dc:	91 e0       	ldi	r25, 0x01	; 1
     7de:	0e 94 14 0b 	call	0x1628	; 0x1628 <print>
	
	delay_ms(2000);
     7e2:	80 ed       	ldi	r24, 0xD0	; 208
     7e4:	97 e0       	ldi	r25, 0x07	; 7
     7e6:	0e 94 74 14 	call	0x28e8	; 0x28e8 <delay_ms>

	// Set the baud rate to 9600 bits per second.  Each byte takes ten bit
	// times, so you can get at most 960 bytes per second at this speed.
	serial_set_baud_rate(USB_COMM, 9600);
     7ea:	82 e0       	ldi	r24, 0x02	; 2
     7ec:	40 e8       	ldi	r20, 0x80	; 128
     7ee:	55 e2       	ldi	r21, 0x25	; 37
     7f0:	60 e0       	ldi	r22, 0x00	; 0
     7f2:	70 e0       	ldi	r23, 0x00	; 0
     7f4:	0e 94 05 0f 	call	0x1e0a	; 0x1e0a <serial_set_baud_rate>

	// Start receiving bytes in the ring buffer.
	serial_receive_ring(USB_COMM, receive_buffer, sizeof(receive_buffer));
     7f8:	82 e0       	ldi	r24, 0x02	; 2
     7fa:	64 e5       	ldi	r22, 0x54	; 84
     7fc:	73 e0       	ldi	r23, 0x03	; 3
     7fe:	40 e2       	ldi	r20, 0x20	; 32
     800:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <serial_receive_ring>
		//Default mode of 60 BPM
		else
		{
			green_led(TOGGLE);
			clear();	// clear the LCD
			print("Robot Drummer");
     804:	0f 2e       	mov	r0, r31
     806:	f3 e1       	ldi	r31, 0x13	; 19
     808:	cf 2e       	mov	r12, r31
     80a:	f1 e0       	ldi	r31, 0x01	; 1
     80c:	df 2e       	mov	r13, r31
     80e:	f0 2d       	mov	r31, r0
			lcd_goto_xy(0, 1);	// go to start of second LCD row
			print("Default mode");
     810:	0f 2e       	mov	r0, r31
     812:	f7 e7       	ldi	r31, 0x77	; 119
     814:	af 2e       	mov	r10, r31
     816:	f2 e0       	ldi	r31, 0x02	; 2
     818:	bf 2e       	mov	r11, r31
     81a:	f0 2d       	mov	r31, r0
			
		}
		else if (test == 25)		// 25 = serial input 'z' = PAUSED
		{
			clear();				// clear the LCD
			print("PAUSED");
     81c:	0f 2e       	mov	r0, r31
     81e:	f0 e7       	ldi	r31, 0x70	; 112
     820:	4f 2e       	mov	r4, r31
     822:	f2 e0       	ldi	r31, 0x02	; 2
     824:	5f 2e       	mov	r5, r31
     826:	f0 2d       	mov	r31, r0
			lcd_goto_xy(0, 1);		// go to start of second LCD row
			print("mode: ");
     828:	cb e3       	ldi	r28, 0x3B	; 59
     82a:	d1 e0       	ldi	r29, 0x01	; 1
			
		}
		else if (test == 21)		// 21 = serial input 'v' = 112 BPM
		{
			clear();				// clear the LCD
			print("BPM = 112-114");
     82c:	0f 2e       	mov	r0, r31
     82e:	fc e3       	ldi	r31, 0x3C	; 60
     830:	2f 2e       	mov	r2, r31
     832:	f2 e0       	ldi	r31, 0x02	; 2
     834:	3f 2e       	mov	r3, r31
     836:	f0 2d       	mov	r31, r0
					
		}
		else if (test == 19)		// 19 = serial input 't' = 108 BPM
		{
			clear();				// clear the LCD
			print("BPM = 108-109");
     838:	0f 2e       	mov	r0, r31
     83a:	f0 e2       	ldi	r31, 0x20	; 32
     83c:	6f 2e       	mov	r6, r31
     83e:	f2 e0       	ldi	r31, 0x02	; 2
     840:	7f 2e       	mov	r7, r31
     842:	f0 2d       	mov	r31, r0
					
		}
		else if (test == 18)		// 18 = serial input 's' = 105 BPM
		{
			clear();				// clear the LCD
			print("BPM = 105-107");
     844:	0f 2e       	mov	r0, r31
     846:	f2 e1       	ldi	r31, 0x12	; 18
     848:	8f 2e       	mov	r8, r31
     84a:	f2 e0       	ldi	r31, 0x02	; 2
     84c:	9f 2e       	mov	r9, r31
     84e:	f0 2d       	mov	r31, r0
		// If the user presses the middle button, send "Robots Rule!"
		// and wait until the user releases the button.
		if (button_is_pressed(MIDDLE_BUTTON))
		{
			wait_for_sending_to_finish();
			memcpy_P(send_buffer, PSTR("Robots Rule!\r\n"), 12);
     850:	06 e7       	ldi	r16, 0x76	; 118
     852:	13 e0       	ldi	r17, 0x03	; 3
			serial_send(USB_COMM, send_buffer, 12);
			send_buffer[12] = 0;	// terminate the string
     854:	0f 2e       	mov	r0, r31
     856:	fc e0       	ldi	r31, 0x0C	; 12
     858:	ef 2e       	mov	r14, r31
     85a:	ff 24       	eor	r15, r15
     85c:	f0 2d       	mov	r31, r0
     85e:	e0 0e       	add	r14, r16
     860:	f1 1e       	adc	r15, r17
    while(1)
    {
		// USB_COMM is always in SERIAL_CHECK mode, so we need to call this
		// function often to make sure serial receptions and transmissions
		// occur.
		serial_check();
     862:	0e 94 c0 0f 	call	0x1f80	; 0x1f80 <serial_check>
		// Deal with any new bytes received unless we have a complete sample
		// of three ':' bytes, then 4th byte is desired BPM byte
		if (byte_counter < 4)
     866:	80 91 06 03 	lds	r24, 0x0306
     86a:	90 91 07 03 	lds	r25, 0x0307
     86e:	84 30       	cpi	r24, 0x04	; 4
     870:	91 05       	cpc	r25, r1
     872:	14 f4       	brge	.+4      	; 0x878 <main+0x10c>
		{
			check_for_new_bytes_received();
     874:	0e 94 97 03 	call	0x72e	; 0x72e <check_for_new_bytes_received>
		
		// The 'flipper2' variable in this section and the next makes sure that
		// the drumming arms alternate beats. Only one of the two drumming arms
		// strikes the drum per beat, and the other is up in the air ready to
		// strike on the next beat.
		if ( flipper2 % 2 != 0 )
     878:	80 91 08 03 	lds	r24, 0x0308
     87c:	80 ff       	sbrs	r24, 0
     87e:	26 c0       	rjmp	.+76     	; 0x8cc <main+0x160>
		{
			//set_servo_speed(0, servo_speed);
			set_servo_speed(1, servo_speed);
     880:	60 91 b9 02 	lds	r22, 0x02B9
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	70 e0       	ldi	r23, 0x00	; 0
     888:	0e 94 21 14 	call	0x2842	; 0x2842 <set_servo_speed>
			//set_servo_speed(2, servo_speed);
			set_servo_speed(3, servo_speed);
     88c:	60 91 b9 02 	lds	r22, 0x02B9
     890:	83 e0       	ldi	r24, 0x03	; 3
     892:	70 e0       	ldi	r23, 0x00	; 0
     894:	0e 94 21 14 	call	0x2842	; 0x2842 <set_servo_speed>

			// Make all the servos go to a neutral position.
			//set_servo_target(0, rt_shoulder_rot_lt);	//right shoulder rotation
			set_servo_target(1, rt_elbow_dn);				//right elbow
     898:	81 e0       	ldi	r24, 0x01	; 1
     89a:	6f ee       	ldi	r22, 0xEF	; 239
     89c:	76 e0       	ldi	r23, 0x06	; 6
     89e:	0e 94 fa 13 	call	0x27f4	; 0x27f4 <set_servo_target>
			//set_servo_target(2, lt_shoulder_rot_rt);	//left shoulder rotation
			set_servo_target(3, lt_elbow_up);			//left elbow
     8a2:	83 e0       	ldi	r24, 0x03	; 3
     8a4:	6c e6       	ldi	r22, 0x6C	; 108
     8a6:	77 e0       	ldi	r23, 0x07	; 7
     8a8:	0e 94 fa 13 	call	0x27f4	; 0x27f4 <set_servo_target>
			//set_servo_target(3, lt_elbow_up);			//make left elbow random for up
			if ( (rand()) % 2 != 0 )
     8ac:	0e 94 44 1a 	call	0x3488	; 0x3488 <rand>
     8b0:	80 ff       	sbrs	r24, 0
     8b2:	06 c0       	rjmp	.+12     	; 0x8c0 <main+0x154>
			{
				set_servo_target(3, lt_elbow_up);			//left elbow
     8b4:	83 e0       	ldi	r24, 0x03	; 3
     8b6:	6c e6       	ldi	r22, 0x6C	; 108
     8b8:	77 e0       	ldi	r23, 0x07	; 7
     8ba:	0e 94 fa 13 	call	0x27f4	; 0x27f4 <set_servo_target>
     8be:	26 c0       	rjmp	.+76     	; 0x90c <main+0x1a0>
			}
			else
			{
				set_servo_target(3, lt_elbow_dn);			//left elbow
     8c0:	83 e0       	ldi	r24, 0x03	; 3
     8c2:	66 e6       	ldi	r22, 0x66	; 102
     8c4:	78 e0       	ldi	r23, 0x08	; 8
     8c6:	0e 94 fa 13 	call	0x27f4	; 0x27f4 <set_servo_target>
     8ca:	20 c0       	rjmp	.+64     	; 0x90c <main+0x1a0>
			}
		}
		else
		{
			//set_servo_speed(0, servo_speed);
			set_servo_speed(1, servo_speed);
     8cc:	60 91 b9 02 	lds	r22, 0x02B9
     8d0:	81 e0       	ldi	r24, 0x01	; 1
     8d2:	70 e0       	ldi	r23, 0x00	; 0
     8d4:	0e 94 21 14 	call	0x2842	; 0x2842 <set_servo_speed>
			//set_servo_speed(2, servo_speed);
			set_servo_speed(3, servo_speed);
     8d8:	60 91 b9 02 	lds	r22, 0x02B9
     8dc:	83 e0       	ldi	r24, 0x03	; 3
     8de:	70 e0       	ldi	r23, 0x00	; 0
     8e0:	0e 94 21 14 	call	0x2842	; 0x2842 <set_servo_speed>

			// Make all the servos go to a neutral position.
			//set_servo_target(0, rt_shoulder_rot_lt);	//right shoulder rotation
			set_servo_target(1, rt_elbow_up);				//right elbow
     8e4:	81 e0       	ldi	r24, 0x01	; 1
     8e6:	6e e9       	ldi	r22, 0x9E	; 158
     8e8:	77 e0       	ldi	r23, 0x07	; 7
     8ea:	0e 94 fa 13 	call	0x27f4	; 0x27f4 <set_servo_target>
			//set_servo_target(2, lt_shoulder_rot_rt);	//left shoulder rotation
			//set_servo_target(3, lt_elbow_dn);			//make left elbow random for down
			if ( (rand()) % 2 != 0 )
     8ee:	0e 94 44 1a 	call	0x3488	; 0x3488 <rand>
     8f2:	80 ff       	sbrs	r24, 0
     8f4:	06 c0       	rjmp	.+12     	; 0x902 <main+0x196>
			{
				set_servo_target(3, lt_elbow_dn);			//left elbow
     8f6:	83 e0       	ldi	r24, 0x03	; 3
     8f8:	66 e6       	ldi	r22, 0x66	; 102
     8fa:	78 e0       	ldi	r23, 0x08	; 8
     8fc:	0e 94 fa 13 	call	0x27f4	; 0x27f4 <set_servo_target>
     900:	05 c0       	rjmp	.+10     	; 0x90c <main+0x1a0>
			}
			else
			{
				set_servo_target(3, lt_elbow_up);			//left elbow
     902:	83 e0       	ldi	r24, 0x03	; 3
     904:	6c e6       	ldi	r22, 0x6C	; 108
     906:	77 e0       	ldi	r23, 0x07	; 7
     908:	0e 94 fa 13 	call	0x27f4	; 0x27f4 <set_servo_target>
			}							
		}
		
		flipper2 += 1;				// increment flipper2 toggle value
     90c:	80 91 08 03 	lds	r24, 0x0308
     910:	90 91 09 03 	lds	r25, 0x0309
     914:	01 96       	adiw	r24, 0x01	; 1
     916:	90 93 09 03 	sts	0x0309, r25
     91a:	80 93 08 03 	sts	0x0308, r24
	
		if (test == 0)				// 0 = serial input 'a' = 60 BPM
     91e:	80 91 0a 03 	lds	r24, 0x030A
     922:	90 91 0b 03 	lds	r25, 0x030B
     926:	00 97       	sbiw	r24, 0x00	; 0
     928:	51 f5       	brne	.+84     	; 0x97e <main+0x212>
		{
			clear();				// clear the LCD
     92a:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <clear>
			print("BPM = 60-61");
     92e:	8f e2       	ldi	r24, 0x2F	; 47
     930:	91 e0       	ldi	r25, 0x01	; 1
     932:	0e 94 14 0b 	call	0x1628	; 0x1628 <print>
			lcd_goto_xy(0, 1);		// go to start of second LCD row
     936:	80 e0       	ldi	r24, 0x00	; 0
     938:	61 e0       	ldi	r22, 0x01	; 1
     93a:	0e 94 94 0b 	call	0x1728	; 0x1728 <lcd_goto_xy>
			print("mode: ");
     93e:	ce 01       	movw	r24, r28
     940:	0e 94 14 0b 	call	0x1628	; 0x1628 <print>
			print_long(test);
     944:	60 91 0a 03 	lds	r22, 0x030A
     948:	70 91 0b 03 	lds	r23, 0x030B
     94c:	88 27       	eor	r24, r24
     94e:	77 fd       	sbrc	r23, 7
     950:	80 95       	com	r24
     952:	98 2f       	mov	r25, r24
     954:	0e 94 71 0b 	call	0x16e2	; 0x16e2 <print_long>
// output, this lets you choose between driving low (val = 0) and driving high (val = 1).
// NOTE: if val is 0xFF (255), this method will toggle the PORT register pin(s).
static inline void set_digital_output_value(struct IOStruct* ioPin, unsigned char val)
{
	if (val == 0xFF)
		*(ioPin->portRegister) ^= ioPin->bitmask;
     958:	98 b1       	in	r25, 0x08	; 8
     95a:	80 e1       	ldi	r24, 0x10	; 16
     95c:	89 27       	eor	r24, r25
     95e:	88 b9       	out	0x08, r24	; 8
// low-level method for setting the data direction (i.e. input or output) of an pin or set of pins
// described by an IOStruct pointer.
static inline void set_data_direction(struct IOStruct* ioPin, unsigned char val)
{
	if (val)
		*(ioPin->ddrRegister) |= ioPin->bitmask;
     960:	3c 9a       	sbi	0x07, 4	; 7
			green_led(TOGGLE);
			pb_delay = 500;
     962:	84 ef       	ldi	r24, 0xF4	; 244
     964:	91 e0       	ldi	r25, 0x01	; 1
     966:	90 93 b6 02 	sts	0x02B6, r25
     96a:	80 93 b5 02 	sts	0x02B5, r24
			//delay_ms(500);
			servo_speed = 200;		// faster BPM needs faster servo speed
     96e:	88 ec       	ldi	r24, 0xC8	; 200
     970:	80 93 b9 02 	sts	0x02B9, r24
			byte_counter = 0;		//reset counter
     974:	10 92 07 03 	sts	0x0307, r1
     978:	10 92 06 03 	sts	0x0306, r1
     97c:	77 c4       	rjmp	.+2286   	; 0x126c <main+0xb00>
			
		}	
		else if (test == 1)			// 1 = serial input 'b' = 62 BPM
     97e:	81 30       	cpi	r24, 0x01	; 1
     980:	91 05       	cpc	r25, r1
     982:	51 f5       	brne	.+84     	; 0x9d8 <main+0x26c>
		{
			clear();				// clear the LCD
     984:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <clear>
			print("BPM = 62-64");
     988:	82 e4       	ldi	r24, 0x42	; 66
     98a:	91 e0       	ldi	r25, 0x01	; 1
     98c:	0e 94 14 0b 	call	0x1628	; 0x1628 <print>
			lcd_goto_xy(0, 1);		// go to start of second LCD row
     990:	80 e0       	ldi	r24, 0x00	; 0
     992:	61 e0       	ldi	r22, 0x01	; 1
     994:	0e 94 94 0b 	call	0x1728	; 0x1728 <lcd_goto_xy>
			print("mode: ");
     998:	ce 01       	movw	r24, r28
     99a:	0e 94 14 0b 	call	0x1628	; 0x1628 <print>
			print_long(test);
     99e:	60 91 0a 03 	lds	r22, 0x030A
     9a2:	70 91 0b 03 	lds	r23, 0x030B
     9a6:	88 27       	eor	r24, r24
     9a8:	77 fd       	sbrc	r23, 7
     9aa:	80 95       	com	r24
     9ac:	98 2f       	mov	r25, r24
     9ae:	0e 94 71 0b 	call	0x16e2	; 0x16e2 <print_long>
// output, this lets you choose between driving low (val = 0) and driving high (val = 1).
// NOTE: if val is 0xFF (255), this method will toggle the PORT register pin(s).
static inline void set_digital_output_value(struct IOStruct* ioPin, unsigned char val)
{
	if (val == 0xFF)
		*(ioPin->portRegister) ^= ioPin->bitmask;
     9b2:	98 b1       	in	r25, 0x08	; 8
     9b4:	80 e1       	ldi	r24, 0x10	; 16
     9b6:	89 27       	eor	r24, r25
     9b8:	88 b9       	out	0x08, r24	; 8
// low-level method for setting the data direction (i.e. input or output) of an pin or set of pins
// described by an IOStruct pointer.
static inline void set_data_direction(struct IOStruct* ioPin, unsigned char val)
{
	if (val)
		*(ioPin->ddrRegister) |= ioPin->bitmask;
     9ba:	3c 9a       	sbi	0x07, 4	; 7
			green_led(TOGGLE);
			pb_delay = 484;
     9bc:	84 ee       	ldi	r24, 0xE4	; 228
     9be:	91 e0       	ldi	r25, 0x01	; 1
     9c0:	90 93 b6 02 	sts	0x02B6, r25
     9c4:	80 93 b5 02 	sts	0x02B5, r24
			//delay_ms(440);
			servo_speed = 200;		// faster BPM needs faster servo speed
     9c8:	88 ec       	ldi	r24, 0xC8	; 200
     9ca:	80 93 b9 02 	sts	0x02B9, r24
			byte_counter = 0;		//reset counter
     9ce:	10 92 07 03 	sts	0x0307, r1
     9d2:	10 92 06 03 	sts	0x0306, r1
     9d6:	4a c4       	rjmp	.+2196   	; 0x126c <main+0xb00>

		}	
		else if (test == 2)			// 2 = serial input 'c' =65 BPM
     9d8:	82 30       	cpi	r24, 0x02	; 2
     9da:	91 05       	cpc	r25, r1
     9dc:	51 f5       	brne	.+84     	; 0xa32 <main+0x2c6>
		{

			clear();				// clear the LCD
     9de:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <clear>
			print("BPM = 65-67");
     9e2:	8e e4       	ldi	r24, 0x4E	; 78
     9e4:	91 e0       	ldi	r25, 0x01	; 1
     9e6:	0e 94 14 0b 	call	0x1628	; 0x1628 <print>
			lcd_goto_xy(0, 1);		// go to start of second LCD row
     9ea:	80 e0       	ldi	r24, 0x00	; 0
     9ec:	61 e0       	ldi	r22, 0x01	; 1
     9ee:	0e 94 94 0b 	call	0x1728	; 0x1728 <lcd_goto_xy>
			print("mode: ");
     9f2:	ce 01       	movw	r24, r28
     9f4:	0e 94 14 0b 	call	0x1628	; 0x1628 <print>
			print_long(test);
     9f8:	60 91 0a 03 	lds	r22, 0x030A
     9fc:	70 91 0b 03 	lds	r23, 0x030B
     a00:	88 27       	eor	r24, r24
     a02:	77 fd       	sbrc	r23, 7
     a04:	80 95       	com	r24
     a06:	98 2f       	mov	r25, r24
     a08:	0e 94 71 0b 	call	0x16e2	; 0x16e2 <print_long>
// output, this lets you choose between driving low (val = 0) and driving high (val = 1).
// NOTE: if val is 0xFF (255), this method will toggle the PORT register pin(s).
static inline void set_digital_output_value(struct IOStruct* ioPin, unsigned char val)
{
	if (val == 0xFF)
		*(ioPin->portRegister) ^= ioPin->bitmask;
     a0c:	98 b1       	in	r25, 0x08	; 8
     a0e:	80 e1       	ldi	r24, 0x10	; 16
     a10:	89 27       	eor	r24, r25
     a12:	88 b9       	out	0x08, r24	; 8
// low-level method for setting the data direction (i.e. input or output) of an pin or set of pins
// described by an IOStruct pointer.
static inline void set_data_direction(struct IOStruct* ioPin, unsigned char val)
{
	if (val)
		*(ioPin->ddrRegister) |= ioPin->bitmask;
     a14:	3c 9a       	sbi	0x07, 4	; 7
			green_led(TOGGLE);
			pb_delay = 462;
     a16:	8e ec       	ldi	r24, 0xCE	; 206
     a18:	91 e0       	ldi	r25, 0x01	; 1
     a1a:	90 93 b6 02 	sts	0x02B6, r25
     a1e:	80 93 b5 02 	sts	0x02B5, r24
			//delay_ms(400);
			servo_speed = 200;		// faster BPM needs faster servo speed
     a22:	88 ec       	ldi	r24, 0xC8	; 200
     a24:	80 93 b9 02 	sts	0x02B9, r24
			byte_counter = 0;		//reset counter
     a28:	10 92 07 03 	sts	0x0307, r1
     a2c:	10 92 06 03 	sts	0x0306, r1
     a30:	1d c4       	rjmp	.+2106   	; 0x126c <main+0xb00>
				
		}
		else if (test == 3)			// 3 = serial input 'd' = 68 BPM
     a32:	83 30       	cpi	r24, 0x03	; 3
     a34:	91 05       	cpc	r25, r1
     a36:	51 f5       	brne	.+84     	; 0xa8c <main+0x320>
		{
			clear();				// clear the LCD
     a38:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <clear>
			print("BPM = 68-69");
     a3c:	8a e5       	ldi	r24, 0x5A	; 90
     a3e:	91 e0       	ldi	r25, 0x01	; 1
     a40:	0e 94 14 0b 	call	0x1628	; 0x1628 <print>
			lcd_goto_xy(0, 1);		// go to start of second LCD row
     a44:	80 e0       	ldi	r24, 0x00	; 0
     a46:	61 e0       	ldi	r22, 0x01	; 1
     a48:	0e 94 94 0b 	call	0x1728	; 0x1728 <lcd_goto_xy>
			print("mode: ");
     a4c:	ce 01       	movw	r24, r28
     a4e:	0e 94 14 0b 	call	0x1628	; 0x1628 <print>
			print_long(test);
     a52:	60 91 0a 03 	lds	r22, 0x030A
     a56:	70 91 0b 03 	lds	r23, 0x030B
     a5a:	88 27       	eor	r24, r24
     a5c:	77 fd       	sbrc	r23, 7
     a5e:	80 95       	com	r24
     a60:	98 2f       	mov	r25, r24
     a62:	0e 94 71 0b 	call	0x16e2	; 0x16e2 <print_long>
// output, this lets you choose between driving low (val = 0) and driving high (val = 1).
// NOTE: if val is 0xFF (255), this method will toggle the PORT register pin(s).
static inline void set_digital_output_value(struct IOStruct* ioPin, unsigned char val)
{
	if (val == 0xFF)
		*(ioPin->portRegister) ^= ioPin->bitmask;
     a66:	98 b1       	in	r25, 0x08	; 8
     a68:	80 e1       	ldi	r24, 0x10	; 16
     a6a:	89 27       	eor	r24, r25
     a6c:	88 b9       	out	0x08, r24	; 8
// low-level method for setting the data direction (i.e. input or output) of an pin or set of pins
// described by an IOStruct pointer.
static inline void set_data_direction(struct IOStruct* ioPin, unsigned char val)
{
	if (val)
		*(ioPin->ddrRegister) |= ioPin->bitmask;
     a6e:	3c 9a       	sbi	0x07, 4	; 7
			green_led(TOGGLE);
			pb_delay = 441;
     a70:	89 eb       	ldi	r24, 0xB9	; 185
     a72:	91 e0       	ldi	r25, 0x01	; 1
     a74:	90 93 b6 02 	sts	0x02B6, r25
     a78:	80 93 b5 02 	sts	0x02B5, r24
			//delay_ms(360);
			servo_speed = 200;		// faster BPM needs faster servo speed
     a7c:	88 ec       	ldi	r24, 0xC8	; 200
     a7e:	80 93 b9 02 	sts	0x02B9, r24
			byte_counter = 0;		//reset counter
     a82:	10 92 07 03 	sts	0x0307, r1
     a86:	10 92 06 03 	sts	0x0306, r1
     a8a:	f0 c3       	rjmp	.+2016   	; 0x126c <main+0xb00>

			
		}
		else if (test == 4)			// 4 = serial input 'e' = 70 BPM
     a8c:	84 30       	cpi	r24, 0x04	; 4
     a8e:	91 05       	cpc	r25, r1
     a90:	51 f5       	brne	.+84     	; 0xae6 <main+0x37a>
		{
			clear();				// clear the LCD
     a92:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <clear>
			print("BPM = 70-71");
     a96:	86 e6       	ldi	r24, 0x66	; 102
     a98:	91 e0       	ldi	r25, 0x01	; 1
     a9a:	0e 94 14 0b 	call	0x1628	; 0x1628 <print>
			lcd_goto_xy(0, 1);		// go to start of second LCD row
     a9e:	80 e0       	ldi	r24, 0x00	; 0
     aa0:	61 e0       	ldi	r22, 0x01	; 1
     aa2:	0e 94 94 0b 	call	0x1728	; 0x1728 <lcd_goto_xy>
			print("mode: ");
     aa6:	ce 01       	movw	r24, r28
     aa8:	0e 94 14 0b 	call	0x1628	; 0x1628 <print>
			print_long(test);
     aac:	60 91 0a 03 	lds	r22, 0x030A
     ab0:	70 91 0b 03 	lds	r23, 0x030B
     ab4:	88 27       	eor	r24, r24
     ab6:	77 fd       	sbrc	r23, 7
     ab8:	80 95       	com	r24
     aba:	98 2f       	mov	r25, r24
     abc:	0e 94 71 0b 	call	0x16e2	; 0x16e2 <print_long>
// output, this lets you choose between driving low (val = 0) and driving high (val = 1).
// NOTE: if val is 0xFF (255), this method will toggle the PORT register pin(s).
static inline void set_digital_output_value(struct IOStruct* ioPin, unsigned char val)
{
	if (val == 0xFF)
		*(ioPin->portRegister) ^= ioPin->bitmask;
     ac0:	98 b1       	in	r25, 0x08	; 8
     ac2:	80 e1       	ldi	r24, 0x10	; 16
     ac4:	89 27       	eor	r24, r25
     ac6:	88 b9       	out	0x08, r24	; 8
// low-level method for setting the data direction (i.e. input or output) of an pin or set of pins
// described by an IOStruct pointer.
static inline void set_data_direction(struct IOStruct* ioPin, unsigned char val)
{
	if (val)
		*(ioPin->ddrRegister) |= ioPin->bitmask;
     ac8:	3c 9a       	sbi	0x07, 4	; 7
			green_led(TOGGLE);
			pb_delay = 429;
     aca:	8d ea       	ldi	r24, 0xAD	; 173
     acc:	91 e0       	ldi	r25, 0x01	; 1
     ace:	90 93 b6 02 	sts	0x02B6, r25
     ad2:	80 93 b5 02 	sts	0x02B5, r24
			//delay_ms(345);
			servo_speed = 200;		// faster BPM needs faster servo speed
     ad6:	88 ec       	ldi	r24, 0xC8	; 200
     ad8:	80 93 b9 02 	sts	0x02B9, r24
			byte_counter = 0;		//reset counter
     adc:	10 92 07 03 	sts	0x0307, r1
     ae0:	10 92 06 03 	sts	0x0306, r1
     ae4:	c3 c3       	rjmp	.+1926   	; 0x126c <main+0xb00>
			
		}
		else if (test == 5)			// 5 = serial input 'f' = 72 BPM
     ae6:	85 30       	cpi	r24, 0x05	; 5
     ae8:	91 05       	cpc	r25, r1
     aea:	51 f5       	brne	.+84     	; 0xb40 <main+0x3d4>
		{
			clear();				// clear the LCD
     aec:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <clear>
			print("BPM = 72-74");
     af0:	82 e7       	ldi	r24, 0x72	; 114
     af2:	91 e0       	ldi	r25, 0x01	; 1
     af4:	0e 94 14 0b 	call	0x1628	; 0x1628 <print>
			lcd_goto_xy(0, 1);		// go to start of second LCD row
     af8:	80 e0       	ldi	r24, 0x00	; 0
     afa:	61 e0       	ldi	r22, 0x01	; 1
     afc:	0e 94 94 0b 	call	0x1728	; 0x1728 <lcd_goto_xy>
			print("mode: ");
     b00:	ce 01       	movw	r24, r28
     b02:	0e 94 14 0b 	call	0x1628	; 0x1628 <print>
			print_long(test);
     b06:	60 91 0a 03 	lds	r22, 0x030A
     b0a:	70 91 0b 03 	lds	r23, 0x030B
     b0e:	88 27       	eor	r24, r24
     b10:	77 fd       	sbrc	r23, 7
     b12:	80 95       	com	r24
     b14:	98 2f       	mov	r25, r24
     b16:	0e 94 71 0b 	call	0x16e2	; 0x16e2 <print_long>
// output, this lets you choose between driving low (val = 0) and driving high (val = 1).
// NOTE: if val is 0xFF (255), this method will toggle the PORT register pin(s).
static inline void set_digital_output_value(struct IOStruct* ioPin, unsigned char val)
{
	if (val == 0xFF)
		*(ioPin->portRegister) ^= ioPin->bitmask;
     b1a:	98 b1       	in	r25, 0x08	; 8
     b1c:	80 e1       	ldi	r24, 0x10	; 16
     b1e:	89 27       	eor	r24, r25
     b20:	88 b9       	out	0x08, r24	; 8
// low-level method for setting the data direction (i.e. input or output) of an pin or set of pins
// described by an IOStruct pointer.
static inline void set_data_direction(struct IOStruct* ioPin, unsigned char val)
{
	if (val)
		*(ioPin->ddrRegister) |= ioPin->bitmask;
     b22:	3c 9a       	sbi	0x07, 4	; 7
			green_led(TOGGLE);
			pb_delay = 417;
     b24:	81 ea       	ldi	r24, 0xA1	; 161
     b26:	91 e0       	ldi	r25, 0x01	; 1
     b28:	90 93 b6 02 	sts	0x02B6, r25
     b2c:	80 93 b5 02 	sts	0x02B5, r24
			//delay_ms(335);
			servo_speed = 200;		// faster BPM needs faster servo speed
     b30:	88 ec       	ldi	r24, 0xC8	; 200
     b32:	80 93 b9 02 	sts	0x02B9, r24
			byte_counter = 0;		//reset counter
     b36:	10 92 07 03 	sts	0x0307, r1
     b3a:	10 92 06 03 	sts	0x0306, r1
     b3e:	96 c3       	rjmp	.+1836   	; 0x126c <main+0xb00>
				
		}
		else if (test == 6)			// 6 = serial input 'g' = 75 BPM
     b40:	86 30       	cpi	r24, 0x06	; 6
     b42:	91 05       	cpc	r25, r1
     b44:	51 f5       	brne	.+84     	; 0xb9a <main+0x42e>
		{
			clear();				// clear the LCD
     b46:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <clear>
			print("BPM = 75-77");
     b4a:	8e e7       	ldi	r24, 0x7E	; 126
     b4c:	91 e0       	ldi	r25, 0x01	; 1
     b4e:	0e 94 14 0b 	call	0x1628	; 0x1628 <print>
			lcd_goto_xy(0, 1);		// go to start of second LCD row
     b52:	80 e0       	ldi	r24, 0x00	; 0
     b54:	61 e0       	ldi	r22, 0x01	; 1
     b56:	0e 94 94 0b 	call	0x1728	; 0x1728 <lcd_goto_xy>
			print("mode: ");
     b5a:	ce 01       	movw	r24, r28
     b5c:	0e 94 14 0b 	call	0x1628	; 0x1628 <print>
			print_long(test);
     b60:	60 91 0a 03 	lds	r22, 0x030A
     b64:	70 91 0b 03 	lds	r23, 0x030B
     b68:	88 27       	eor	r24, r24
     b6a:	77 fd       	sbrc	r23, 7
     b6c:	80 95       	com	r24
     b6e:	98 2f       	mov	r25, r24
     b70:	0e 94 71 0b 	call	0x16e2	; 0x16e2 <print_long>
// output, this lets you choose between driving low (val = 0) and driving high (val = 1).
// NOTE: if val is 0xFF (255), this method will toggle the PORT register pin(s).
static inline void set_digital_output_value(struct IOStruct* ioPin, unsigned char val)
{
	if (val == 0xFF)
		*(ioPin->portRegister) ^= ioPin->bitmask;
     b74:	98 b1       	in	r25, 0x08	; 8
     b76:	80 e1       	ldi	r24, 0x10	; 16
     b78:	89 27       	eor	r24, r25
     b7a:	88 b9       	out	0x08, r24	; 8
// low-level method for setting the data direction (i.e. input or output) of an pin or set of pins
// described by an IOStruct pointer.
static inline void set_data_direction(struct IOStruct* ioPin, unsigned char val)
{
	if (val)
		*(ioPin->ddrRegister) |= ioPin->bitmask;
     b7c:	3c 9a       	sbi	0x07, 4	; 7
			green_led(TOGGLE);
			pb_delay = 400;
     b7e:	80 e9       	ldi	r24, 0x90	; 144
     b80:	91 e0       	ldi	r25, 0x01	; 1
     b82:	90 93 b6 02 	sts	0x02B6, r25
     b86:	80 93 b5 02 	sts	0x02B5, r24
			//delay_ms(310);
			servo_speed = 200;		// faster BPM needs faster servo speed
     b8a:	88 ec       	ldi	r24, 0xC8	; 200
     b8c:	80 93 b9 02 	sts	0x02B9, r24
			byte_counter = 0;		//reset counter
     b90:	10 92 07 03 	sts	0x0307, r1
     b94:	10 92 06 03 	sts	0x0306, r1
     b98:	69 c3       	rjmp	.+1746   	; 0x126c <main+0xb00>
		
		}
		else if (test == 7)			// 7 = serial input 'h' = 78 BPM
     b9a:	87 30       	cpi	r24, 0x07	; 7
     b9c:	91 05       	cpc	r25, r1
     b9e:	51 f5       	brne	.+84     	; 0xbf4 <main+0x488>
		{
			clear();				// clear the LCD
     ba0:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <clear>
			print("BPM = 78-79");
     ba4:	8a e8       	ldi	r24, 0x8A	; 138
     ba6:	91 e0       	ldi	r25, 0x01	; 1
     ba8:	0e 94 14 0b 	call	0x1628	; 0x1628 <print>
			lcd_goto_xy(0, 1);		// go to start of second LCD row
     bac:	80 e0       	ldi	r24, 0x00	; 0
     bae:	61 e0       	ldi	r22, 0x01	; 1
     bb0:	0e 94 94 0b 	call	0x1728	; 0x1728 <lcd_goto_xy>
			print("mode: ");
     bb4:	ce 01       	movw	r24, r28
     bb6:	0e 94 14 0b 	call	0x1628	; 0x1628 <print>
			print_long(test);
     bba:	60 91 0a 03 	lds	r22, 0x030A
     bbe:	70 91 0b 03 	lds	r23, 0x030B
     bc2:	88 27       	eor	r24, r24
     bc4:	77 fd       	sbrc	r23, 7
     bc6:	80 95       	com	r24
     bc8:	98 2f       	mov	r25, r24
     bca:	0e 94 71 0b 	call	0x16e2	; 0x16e2 <print_long>
// output, this lets you choose between driving low (val = 0) and driving high (val = 1).
// NOTE: if val is 0xFF (255), this method will toggle the PORT register pin(s).
static inline void set_digital_output_value(struct IOStruct* ioPin, unsigned char val)
{
	if (val == 0xFF)
		*(ioPin->portRegister) ^= ioPin->bitmask;
     bce:	98 b1       	in	r25, 0x08	; 8
     bd0:	80 e1       	ldi	r24, 0x10	; 16
     bd2:	89 27       	eor	r24, r25
     bd4:	88 b9       	out	0x08, r24	; 8
// low-level method for setting the data direction (i.e. input or output) of an pin or set of pins
// described by an IOStruct pointer.
static inline void set_data_direction(struct IOStruct* ioPin, unsigned char val)
{
	if (val)
		*(ioPin->ddrRegister) |= ioPin->bitmask;
     bd6:	3c 9a       	sbi	0x07, 4	; 7
			green_led(TOGGLE);
			pb_delay = 385;
     bd8:	81 e8       	ldi	r24, 0x81	; 129
     bda:	91 e0       	ldi	r25, 0x01	; 1
     bdc:	90 93 b6 02 	sts	0x02B6, r25
     be0:	80 93 b5 02 	sts	0x02B5, r24
			//delay_ms(290);
			servo_speed = 200;		// faster BPM needs faster servo speed
     be4:	88 ec       	ldi	r24, 0xC8	; 200
     be6:	80 93 b9 02 	sts	0x02B9, r24
			byte_counter = 0;		//reset counter
     bea:	10 92 07 03 	sts	0x0307, r1
     bee:	10 92 06 03 	sts	0x0306, r1
     bf2:	3c c3       	rjmp	.+1656   	; 0x126c <main+0xb00>
	
		}
		else if (test == 8)			// 8 = serial input 'i' = 80 BPM
     bf4:	88 30       	cpi	r24, 0x08	; 8
     bf6:	91 05       	cpc	r25, r1
     bf8:	51 f5       	brne	.+84     	; 0xc4e <main+0x4e2>
		{
			clear();				// clear the LCD
     bfa:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <clear>
			print("BPM = 80-81");
     bfe:	86 e9       	ldi	r24, 0x96	; 150
     c00:	91 e0       	ldi	r25, 0x01	; 1
     c02:	0e 94 14 0b 	call	0x1628	; 0x1628 <print>
			lcd_goto_xy(0, 1);		// go to start of second LCD row
     c06:	80 e0       	ldi	r24, 0x00	; 0
     c08:	61 e0       	ldi	r22, 0x01	; 1
     c0a:	0e 94 94 0b 	call	0x1728	; 0x1728 <lcd_goto_xy>
			print("mode: ");
     c0e:	ce 01       	movw	r24, r28
     c10:	0e 94 14 0b 	call	0x1628	; 0x1628 <print>
			print_long(test);
     c14:	60 91 0a 03 	lds	r22, 0x030A
     c18:	70 91 0b 03 	lds	r23, 0x030B
     c1c:	88 27       	eor	r24, r24
     c1e:	77 fd       	sbrc	r23, 7
     c20:	80 95       	com	r24
     c22:	98 2f       	mov	r25, r24
     c24:	0e 94 71 0b 	call	0x16e2	; 0x16e2 <print_long>
// output, this lets you choose between driving low (val = 0) and driving high (val = 1).
// NOTE: if val is 0xFF (255), this method will toggle the PORT register pin(s).
static inline void set_digital_output_value(struct IOStruct* ioPin, unsigned char val)
{
	if (val == 0xFF)
		*(ioPin->portRegister) ^= ioPin->bitmask;
     c28:	98 b1       	in	r25, 0x08	; 8
     c2a:	80 e1       	ldi	r24, 0x10	; 16
     c2c:	89 27       	eor	r24, r25
     c2e:	88 b9       	out	0x08, r24	; 8
// low-level method for setting the data direction (i.e. input or output) of an pin or set of pins
// described by an IOStruct pointer.
static inline void set_data_direction(struct IOStruct* ioPin, unsigned char val)
{
	if (val)
		*(ioPin->ddrRegister) |= ioPin->bitmask;
     c30:	3c 9a       	sbi	0x07, 4	; 7
			green_led(TOGGLE);
			pb_delay = 375;
     c32:	87 e7       	ldi	r24, 0x77	; 119
     c34:	91 e0       	ldi	r25, 0x01	; 1
     c36:	90 93 b6 02 	sts	0x02B6, r25
     c3a:	80 93 b5 02 	sts	0x02B5, r24
			//delay_ms(270);
			servo_speed = 200;		// faster BPM needs faster servo speed
     c3e:	88 ec       	ldi	r24, 0xC8	; 200
     c40:	80 93 b9 02 	sts	0x02B9, r24
			byte_counter = 0;		//reset counter
     c44:	10 92 07 03 	sts	0x0307, r1
     c48:	10 92 06 03 	sts	0x0306, r1
     c4c:	0f c3       	rjmp	.+1566   	; 0x126c <main+0xb00>
		
		}
		else if (test == 9)			// 9 = serial input 'j' = 82 BPM
     c4e:	89 30       	cpi	r24, 0x09	; 9
     c50:	91 05       	cpc	r25, r1
     c52:	51 f5       	brne	.+84     	; 0xca8 <main+0x53c>
		{
			clear();				// clear the LCD
     c54:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <clear>
			print("BPM = 82-84");
     c58:	82 ea       	ldi	r24, 0xA2	; 162
     c5a:	91 e0       	ldi	r25, 0x01	; 1
     c5c:	0e 94 14 0b 	call	0x1628	; 0x1628 <print>
			lcd_goto_xy(0, 1);		// go to start of second LCD row
     c60:	80 e0       	ldi	r24, 0x00	; 0
     c62:	61 e0       	ldi	r22, 0x01	; 1
     c64:	0e 94 94 0b 	call	0x1728	; 0x1728 <lcd_goto_xy>
			print("mode: ");
     c68:	ce 01       	movw	r24, r28
     c6a:	0e 94 14 0b 	call	0x1628	; 0x1628 <print>
			print_long(test);
     c6e:	60 91 0a 03 	lds	r22, 0x030A
     c72:	70 91 0b 03 	lds	r23, 0x030B
     c76:	88 27       	eor	r24, r24
     c78:	77 fd       	sbrc	r23, 7
     c7a:	80 95       	com	r24
     c7c:	98 2f       	mov	r25, r24
     c7e:	0e 94 71 0b 	call	0x16e2	; 0x16e2 <print_long>
// output, this lets you choose between driving low (val = 0) and driving high (val = 1).
// NOTE: if val is 0xFF (255), this method will toggle the PORT register pin(s).
static inline void set_digital_output_value(struct IOStruct* ioPin, unsigned char val)
{
	if (val == 0xFF)
		*(ioPin->portRegister) ^= ioPin->bitmask;
     c82:	98 b1       	in	r25, 0x08	; 8
     c84:	80 e1       	ldi	r24, 0x10	; 16
     c86:	89 27       	eor	r24, r25
     c88:	88 b9       	out	0x08, r24	; 8
// low-level method for setting the data direction (i.e. input or output) of an pin or set of pins
// described by an IOStruct pointer.
static inline void set_data_direction(struct IOStruct* ioPin, unsigned char val)
{
	if (val)
		*(ioPin->ddrRegister) |= ioPin->bitmask;
     c8a:	3c 9a       	sbi	0x07, 4	; 7
			green_led(TOGGLE);
			pb_delay = 366;
     c8c:	8e e6       	ldi	r24, 0x6E	; 110
     c8e:	91 e0       	ldi	r25, 0x01	; 1
     c90:	90 93 b6 02 	sts	0x02B6, r25
     c94:	80 93 b5 02 	sts	0x02B5, r24
			//delay_ms(250);
			servo_speed = 200;		// faster BPM needs faster servo speed
     c98:	88 ec       	ldi	r24, 0xC8	; 200
     c9a:	80 93 b9 02 	sts	0x02B9, r24
			byte_counter = 0;		//reset counter
     c9e:	10 92 07 03 	sts	0x0307, r1
     ca2:	10 92 06 03 	sts	0x0306, r1
     ca6:	e2 c2       	rjmp	.+1476   	; 0x126c <main+0xb00>
	
		}
		else if (test == 10)		// 10 = serial input 'k' = 85 BPM
     ca8:	8a 30       	cpi	r24, 0x0A	; 10
     caa:	91 05       	cpc	r25, r1
     cac:	51 f5       	brne	.+84     	; 0xd02 <main+0x596>
		{
			clear();				// clear the LCD
     cae:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <clear>
			print("BPM = 85-87");
     cb2:	8e ea       	ldi	r24, 0xAE	; 174
     cb4:	91 e0       	ldi	r25, 0x01	; 1
     cb6:	0e 94 14 0b 	call	0x1628	; 0x1628 <print>
			lcd_goto_xy(0, 1);		// go to start of second LCD row
     cba:	80 e0       	ldi	r24, 0x00	; 0
     cbc:	61 e0       	ldi	r22, 0x01	; 1
     cbe:	0e 94 94 0b 	call	0x1728	; 0x1728 <lcd_goto_xy>
			print("mode: ");
     cc2:	ce 01       	movw	r24, r28
     cc4:	0e 94 14 0b 	call	0x1628	; 0x1628 <print>
			print_long(test);
     cc8:	60 91 0a 03 	lds	r22, 0x030A
     ccc:	70 91 0b 03 	lds	r23, 0x030B
     cd0:	88 27       	eor	r24, r24
     cd2:	77 fd       	sbrc	r23, 7
     cd4:	80 95       	com	r24
     cd6:	98 2f       	mov	r25, r24
     cd8:	0e 94 71 0b 	call	0x16e2	; 0x16e2 <print_long>
// output, this lets you choose between driving low (val = 0) and driving high (val = 1).
// NOTE: if val is 0xFF (255), this method will toggle the PORT register pin(s).
static inline void set_digital_output_value(struct IOStruct* ioPin, unsigned char val)
{
	if (val == 0xFF)
		*(ioPin->portRegister) ^= ioPin->bitmask;
     cdc:	98 b1       	in	r25, 0x08	; 8
     cde:	80 e1       	ldi	r24, 0x10	; 16
     ce0:	89 27       	eor	r24, r25
     ce2:	88 b9       	out	0x08, r24	; 8
// low-level method for setting the data direction (i.e. input or output) of an pin or set of pins
// described by an IOStruct pointer.
static inline void set_data_direction(struct IOStruct* ioPin, unsigned char val)
{
	if (val)
		*(ioPin->ddrRegister) |= ioPin->bitmask;
     ce4:	3c 9a       	sbi	0x07, 4	; 7
			green_led(TOGGLE);
			pb_delay = 353;
     ce6:	81 e6       	ldi	r24, 0x61	; 97
     ce8:	91 e0       	ldi	r25, 0x01	; 1
     cea:	90 93 b6 02 	sts	0x02B6, r25
     cee:	80 93 b5 02 	sts	0x02B5, r24
			//delay_ms(440);
			servo_speed = 200;		// faster BPM needs faster servo speed
     cf2:	88 ec       	ldi	r24, 0xC8	; 200
     cf4:	80 93 b9 02 	sts	0x02B9, r24
			byte_counter = 0;		//reset counter
     cf8:	10 92 07 03 	sts	0x0307, r1
     cfc:	10 92 06 03 	sts	0x0306, r1
     d00:	b5 c2       	rjmp	.+1386   	; 0x126c <main+0xb00>

		}
		else if (test == 11)		// 11 = serial input 'l' = 88 BPM
     d02:	8b 30       	cpi	r24, 0x0B	; 11
     d04:	91 05       	cpc	r25, r1
     d06:	51 f5       	brne	.+84     	; 0xd5c <main+0x5f0>
		{

			clear();				// clear the LCD
     d08:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <clear>
			print("BPM = 88-89");
     d0c:	8a eb       	ldi	r24, 0xBA	; 186
     d0e:	91 e0       	ldi	r25, 0x01	; 1
     d10:	0e 94 14 0b 	call	0x1628	; 0x1628 <print>
			lcd_goto_xy(0, 1);		// go to start of second LCD row
     d14:	80 e0       	ldi	r24, 0x00	; 0
     d16:	61 e0       	ldi	r22, 0x01	; 1
     d18:	0e 94 94 0b 	call	0x1728	; 0x1728 <lcd_goto_xy>
			print("mode: ");
     d1c:	ce 01       	movw	r24, r28
     d1e:	0e 94 14 0b 	call	0x1628	; 0x1628 <print>
			print_long(test);
     d22:	60 91 0a 03 	lds	r22, 0x030A
     d26:	70 91 0b 03 	lds	r23, 0x030B
     d2a:	88 27       	eor	r24, r24
     d2c:	77 fd       	sbrc	r23, 7
     d2e:	80 95       	com	r24
     d30:	98 2f       	mov	r25, r24
     d32:	0e 94 71 0b 	call	0x16e2	; 0x16e2 <print_long>
// output, this lets you choose between driving low (val = 0) and driving high (val = 1).
// NOTE: if val is 0xFF (255), this method will toggle the PORT register pin(s).
static inline void set_digital_output_value(struct IOStruct* ioPin, unsigned char val)
{
	if (val == 0xFF)
		*(ioPin->portRegister) ^= ioPin->bitmask;
     d36:	98 b1       	in	r25, 0x08	; 8
     d38:	80 e1       	ldi	r24, 0x10	; 16
     d3a:	89 27       	eor	r24, r25
     d3c:	88 b9       	out	0x08, r24	; 8
// low-level method for setting the data direction (i.e. input or output) of an pin or set of pins
// described by an IOStruct pointer.
static inline void set_data_direction(struct IOStruct* ioPin, unsigned char val)
{
	if (val)
		*(ioPin->ddrRegister) |= ioPin->bitmask;
     d3e:	3c 9a       	sbi	0x07, 4	; 7
			green_led(TOGGLE);
			pb_delay = 341;
     d40:	85 e5       	ldi	r24, 0x55	; 85
     d42:	91 e0       	ldi	r25, 0x01	; 1
     d44:	90 93 b6 02 	sts	0x02B6, r25
     d48:	80 93 b5 02 	sts	0x02B5, r24
			//delay_ms(400);
			servo_speed = 200;		// faster BPM needs faster servo speed
     d4c:	88 ec       	ldi	r24, 0xC8	; 200
     d4e:	80 93 b9 02 	sts	0x02B9, r24
			byte_counter = 0;		//reset counter
     d52:	10 92 07 03 	sts	0x0307, r1
     d56:	10 92 06 03 	sts	0x0306, r1
     d5a:	88 c2       	rjmp	.+1296   	; 0x126c <main+0xb00>
					
		}
		else if (test == 12)		// 12 = serial input 'm' = 90 BPM
     d5c:	8c 30       	cpi	r24, 0x0C	; 12
     d5e:	91 05       	cpc	r25, r1
     d60:	51 f5       	brne	.+84     	; 0xdb6 <main+0x64a>
		{
			clear();				// clear the LCD
     d62:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <clear>
			print("BPM = 90-91");
     d66:	86 ec       	ldi	r24, 0xC6	; 198
     d68:	91 e0       	ldi	r25, 0x01	; 1
     d6a:	0e 94 14 0b 	call	0x1628	; 0x1628 <print>
			lcd_goto_xy(0, 1);		// go to start of second LCD row
     d6e:	80 e0       	ldi	r24, 0x00	; 0
     d70:	61 e0       	ldi	r22, 0x01	; 1
     d72:	0e 94 94 0b 	call	0x1728	; 0x1728 <lcd_goto_xy>
			print("mode: ");
     d76:	ce 01       	movw	r24, r28
     d78:	0e 94 14 0b 	call	0x1628	; 0x1628 <print>
			print_long(test);
     d7c:	60 91 0a 03 	lds	r22, 0x030A
     d80:	70 91 0b 03 	lds	r23, 0x030B
     d84:	88 27       	eor	r24, r24
     d86:	77 fd       	sbrc	r23, 7
     d88:	80 95       	com	r24
     d8a:	98 2f       	mov	r25, r24
     d8c:	0e 94 71 0b 	call	0x16e2	; 0x16e2 <print_long>
// output, this lets you choose between driving low (val = 0) and driving high (val = 1).
// NOTE: if val is 0xFF (255), this method will toggle the PORT register pin(s).
static inline void set_digital_output_value(struct IOStruct* ioPin, unsigned char val)
{
	if (val == 0xFF)
		*(ioPin->portRegister) ^= ioPin->bitmask;
     d90:	98 b1       	in	r25, 0x08	; 8
     d92:	80 e1       	ldi	r24, 0x10	; 16
     d94:	89 27       	eor	r24, r25
     d96:	88 b9       	out	0x08, r24	; 8
// low-level method for setting the data direction (i.e. input or output) of an pin or set of pins
// described by an IOStruct pointer.
static inline void set_data_direction(struct IOStruct* ioPin, unsigned char val)
{
	if (val)
		*(ioPin->ddrRegister) |= ioPin->bitmask;
     d98:	3c 9a       	sbi	0x07, 4	; 7
			green_led(TOGGLE);
			pb_delay = 333;
     d9a:	8d e4       	ldi	r24, 0x4D	; 77
     d9c:	91 e0       	ldi	r25, 0x01	; 1
     d9e:	90 93 b6 02 	sts	0x02B6, r25
     da2:	80 93 b5 02 	sts	0x02B5, r24
			//delay_ms(360);
			servo_speed = 200;		// faster BPM needs faster servo speed
     da6:	88 ec       	ldi	r24, 0xC8	; 200
     da8:	80 93 b9 02 	sts	0x02B9, r24
			byte_counter = 0;		//reset counter
     dac:	10 92 07 03 	sts	0x0307, r1
     db0:	10 92 06 03 	sts	0x0306, r1
     db4:	5b c2       	rjmp	.+1206   	; 0x126c <main+0xb00>

					
		}
		else if (test == 13)		// 13 = serial input 'n' = 92 BPM
     db6:	8d 30       	cpi	r24, 0x0D	; 13
     db8:	91 05       	cpc	r25, r1
     dba:	51 f5       	brne	.+84     	; 0xe10 <main+0x6a4>
		{
			clear();				// clear the LCD
     dbc:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <clear>
			print("BPM = 92-94");
     dc0:	82 ed       	ldi	r24, 0xD2	; 210
     dc2:	91 e0       	ldi	r25, 0x01	; 1
     dc4:	0e 94 14 0b 	call	0x1628	; 0x1628 <print>
			lcd_goto_xy(0, 1);		// go to start of second LCD row
     dc8:	80 e0       	ldi	r24, 0x00	; 0
     dca:	61 e0       	ldi	r22, 0x01	; 1
     dcc:	0e 94 94 0b 	call	0x1728	; 0x1728 <lcd_goto_xy>
			print("mode: ");
     dd0:	ce 01       	movw	r24, r28
     dd2:	0e 94 14 0b 	call	0x1628	; 0x1628 <print>
			print_long(test);
     dd6:	60 91 0a 03 	lds	r22, 0x030A
     dda:	70 91 0b 03 	lds	r23, 0x030B
     dde:	88 27       	eor	r24, r24
     de0:	77 fd       	sbrc	r23, 7
     de2:	80 95       	com	r24
     de4:	98 2f       	mov	r25, r24
     de6:	0e 94 71 0b 	call	0x16e2	; 0x16e2 <print_long>
// output, this lets you choose between driving low (val = 0) and driving high (val = 1).
// NOTE: if val is 0xFF (255), this method will toggle the PORT register pin(s).
static inline void set_digital_output_value(struct IOStruct* ioPin, unsigned char val)
{
	if (val == 0xFF)
		*(ioPin->portRegister) ^= ioPin->bitmask;
     dea:	98 b1       	in	r25, 0x08	; 8
     dec:	80 e1       	ldi	r24, 0x10	; 16
     dee:	89 27       	eor	r24, r25
     df0:	88 b9       	out	0x08, r24	; 8
// low-level method for setting the data direction (i.e. input or output) of an pin or set of pins
// described by an IOStruct pointer.
static inline void set_data_direction(struct IOStruct* ioPin, unsigned char val)
{
	if (val)
		*(ioPin->ddrRegister) |= ioPin->bitmask;
     df2:	3c 9a       	sbi	0x07, 4	; 7
			green_led(TOGGLE);
			pb_delay = 326;
     df4:	86 e4       	ldi	r24, 0x46	; 70
     df6:	91 e0       	ldi	r25, 0x01	; 1
     df8:	90 93 b6 02 	sts	0x02B6, r25
     dfc:	80 93 b5 02 	sts	0x02B5, r24
			//delay_ms(345);
			servo_speed = 200;		// faster BPM needs faster servo speed
     e00:	88 ec       	ldi	r24, 0xC8	; 200
     e02:	80 93 b9 02 	sts	0x02B9, r24
			byte_counter = 0;		//reset counter
     e06:	10 92 07 03 	sts	0x0307, r1
     e0a:	10 92 06 03 	sts	0x0306, r1
     e0e:	2e c2       	rjmp	.+1116   	; 0x126c <main+0xb00>
					
		}
		else if (test == 14)		// 14 = serial input 'o' = 95 BPM
     e10:	8e 30       	cpi	r24, 0x0E	; 14
     e12:	91 05       	cpc	r25, r1
     e14:	51 f5       	brne	.+84     	; 0xe6a <main+0x6fe>
		{
			clear();				// clear the LCD
     e16:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <clear>
			print("BPM = 95-97");
     e1a:	8e ed       	ldi	r24, 0xDE	; 222
     e1c:	91 e0       	ldi	r25, 0x01	; 1
     e1e:	0e 94 14 0b 	call	0x1628	; 0x1628 <print>
			lcd_goto_xy(0, 1);		// go to start of second LCD row
     e22:	80 e0       	ldi	r24, 0x00	; 0
     e24:	61 e0       	ldi	r22, 0x01	; 1
     e26:	0e 94 94 0b 	call	0x1728	; 0x1728 <lcd_goto_xy>
			print("mode: ");
     e2a:	ce 01       	movw	r24, r28
     e2c:	0e 94 14 0b 	call	0x1628	; 0x1628 <print>
			print_long(test);
     e30:	60 91 0a 03 	lds	r22, 0x030A
     e34:	70 91 0b 03 	lds	r23, 0x030B
     e38:	88 27       	eor	r24, r24
     e3a:	77 fd       	sbrc	r23, 7
     e3c:	80 95       	com	r24
     e3e:	98 2f       	mov	r25, r24
     e40:	0e 94 71 0b 	call	0x16e2	; 0x16e2 <print_long>
// output, this lets you choose between driving low (val = 0) and driving high (val = 1).
// NOTE: if val is 0xFF (255), this method will toggle the PORT register pin(s).
static inline void set_digital_output_value(struct IOStruct* ioPin, unsigned char val)
{
	if (val == 0xFF)
		*(ioPin->portRegister) ^= ioPin->bitmask;
     e44:	98 b1       	in	r25, 0x08	; 8
     e46:	80 e1       	ldi	r24, 0x10	; 16
     e48:	89 27       	eor	r24, r25
     e4a:	88 b9       	out	0x08, r24	; 8
// low-level method for setting the data direction (i.e. input or output) of an pin or set of pins
// described by an IOStruct pointer.
static inline void set_data_direction(struct IOStruct* ioPin, unsigned char val)
{
	if (val)
		*(ioPin->ddrRegister) |= ioPin->bitmask;
     e4c:	3c 9a       	sbi	0x07, 4	; 7
			green_led(TOGGLE);
			pb_delay = 316;
     e4e:	8c e3       	ldi	r24, 0x3C	; 60
     e50:	91 e0       	ldi	r25, 0x01	; 1
     e52:	90 93 b6 02 	sts	0x02B6, r25
     e56:	80 93 b5 02 	sts	0x02B5, r24
			//delay_ms(335);
			servo_speed = 200;		// faster BPM needs faster servo speed
     e5a:	88 ec       	ldi	r24, 0xC8	; 200
     e5c:	80 93 b9 02 	sts	0x02B9, r24
			byte_counter = 0;		//reset counter
     e60:	10 92 07 03 	sts	0x0307, r1
     e64:	10 92 06 03 	sts	0x0306, r1
     e68:	01 c2       	rjmp	.+1026   	; 0x126c <main+0xb00>
					
		}
		else if (test == 15)		// 15 = serial input 'p' = 98 BPM
     e6a:	8f 30       	cpi	r24, 0x0F	; 15
     e6c:	91 05       	cpc	r25, r1
     e6e:	51 f5       	brne	.+84     	; 0xec4 <main+0x758>
		{
			clear();				// clear the LCD
     e70:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <clear>
			print("BPM = 98-99");
     e74:	8a ee       	ldi	r24, 0xEA	; 234
     e76:	91 e0       	ldi	r25, 0x01	; 1
     e78:	0e 94 14 0b 	call	0x1628	; 0x1628 <print>
			lcd_goto_xy(0, 1);		// go to start of second LCD row
     e7c:	80 e0       	ldi	r24, 0x00	; 0
     e7e:	61 e0       	ldi	r22, 0x01	; 1
     e80:	0e 94 94 0b 	call	0x1728	; 0x1728 <lcd_goto_xy>
			print("mode: ");
     e84:	ce 01       	movw	r24, r28
     e86:	0e 94 14 0b 	call	0x1628	; 0x1628 <print>
			print_long(test);
     e8a:	60 91 0a 03 	lds	r22, 0x030A
     e8e:	70 91 0b 03 	lds	r23, 0x030B
     e92:	88 27       	eor	r24, r24
     e94:	77 fd       	sbrc	r23, 7
     e96:	80 95       	com	r24
     e98:	98 2f       	mov	r25, r24
     e9a:	0e 94 71 0b 	call	0x16e2	; 0x16e2 <print_long>
// output, this lets you choose between driving low (val = 0) and driving high (val = 1).
// NOTE: if val is 0xFF (255), this method will toggle the PORT register pin(s).
static inline void set_digital_output_value(struct IOStruct* ioPin, unsigned char val)
{
	if (val == 0xFF)
		*(ioPin->portRegister) ^= ioPin->bitmask;
     e9e:	98 b1       	in	r25, 0x08	; 8
     ea0:	80 e1       	ldi	r24, 0x10	; 16
     ea2:	89 27       	eor	r24, r25
     ea4:	88 b9       	out	0x08, r24	; 8
// low-level method for setting the data direction (i.e. input or output) of an pin or set of pins
// described by an IOStruct pointer.
static inline void set_data_direction(struct IOStruct* ioPin, unsigned char val)
{
	if (val)
		*(ioPin->ddrRegister) |= ioPin->bitmask;
     ea6:	3c 9a       	sbi	0x07, 4	; 7
			green_led(TOGGLE);
			pb_delay = 306;
     ea8:	82 e3       	ldi	r24, 0x32	; 50
     eaa:	91 e0       	ldi	r25, 0x01	; 1
     eac:	90 93 b6 02 	sts	0x02B6, r25
     eb0:	80 93 b5 02 	sts	0x02B5, r24
			//delay_ms(310);
			servo_speed = 200;		// faster BPM needs faster servo speed
     eb4:	88 ec       	ldi	r24, 0xC8	; 200
     eb6:	80 93 b9 02 	sts	0x02B9, r24
			byte_counter = 0;		//reset counter
     eba:	10 92 07 03 	sts	0x0307, r1
     ebe:	10 92 06 03 	sts	0x0306, r1
     ec2:	d4 c1       	rjmp	.+936    	; 0x126c <main+0xb00>
					
		}
		else if (test == 16)		// 16 = serial input 'q' = 100 BPM
     ec4:	80 31       	cpi	r24, 0x10	; 16
     ec6:	91 05       	cpc	r25, r1
     ec8:	51 f5       	brne	.+84     	; 0xf1e <main+0x7b2>
		{
			clear();				// clear the LCD
     eca:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <clear>
			print("BPM = 100-101");
     ece:	86 ef       	ldi	r24, 0xF6	; 246
     ed0:	91 e0       	ldi	r25, 0x01	; 1
     ed2:	0e 94 14 0b 	call	0x1628	; 0x1628 <print>
			lcd_goto_xy(0, 1);		// go to start of second LCD row
     ed6:	80 e0       	ldi	r24, 0x00	; 0
     ed8:	61 e0       	ldi	r22, 0x01	; 1
     eda:	0e 94 94 0b 	call	0x1728	; 0x1728 <lcd_goto_xy>
			print("mode: ");
     ede:	ce 01       	movw	r24, r28
     ee0:	0e 94 14 0b 	call	0x1628	; 0x1628 <print>
			print_long(test);
     ee4:	60 91 0a 03 	lds	r22, 0x030A
     ee8:	70 91 0b 03 	lds	r23, 0x030B
     eec:	88 27       	eor	r24, r24
     eee:	77 fd       	sbrc	r23, 7
     ef0:	80 95       	com	r24
     ef2:	98 2f       	mov	r25, r24
     ef4:	0e 94 71 0b 	call	0x16e2	; 0x16e2 <print_long>
// output, this lets you choose between driving low (val = 0) and driving high (val = 1).
// NOTE: if val is 0xFF (255), this method will toggle the PORT register pin(s).
static inline void set_digital_output_value(struct IOStruct* ioPin, unsigned char val)
{
	if (val == 0xFF)
		*(ioPin->portRegister) ^= ioPin->bitmask;
     ef8:	98 b1       	in	r25, 0x08	; 8
     efa:	80 e1       	ldi	r24, 0x10	; 16
     efc:	89 27       	eor	r24, r25
     efe:	88 b9       	out	0x08, r24	; 8
// low-level method for setting the data direction (i.e. input or output) of an pin or set of pins
// described by an IOStruct pointer.
static inline void set_data_direction(struct IOStruct* ioPin, unsigned char val)
{
	if (val)
		*(ioPin->ddrRegister) |= ioPin->bitmask;
     f00:	3c 9a       	sbi	0x07, 4	; 7
			green_led(TOGGLE);
			pb_delay = 300;
     f02:	8c e2       	ldi	r24, 0x2C	; 44
     f04:	91 e0       	ldi	r25, 0x01	; 1
     f06:	90 93 b6 02 	sts	0x02B6, r25
     f0a:	80 93 b5 02 	sts	0x02B5, r24
			//delay_ms(290);
			servo_speed = 200;		// faster BPM needs faster servo speed
     f0e:	88 ec       	ldi	r24, 0xC8	; 200
     f10:	80 93 b9 02 	sts	0x02B9, r24
			byte_counter = 0;		//reset counter
     f14:	10 92 07 03 	sts	0x0307, r1
     f18:	10 92 06 03 	sts	0x0306, r1
     f1c:	a7 c1       	rjmp	.+846    	; 0x126c <main+0xb00>
					
		}
		else if (test == 17)		// 17 = serial input 'r' = 102 BPM
     f1e:	81 31       	cpi	r24, 0x11	; 17
     f20:	91 05       	cpc	r25, r1
     f22:	51 f5       	brne	.+84     	; 0xf78 <main+0x80c>
		{
			clear();				// clear the LCD
     f24:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <clear>
			print("BPM = 102-104");
     f28:	84 e0       	ldi	r24, 0x04	; 4
     f2a:	92 e0       	ldi	r25, 0x02	; 2
     f2c:	0e 94 14 0b 	call	0x1628	; 0x1628 <print>
			lcd_goto_xy(0, 1);		// go to start of second LCD row
     f30:	80 e0       	ldi	r24, 0x00	; 0
     f32:	61 e0       	ldi	r22, 0x01	; 1
     f34:	0e 94 94 0b 	call	0x1728	; 0x1728 <lcd_goto_xy>
			print("mode: ");
     f38:	ce 01       	movw	r24, r28
     f3a:	0e 94 14 0b 	call	0x1628	; 0x1628 <print>
			print_long(test);
     f3e:	60 91 0a 03 	lds	r22, 0x030A
     f42:	70 91 0b 03 	lds	r23, 0x030B
     f46:	88 27       	eor	r24, r24
     f48:	77 fd       	sbrc	r23, 7
     f4a:	80 95       	com	r24
     f4c:	98 2f       	mov	r25, r24
     f4e:	0e 94 71 0b 	call	0x16e2	; 0x16e2 <print_long>
// output, this lets you choose between driving low (val = 0) and driving high (val = 1).
// NOTE: if val is 0xFF (255), this method will toggle the PORT register pin(s).
static inline void set_digital_output_value(struct IOStruct* ioPin, unsigned char val)
{
	if (val == 0xFF)
		*(ioPin->portRegister) ^= ioPin->bitmask;
     f52:	98 b1       	in	r25, 0x08	; 8
     f54:	80 e1       	ldi	r24, 0x10	; 16
     f56:	89 27       	eor	r24, r25
     f58:	88 b9       	out	0x08, r24	; 8
// low-level method for setting the data direction (i.e. input or output) of an pin or set of pins
// described by an IOStruct pointer.
static inline void set_data_direction(struct IOStruct* ioPin, unsigned char val)
{
	if (val)
		*(ioPin->ddrRegister) |= ioPin->bitmask;
     f5a:	3c 9a       	sbi	0x07, 4	; 7
			green_led(TOGGLE);
			pb_delay = 294;
     f5c:	86 e2       	ldi	r24, 0x26	; 38
     f5e:	91 e0       	ldi	r25, 0x01	; 1
     f60:	90 93 b6 02 	sts	0x02B6, r25
     f64:	80 93 b5 02 	sts	0x02B5, r24
			//delay_ms(270);
			servo_speed = 200;		// faster BPM needs faster servo speed
     f68:	88 ec       	ldi	r24, 0xC8	; 200
     f6a:	80 93 b9 02 	sts	0x02B9, r24
			byte_counter = 0;		//reset counter
     f6e:	10 92 07 03 	sts	0x0307, r1
     f72:	10 92 06 03 	sts	0x0306, r1
     f76:	7a c1       	rjmp	.+756    	; 0x126c <main+0xb00>
					
		}
		else if (test == 18)		// 18 = serial input 's' = 105 BPM
     f78:	82 31       	cpi	r24, 0x12	; 18
     f7a:	91 05       	cpc	r25, r1
     f7c:	49 f5       	brne	.+82     	; 0xfd0 <main+0x864>
		{
			clear();				// clear the LCD
     f7e:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <clear>
			print("BPM = 105-107");
     f82:	c4 01       	movw	r24, r8
     f84:	0e 94 14 0b 	call	0x1628	; 0x1628 <print>
			lcd_goto_xy(0, 1);		// go to start of second LCD row
     f88:	80 e0       	ldi	r24, 0x00	; 0
     f8a:	61 e0       	ldi	r22, 0x01	; 1
     f8c:	0e 94 94 0b 	call	0x1728	; 0x1728 <lcd_goto_xy>
			print("mode: ");
     f90:	ce 01       	movw	r24, r28
     f92:	0e 94 14 0b 	call	0x1628	; 0x1628 <print>
			print_long(test);
     f96:	60 91 0a 03 	lds	r22, 0x030A
     f9a:	70 91 0b 03 	lds	r23, 0x030B
     f9e:	88 27       	eor	r24, r24
     fa0:	77 fd       	sbrc	r23, 7
     fa2:	80 95       	com	r24
     fa4:	98 2f       	mov	r25, r24
     fa6:	0e 94 71 0b 	call	0x16e2	; 0x16e2 <print_long>
// output, this lets you choose between driving low (val = 0) and driving high (val = 1).
// NOTE: if val is 0xFF (255), this method will toggle the PORT register pin(s).
static inline void set_digital_output_value(struct IOStruct* ioPin, unsigned char val)
{
	if (val == 0xFF)
		*(ioPin->portRegister) ^= ioPin->bitmask;
     faa:	98 b1       	in	r25, 0x08	; 8
     fac:	80 e1       	ldi	r24, 0x10	; 16
     fae:	89 27       	eor	r24, r25
     fb0:	88 b9       	out	0x08, r24	; 8
// low-level method for setting the data direction (i.e. input or output) of an pin or set of pins
// described by an IOStruct pointer.
static inline void set_data_direction(struct IOStruct* ioPin, unsigned char val)
{
	if (val)
		*(ioPin->ddrRegister) |= ioPin->bitmask;
     fb2:	3c 9a       	sbi	0x07, 4	; 7
			green_led(TOGGLE);
			pb_delay = 286;
     fb4:	8e e1       	ldi	r24, 0x1E	; 30
     fb6:	91 e0       	ldi	r25, 0x01	; 1
     fb8:	90 93 b6 02 	sts	0x02B6, r25
     fbc:	80 93 b5 02 	sts	0x02B5, r24
			//delay_ms(250);
			servo_speed = 200;		// faster BPM needs faster servo speed
     fc0:	88 ec       	ldi	r24, 0xC8	; 200
     fc2:	80 93 b9 02 	sts	0x02B9, r24
			byte_counter = 0;					//reset counter
     fc6:	10 92 07 03 	sts	0x0307, r1
     fca:	10 92 06 03 	sts	0x0306, r1
     fce:	4e c1       	rjmp	.+668    	; 0x126c <main+0xb00>
					
		}
		else if (test == 19)		// 19 = serial input 't' = 108 BPM
     fd0:	83 31       	cpi	r24, 0x13	; 19
     fd2:	91 05       	cpc	r25, r1
     fd4:	49 f5       	brne	.+82     	; 0x1028 <main+0x8bc>
		{
			clear();				// clear the LCD
     fd6:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <clear>
			print("BPM = 108-109");
     fda:	c3 01       	movw	r24, r6
     fdc:	0e 94 14 0b 	call	0x1628	; 0x1628 <print>
			lcd_goto_xy(0, 1);		// go to start of second LCD row
     fe0:	80 e0       	ldi	r24, 0x00	; 0
     fe2:	61 e0       	ldi	r22, 0x01	; 1
     fe4:	0e 94 94 0b 	call	0x1728	; 0x1728 <lcd_goto_xy>
			print("mode: ");
     fe8:	ce 01       	movw	r24, r28
     fea:	0e 94 14 0b 	call	0x1628	; 0x1628 <print>
			print_long(test);
     fee:	60 91 0a 03 	lds	r22, 0x030A
     ff2:	70 91 0b 03 	lds	r23, 0x030B
     ff6:	88 27       	eor	r24, r24
     ff8:	77 fd       	sbrc	r23, 7
     ffa:	80 95       	com	r24
     ffc:	98 2f       	mov	r25, r24
     ffe:	0e 94 71 0b 	call	0x16e2	; 0x16e2 <print_long>
// output, this lets you choose between driving low (val = 0) and driving high (val = 1).
// NOTE: if val is 0xFF (255), this method will toggle the PORT register pin(s).
static inline void set_digital_output_value(struct IOStruct* ioPin, unsigned char val)
{
	if (val == 0xFF)
		*(ioPin->portRegister) ^= ioPin->bitmask;
    1002:	98 b1       	in	r25, 0x08	; 8
    1004:	80 e1       	ldi	r24, 0x10	; 16
    1006:	89 27       	eor	r24, r25
    1008:	88 b9       	out	0x08, r24	; 8
// low-level method for setting the data direction (i.e. input or output) of an pin or set of pins
// described by an IOStruct pointer.
static inline void set_data_direction(struct IOStruct* ioPin, unsigned char val)
{
	if (val)
		*(ioPin->ddrRegister) |= ioPin->bitmask;
    100a:	3c 9a       	sbi	0x07, 4	; 7
			green_led(TOGGLE);
			pb_delay = 278;
    100c:	86 e1       	ldi	r24, 0x16	; 22
    100e:	91 e0       	ldi	r25, 0x01	; 1
    1010:	90 93 b6 02 	sts	0x02B6, r25
    1014:	80 93 b5 02 	sts	0x02B5, r24
			//delay_ms(440);
			servo_speed = 200;		// faster BPM needs faster servo speed
    1018:	88 ec       	ldi	r24, 0xC8	; 200
    101a:	80 93 b9 02 	sts	0x02B9, r24
			byte_counter = 0;		//reset counter
    101e:	10 92 07 03 	sts	0x0307, r1
    1022:	10 92 06 03 	sts	0x0306, r1
    1026:	22 c1       	rjmp	.+580    	; 0x126c <main+0xb00>

		}
		else if (test == 20)		// 20 = serial input 'u' = 110 BPM
    1028:	84 31       	cpi	r24, 0x14	; 20
    102a:	91 05       	cpc	r25, r1
    102c:	51 f5       	brne	.+84     	; 0x1082 <main+0x916>
		{

			clear();				// clear the LCD
    102e:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <clear>
			print("BPM = 110-111");
    1032:	8e e2       	ldi	r24, 0x2E	; 46
    1034:	92 e0       	ldi	r25, 0x02	; 2
    1036:	0e 94 14 0b 	call	0x1628	; 0x1628 <print>
			lcd_goto_xy(0, 1);		// go to start of second LCD row
    103a:	80 e0       	ldi	r24, 0x00	; 0
    103c:	61 e0       	ldi	r22, 0x01	; 1
    103e:	0e 94 94 0b 	call	0x1728	; 0x1728 <lcd_goto_xy>
			print("mode: ");
    1042:	ce 01       	movw	r24, r28
    1044:	0e 94 14 0b 	call	0x1628	; 0x1628 <print>
			print_long(test);
    1048:	60 91 0a 03 	lds	r22, 0x030A
    104c:	70 91 0b 03 	lds	r23, 0x030B
    1050:	88 27       	eor	r24, r24
    1052:	77 fd       	sbrc	r23, 7
    1054:	80 95       	com	r24
    1056:	98 2f       	mov	r25, r24
    1058:	0e 94 71 0b 	call	0x16e2	; 0x16e2 <print_long>
// output, this lets you choose between driving low (val = 0) and driving high (val = 1).
// NOTE: if val is 0xFF (255), this method will toggle the PORT register pin(s).
static inline void set_digital_output_value(struct IOStruct* ioPin, unsigned char val)
{
	if (val == 0xFF)
		*(ioPin->portRegister) ^= ioPin->bitmask;
    105c:	98 b1       	in	r25, 0x08	; 8
    105e:	80 e1       	ldi	r24, 0x10	; 16
    1060:	89 27       	eor	r24, r25
    1062:	88 b9       	out	0x08, r24	; 8
// low-level method for setting the data direction (i.e. input or output) of an pin or set of pins
// described by an IOStruct pointer.
static inline void set_data_direction(struct IOStruct* ioPin, unsigned char val)
{
	if (val)
		*(ioPin->ddrRegister) |= ioPin->bitmask;
    1064:	3c 9a       	sbi	0x07, 4	; 7
			green_led(TOGGLE);
			pb_delay = 273;
    1066:	81 e1       	ldi	r24, 0x11	; 17
    1068:	91 e0       	ldi	r25, 0x01	; 1
    106a:	90 93 b6 02 	sts	0x02B6, r25
    106e:	80 93 b5 02 	sts	0x02B5, r24
			//delay_ms(400);
			servo_speed = 200;		// faster BPM needs faster servo speed
    1072:	88 ec       	ldi	r24, 0xC8	; 200
    1074:	80 93 b9 02 	sts	0x02B9, r24
			byte_counter = 0;		//reset counter
    1078:	10 92 07 03 	sts	0x0307, r1
    107c:	10 92 06 03 	sts	0x0306, r1
    1080:	f5 c0       	rjmp	.+490    	; 0x126c <main+0xb00>
			
		}
		else if (test == 21)		// 21 = serial input 'v' = 112 BPM
    1082:	85 31       	cpi	r24, 0x15	; 21
    1084:	91 05       	cpc	r25, r1
    1086:	49 f5       	brne	.+82     	; 0x10da <main+0x96e>
		{
			clear();				// clear the LCD
    1088:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <clear>
			print("BPM = 112-114");
    108c:	c1 01       	movw	r24, r2
    108e:	0e 94 14 0b 	call	0x1628	; 0x1628 <print>
			lcd_goto_xy(0, 1);		// go to start of second LCD row
    1092:	80 e0       	ldi	r24, 0x00	; 0
    1094:	61 e0       	ldi	r22, 0x01	; 1
    1096:	0e 94 94 0b 	call	0x1728	; 0x1728 <lcd_goto_xy>
			print("mode: ");
    109a:	ce 01       	movw	r24, r28
    109c:	0e 94 14 0b 	call	0x1628	; 0x1628 <print>
			print_long(test);
    10a0:	60 91 0a 03 	lds	r22, 0x030A
    10a4:	70 91 0b 03 	lds	r23, 0x030B
    10a8:	88 27       	eor	r24, r24
    10aa:	77 fd       	sbrc	r23, 7
    10ac:	80 95       	com	r24
    10ae:	98 2f       	mov	r25, r24
    10b0:	0e 94 71 0b 	call	0x16e2	; 0x16e2 <print_long>
// output, this lets you choose between driving low (val = 0) and driving high (val = 1).
// NOTE: if val is 0xFF (255), this method will toggle the PORT register pin(s).
static inline void set_digital_output_value(struct IOStruct* ioPin, unsigned char val)
{
	if (val == 0xFF)
		*(ioPin->portRegister) ^= ioPin->bitmask;
    10b4:	98 b1       	in	r25, 0x08	; 8
    10b6:	80 e1       	ldi	r24, 0x10	; 16
    10b8:	89 27       	eor	r24, r25
    10ba:	88 b9       	out	0x08, r24	; 8
// low-level method for setting the data direction (i.e. input or output) of an pin or set of pins
// described by an IOStruct pointer.
static inline void set_data_direction(struct IOStruct* ioPin, unsigned char val)
{
	if (val)
		*(ioPin->ddrRegister) |= ioPin->bitmask;
    10bc:	3c 9a       	sbi	0x07, 4	; 7
			green_led(TOGGLE);
			pb_delay = 268;
    10be:	8c e0       	ldi	r24, 0x0C	; 12
    10c0:	91 e0       	ldi	r25, 0x01	; 1
    10c2:	90 93 b6 02 	sts	0x02B6, r25
    10c6:	80 93 b5 02 	sts	0x02B5, r24
			//delay_ms(360);
			servo_speed = 200;		// faster BPM needs faster servo speed
    10ca:	88 ec       	ldi	r24, 0xC8	; 200
    10cc:	80 93 b9 02 	sts	0x02B9, r24
			byte_counter = 0;		//reset counter
    10d0:	10 92 07 03 	sts	0x0307, r1
    10d4:	10 92 06 03 	sts	0x0306, r1
    10d8:	c9 c0       	rjmp	.+402    	; 0x126c <main+0xb00>

			
		}
		else if (test == 22)		// 22 = serial input 'w' = 115 BPM
    10da:	86 31       	cpi	r24, 0x16	; 22
    10dc:	91 05       	cpc	r25, r1
    10de:	51 f5       	brne	.+84     	; 0x1134 <main+0x9c8>
		{
			clear();				// clear the LCD
    10e0:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <clear>
			print("BPM = 115-117");
    10e4:	8a e4       	ldi	r24, 0x4A	; 74
    10e6:	92 e0       	ldi	r25, 0x02	; 2
    10e8:	0e 94 14 0b 	call	0x1628	; 0x1628 <print>
			lcd_goto_xy(0, 1);		// go to start of second LCD row
    10ec:	80 e0       	ldi	r24, 0x00	; 0
    10ee:	61 e0       	ldi	r22, 0x01	; 1
    10f0:	0e 94 94 0b 	call	0x1728	; 0x1728 <lcd_goto_xy>
			print("mode: ");
    10f4:	ce 01       	movw	r24, r28
    10f6:	0e 94 14 0b 	call	0x1628	; 0x1628 <print>
			print_long(test);
    10fa:	60 91 0a 03 	lds	r22, 0x030A
    10fe:	70 91 0b 03 	lds	r23, 0x030B
    1102:	88 27       	eor	r24, r24
    1104:	77 fd       	sbrc	r23, 7
    1106:	80 95       	com	r24
    1108:	98 2f       	mov	r25, r24
    110a:	0e 94 71 0b 	call	0x16e2	; 0x16e2 <print_long>
// output, this lets you choose between driving low (val = 0) and driving high (val = 1).
// NOTE: if val is 0xFF (255), this method will toggle the PORT register pin(s).
static inline void set_digital_output_value(struct IOStruct* ioPin, unsigned char val)
{
	if (val == 0xFF)
		*(ioPin->portRegister) ^= ioPin->bitmask;
    110e:	98 b1       	in	r25, 0x08	; 8
    1110:	80 e1       	ldi	r24, 0x10	; 16
    1112:	89 27       	eor	r24, r25
    1114:	88 b9       	out	0x08, r24	; 8
// low-level method for setting the data direction (i.e. input or output) of an pin or set of pins
// described by an IOStruct pointer.
static inline void set_data_direction(struct IOStruct* ioPin, unsigned char val)
{
	if (val)
		*(ioPin->ddrRegister) |= ioPin->bitmask;
    1116:	3c 9a       	sbi	0x07, 4	; 7
			green_led(TOGGLE);
			pb_delay = 261;
    1118:	85 e0       	ldi	r24, 0x05	; 5
    111a:	91 e0       	ldi	r25, 0x01	; 1
    111c:	90 93 b6 02 	sts	0x02B6, r25
    1120:	80 93 b5 02 	sts	0x02B5, r24
			//delay_ms(345);
			servo_speed = 200;		// faster BPM needs faster servo speed
    1124:	88 ec       	ldi	r24, 0xC8	; 200
    1126:	80 93 b9 02 	sts	0x02B9, r24
			byte_counter = 0;		//reset counter
    112a:	10 92 07 03 	sts	0x0307, r1
    112e:	10 92 06 03 	sts	0x0306, r1
    1132:	9c c0       	rjmp	.+312    	; 0x126c <main+0xb00>
			
		}
		else if (test == 23)		// 23 = serial input 'x' = 118 BPM
    1134:	87 31       	cpi	r24, 0x17	; 23
    1136:	91 05       	cpc	r25, r1
    1138:	51 f5       	brne	.+84     	; 0x118e <main+0xa22>
		{
			clear();				// clear the LCD
    113a:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <clear>
			print("BPM = 118-119");
    113e:	88 e5       	ldi	r24, 0x58	; 88
    1140:	92 e0       	ldi	r25, 0x02	; 2
    1142:	0e 94 14 0b 	call	0x1628	; 0x1628 <print>
			lcd_goto_xy(0, 1);		// go to start of second LCD row
    1146:	80 e0       	ldi	r24, 0x00	; 0
    1148:	61 e0       	ldi	r22, 0x01	; 1
    114a:	0e 94 94 0b 	call	0x1728	; 0x1728 <lcd_goto_xy>
			print("mode: ");
    114e:	ce 01       	movw	r24, r28
    1150:	0e 94 14 0b 	call	0x1628	; 0x1628 <print>
			print_long(test);
    1154:	60 91 0a 03 	lds	r22, 0x030A
    1158:	70 91 0b 03 	lds	r23, 0x030B
    115c:	88 27       	eor	r24, r24
    115e:	77 fd       	sbrc	r23, 7
    1160:	80 95       	com	r24
    1162:	98 2f       	mov	r25, r24
    1164:	0e 94 71 0b 	call	0x16e2	; 0x16e2 <print_long>
// output, this lets you choose between driving low (val = 0) and driving high (val = 1).
// NOTE: if val is 0xFF (255), this method will toggle the PORT register pin(s).
static inline void set_digital_output_value(struct IOStruct* ioPin, unsigned char val)
{
	if (val == 0xFF)
		*(ioPin->portRegister) ^= ioPin->bitmask;
    1168:	98 b1       	in	r25, 0x08	; 8
    116a:	80 e1       	ldi	r24, 0x10	; 16
    116c:	89 27       	eor	r24, r25
    116e:	88 b9       	out	0x08, r24	; 8
// low-level method for setting the data direction (i.e. input or output) of an pin or set of pins
// described by an IOStruct pointer.
static inline void set_data_direction(struct IOStruct* ioPin, unsigned char val)
{
	if (val)
		*(ioPin->ddrRegister) |= ioPin->bitmask;
    1170:	3c 9a       	sbi	0x07, 4	; 7
			green_led(TOGGLE);
			pb_delay = 254;
    1172:	8e ef       	ldi	r24, 0xFE	; 254
    1174:	90 e0       	ldi	r25, 0x00	; 0
    1176:	90 93 b6 02 	sts	0x02B6, r25
    117a:	80 93 b5 02 	sts	0x02B5, r24
			//delay_ms(335);
			servo_speed = 200;		// faster BPM needs faster servo speed
    117e:	88 ec       	ldi	r24, 0xC8	; 200
    1180:	80 93 b9 02 	sts	0x02B9, r24
			byte_counter = 0;		//reset counter
    1184:	10 92 07 03 	sts	0x0307, r1
    1188:	10 92 06 03 	sts	0x0306, r1
    118c:	6f c0       	rjmp	.+222    	; 0x126c <main+0xb00>
			
		}
		else if (test == 24)		// 24 = serial input 'y' = 120 BPM
    118e:	88 31       	cpi	r24, 0x18	; 24
    1190:	91 05       	cpc	r25, r1
    1192:	51 f5       	brne	.+84     	; 0x11e8 <main+0xa7c>
		{
			clear();				// clear the LCD
    1194:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <clear>
			print("BPM = 120");
    1198:	86 e6       	ldi	r24, 0x66	; 102
    119a:	92 e0       	ldi	r25, 0x02	; 2
    119c:	0e 94 14 0b 	call	0x1628	; 0x1628 <print>
			lcd_goto_xy(0, 1);		// go to start of second LCD row
    11a0:	80 e0       	ldi	r24, 0x00	; 0
    11a2:	61 e0       	ldi	r22, 0x01	; 1
    11a4:	0e 94 94 0b 	call	0x1728	; 0x1728 <lcd_goto_xy>
			print("mode: ");
    11a8:	ce 01       	movw	r24, r28
    11aa:	0e 94 14 0b 	call	0x1628	; 0x1628 <print>
			print_long(test);
    11ae:	60 91 0a 03 	lds	r22, 0x030A
    11b2:	70 91 0b 03 	lds	r23, 0x030B
    11b6:	88 27       	eor	r24, r24
    11b8:	77 fd       	sbrc	r23, 7
    11ba:	80 95       	com	r24
    11bc:	98 2f       	mov	r25, r24
    11be:	0e 94 71 0b 	call	0x16e2	; 0x16e2 <print_long>
// output, this lets you choose between driving low (val = 0) and driving high (val = 1).
// NOTE: if val is 0xFF (255), this method will toggle the PORT register pin(s).
static inline void set_digital_output_value(struct IOStruct* ioPin, unsigned char val)
{
	if (val == 0xFF)
		*(ioPin->portRegister) ^= ioPin->bitmask;
    11c2:	98 b1       	in	r25, 0x08	; 8
    11c4:	80 e1       	ldi	r24, 0x10	; 16
    11c6:	89 27       	eor	r24, r25
    11c8:	88 b9       	out	0x08, r24	; 8
// low-level method for setting the data direction (i.e. input or output) of an pin or set of pins
// described by an IOStruct pointer.
static inline void set_data_direction(struct IOStruct* ioPin, unsigned char val)
{
	if (val)
		*(ioPin->ddrRegister) |= ioPin->bitmask;
    11ca:	3c 9a       	sbi	0x07, 4	; 7
			green_led(TOGGLE);
			pb_delay = 250;
    11cc:	8a ef       	ldi	r24, 0xFA	; 250
    11ce:	90 e0       	ldi	r25, 0x00	; 0
    11d0:	90 93 b6 02 	sts	0x02B6, r25
    11d4:	80 93 b5 02 	sts	0x02B5, r24
			//delay_ms(310);
			servo_speed = 200;		// faster BPM needs faster servo speed
    11d8:	88 ec       	ldi	r24, 0xC8	; 200
    11da:	80 93 b9 02 	sts	0x02B9, r24
			byte_counter = 0;		//reset counter
    11de:	10 92 07 03 	sts	0x0307, r1
    11e2:	10 92 06 03 	sts	0x0306, r1
    11e6:	42 c0       	rjmp	.+132    	; 0x126c <main+0xb00>
			
		}
		else if (test == 25)		// 25 = serial input 'z' = PAUSED
    11e8:	89 31       	cpi	r24, 0x19	; 25
    11ea:	91 05       	cpc	r25, r1
    11ec:	29 f5       	brne	.+74     	; 0x1238 <main+0xacc>
		{
			clear();				// clear the LCD
    11ee:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <clear>
			print("PAUSED");
    11f2:	c2 01       	movw	r24, r4
    11f4:	0e 94 14 0b 	call	0x1628	; 0x1628 <print>
			lcd_goto_xy(0, 1);		// go to start of second LCD row
    11f8:	80 e0       	ldi	r24, 0x00	; 0
    11fa:	61 e0       	ldi	r22, 0x01	; 1
    11fc:	0e 94 94 0b 	call	0x1728	; 0x1728 <lcd_goto_xy>
			print("mode: ");
    1200:	ce 01       	movw	r24, r28
    1202:	0e 94 14 0b 	call	0x1628	; 0x1628 <print>
			print_long(test);
    1206:	60 91 0a 03 	lds	r22, 0x030A
    120a:	70 91 0b 03 	lds	r23, 0x030B
    120e:	88 27       	eor	r24, r24
    1210:	77 fd       	sbrc	r23, 7
    1212:	80 95       	com	r24
    1214:	98 2f       	mov	r25, r24
    1216:	0e 94 71 0b 	call	0x16e2	; 0x16e2 <print_long>
			delay_ms(200);
    121a:	88 ec       	ldi	r24, 0xC8	; 200
    121c:	90 e0       	ldi	r25, 0x00	; 0
    121e:	0e 94 74 14 	call	0x28e8	; 0x28e8 <delay_ms>
			byte_counter = 0;		//reset counter
    1222:	10 92 07 03 	sts	0x0307, r1
    1226:	10 92 06 03 	sts	0x0306, r1
			flipper2 = 1;			// set flipper2 toggle value to 1 so
    122a:	81 e0       	ldi	r24, 0x01	; 1
    122c:	90 e0       	ldi	r25, 0x00	; 0
    122e:	90 93 09 03 	sts	0x0309, r25
    1232:	80 93 08 03 	sts	0x0308, r24
    1236:	1a c0       	rjmp	.+52     	; 0x126c <main+0xb00>
// output, this lets you choose between driving low (val = 0) and driving high (val = 1).
// NOTE: if val is 0xFF (255), this method will toggle the PORT register pin(s).
static inline void set_digital_output_value(struct IOStruct* ioPin, unsigned char val)
{
	if (val == 0xFF)
		*(ioPin->portRegister) ^= ioPin->bitmask;
    1238:	98 b1       	in	r25, 0x08	; 8
    123a:	80 e1       	ldi	r24, 0x10	; 16
    123c:	89 27       	eor	r24, r25
    123e:	88 b9       	out	0x08, r24	; 8
// low-level method for setting the data direction (i.e. input or output) of an pin or set of pins
// described by an IOStruct pointer.
static inline void set_data_direction(struct IOStruct* ioPin, unsigned char val)
{
	if (val)
		*(ioPin->ddrRegister) |= ioPin->bitmask;
    1240:	3c 9a       	sbi	0x07, 4	; 7
		}
		//Default mode of 60 BPM
		else
		{
			green_led(TOGGLE);
			clear();	// clear the LCD
    1242:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <clear>
			print("Robot Drummer");
    1246:	c6 01       	movw	r24, r12
    1248:	0e 94 14 0b 	call	0x1628	; 0x1628 <print>
			lcd_goto_xy(0, 1);	// go to start of second LCD row
    124c:	80 e0       	ldi	r24, 0x00	; 0
    124e:	61 e0       	ldi	r22, 0x01	; 1
    1250:	0e 94 94 0b 	call	0x1728	; 0x1728 <lcd_goto_xy>
			print("Default mode");
    1254:	c5 01       	movw	r24, r10
    1256:	0e 94 14 0b 	call	0x1628	; 0x1628 <print>
			pb_delay = 500;
    125a:	84 ef       	ldi	r24, 0xF4	; 244
    125c:	91 e0       	ldi	r25, 0x01	; 1
    125e:	90 93 b6 02 	sts	0x02B6, r25
    1262:	80 93 b5 02 	sts	0x02B5, r24
			//delay_ms(pb_delay);
			servo_speed = 200;		// faster BPM needs faster servo speed
    1266:	88 ec       	ldi	r24, 0xC8	; 200
    1268:	80 93 b9 02 	sts	0x02B9, r24
			
		}
		
		delay_ms(pb_delay);		//moved delay out of 'else if' tests to here
    126c:	80 91 b5 02 	lds	r24, 0x02B5
    1270:	90 91 b6 02 	lds	r25, 0x02B6
    1274:	0e 94 74 14 	call	0x28e8	; 0x28e8 <delay_ms>
		
		// If the user presses the middle button, send "Robots Rule!"
		// and wait until the user releases the button.
		if (button_is_pressed(MIDDLE_BUTTON))
    1278:	88 e0       	ldi	r24, 0x08	; 8
    127a:	0e 94 d7 0b 	call	0x17ae	; 0x17ae <button_is_pressed>
    127e:	88 23       	and	r24, r24
    1280:	69 f1       	breq	.+90     	; 0x12dc <main+0xb70>
		{
			wait_for_sending_to_finish();
    1282:	0e 94 b6 00 	call	0x16c	; 0x16c <wait_for_sending_to_finish>
			memcpy_P(send_buffer, PSTR("Robots Rule!\r\n"), 12);
    1286:	c8 01       	movw	r24, r16
    1288:	6e e0       	ldi	r22, 0x0E	; 14
    128a:	71 e0       	ldi	r23, 0x01	; 1
    128c:	4c e0       	ldi	r20, 0x0C	; 12
    128e:	50 e0       	ldi	r21, 0x00	; 0
    1290:	0e 94 54 1a 	call	0x34a8	; 0x34a8 <memcpy_P>
			serial_send(USB_COMM, send_buffer, 12);
    1294:	82 e0       	ldi	r24, 0x02	; 2
    1296:	b8 01       	movw	r22, r16
    1298:	4c e0       	ldi	r20, 0x0C	; 12
    129a:	0e 94 f6 0f 	call	0x1fec	; 0x1fec <serial_send>
			send_buffer[12] = 0;	// terminate the string
    129e:	f7 01       	movw	r30, r14
    12a0:	10 82       	st	Z, r1
			clear();				// clear the LCD
    12a2:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <clear>
			lcd_goto_xy(0, 1);		// go to start of second LCD row
    12a6:	80 e0       	ldi	r24, 0x00	; 0
    12a8:	61 e0       	ldi	r22, 0x01	; 1
    12aa:	0e 94 94 0b 	call	0x1728	; 0x1728 <lcd_goto_xy>
			print("Delay (ms): ");
    12ae:	84 e8       	ldi	r24, 0x84	; 132
    12b0:	92 e0       	ldi	r25, 0x02	; 2
    12b2:	0e 94 14 0b 	call	0x1628	; 0x1628 <print>
			print_long(pb_delay);
    12b6:	60 91 b5 02 	lds	r22, 0x02B5
    12ba:	70 91 b6 02 	lds	r23, 0x02B6
    12be:	80 e0       	ldi	r24, 0x00	; 0
    12c0:	90 e0       	ldi	r25, 0x00	; 0
    12c2:	0e 94 71 0b 	call	0x16e2	; 0x16e2 <print_long>
			
			delay_ms(1000);
    12c6:	88 ee       	ldi	r24, 0xE8	; 232
    12c8:	93 e0       	ldi	r25, 0x03	; 3
    12ca:	0e 94 74 14 	call	0x28e8	; 0x28e8 <delay_ms>
			byte_counter = 0;		// reset detect cycle by pressing button
    12ce:	10 92 07 03 	sts	0x0307, r1
    12d2:	10 92 06 03 	sts	0x0306, r1
			// serial_check() function, which could cause serial bytes to be
			// lost.  It will also not be able to send any bytes, so the bytes
			// bytes we just queued for transmission will not be sent until
			// after the following blocking function exits once the button is
			// released. 
			wait_for_button_release(MIDDLE_BUTTON);
    12d6:	88 e0       	ldi	r24, 0x08	; 8
    12d8:	0e 94 c3 0b 	call	0x1786	; 0x1786 <wait_for_button_release>
		}
		// If the user presses the TOP button, increment BPM Mode by 1
		if (button_is_pressed(TOP_BUTTON))
    12dc:	80 e2       	ldi	r24, 0x20	; 32
    12de:	0e 94 d7 0b 	call	0x17ae	; 0x17ae <button_is_pressed>
    12e2:	88 23       	and	r24, r24
    12e4:	89 f1       	breq	.+98     	; 0x1348 <main+0xbdc>
		{
			wait_for_sending_to_finish();
    12e6:	0e 94 b6 00 	call	0x16c	; 0x16c <wait_for_sending_to_finish>
			clear();				// clear the LCD
    12ea:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <clear>
			print("BPM Mode Up");
    12ee:	81 e9       	ldi	r24, 0x91	; 145
    12f0:	92 e0       	ldi	r25, 0x02	; 2
    12f2:	0e 94 14 0b 	call	0x1628	; 0x1628 <print>
			
			if (test <= 25)			// BPM Mode '10' is wait state
    12f6:	80 91 0a 03 	lds	r24, 0x030A
    12fa:	90 91 0b 03 	lds	r25, 0x030B
    12fe:	8a 31       	cpi	r24, 0x1A	; 26
    1300:	91 05       	cpc	r25, r1
    1302:	2c f4       	brge	.+10     	; 0x130e <main+0xba2>
			{
				test = test + 1;
    1304:	01 96       	adiw	r24, 0x01	; 1
    1306:	90 93 0b 03 	sts	0x030B, r25
    130a:	80 93 0a 03 	sts	0x030A, r24
			}
		
			lcd_goto_xy(0, 1);		// go to start of second LCD row
    130e:	80 e0       	ldi	r24, 0x00	; 0
    1310:	61 e0       	ldi	r22, 0x01	; 1
    1312:	0e 94 94 0b 	call	0x1728	; 0x1728 <lcd_goto_xy>
			print("To Mode ");
    1316:	8d e9       	ldi	r24, 0x9D	; 157
    1318:	92 e0       	ldi	r25, 0x02	; 2
    131a:	0e 94 14 0b 	call	0x1628	; 0x1628 <print>
			print_long(test);
    131e:	60 91 0a 03 	lds	r22, 0x030A
    1322:	70 91 0b 03 	lds	r23, 0x030B
    1326:	88 27       	eor	r24, r24
    1328:	77 fd       	sbrc	r23, 7
    132a:	80 95       	com	r24
    132c:	98 2f       	mov	r25, r24
    132e:	0e 94 71 0b 	call	0x16e2	; 0x16e2 <print_long>
			delay_ms(1000);
    1332:	88 ee       	ldi	r24, 0xE8	; 232
    1334:	93 e0       	ldi	r25, 0x03	; 3
    1336:	0e 94 74 14 	call	0x28e8	; 0x28e8 <delay_ms>
			byte_counter = 0;		// reset detect cycle by pressing button
    133a:	10 92 07 03 	sts	0x0307, r1
    133e:	10 92 06 03 	sts	0x0306, r1
			wait_for_button_release(TOP_BUTTON);
    1342:	80 e2       	ldi	r24, 0x20	; 32
    1344:	0e 94 c3 0b 	call	0x1786	; 0x1786 <wait_for_button_release>
		}
		// If the user presses the BOTTOM button, decrement delay by 10 ms
		if (button_is_pressed(BOTTOM_BUTTON))
    1348:	84 e0       	ldi	r24, 0x04	; 4
    134a:	0e 94 d7 0b 	call	0x17ae	; 0x17ae <button_is_pressed>
    134e:	88 23       	and	r24, r24
    1350:	09 f4       	brne	.+2      	; 0x1354 <main+0xbe8>
    1352:	87 ca       	rjmp	.-2802   	; 0x862 <main+0xf6>
		{
			wait_for_sending_to_finish();
    1354:	0e 94 b6 00 	call	0x16c	; 0x16c <wait_for_sending_to_finish>
			clear();				// clear the LCD
    1358:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <clear>
			print("BPM Mode Down");
    135c:	86 ea       	ldi	r24, 0xA6	; 166
    135e:	92 e0       	ldi	r25, 0x02	; 2
    1360:	0e 94 14 0b 	call	0x1628	; 0x1628 <print>
					
			if (test >= 1)		//fastest speed, 
    1364:	80 91 0a 03 	lds	r24, 0x030A
    1368:	90 91 0b 03 	lds	r25, 0x030B
    136c:	18 16       	cp	r1, r24
    136e:	19 06       	cpc	r1, r25
    1370:	2c f4       	brge	.+10     	; 0x137c <main+0xc10>
			{
				test = test - 1;
    1372:	01 97       	sbiw	r24, 0x01	; 1
    1374:	90 93 0b 03 	sts	0x030B, r25
    1378:	80 93 0a 03 	sts	0x030A, r24
			}
			
			lcd_goto_xy(0, 1);		// go to start of second LCD row
    137c:	80 e0       	ldi	r24, 0x00	; 0
    137e:	61 e0       	ldi	r22, 0x01	; 1
    1380:	0e 94 94 0b 	call	0x1728	; 0x1728 <lcd_goto_xy>
			print("To Mode ");
    1384:	8d e9       	ldi	r24, 0x9D	; 157
    1386:	92 e0       	ldi	r25, 0x02	; 2
    1388:	0e 94 14 0b 	call	0x1628	; 0x1628 <print>
			print_long(test);
    138c:	60 91 0a 03 	lds	r22, 0x030A
    1390:	70 91 0b 03 	lds	r23, 0x030B
    1394:	88 27       	eor	r24, r24
    1396:	77 fd       	sbrc	r23, 7
    1398:	80 95       	com	r24
    139a:	98 2f       	mov	r25, r24
    139c:	0e 94 71 0b 	call	0x16e2	; 0x16e2 <print_long>
			delay_ms(1000);
    13a0:	88 ee       	ldi	r24, 0xE8	; 232
    13a2:	93 e0       	ldi	r25, 0x03	; 3
    13a4:	0e 94 74 14 	call	0x28e8	; 0x28e8 <delay_ms>
			byte_counter = 0;		// reset detect cycle by pressing button
    13a8:	10 92 07 03 	sts	0x0307, r1
    13ac:	10 92 06 03 	sts	0x0306, r1
			wait_for_button_release(BOTTOM_BUTTON);
    13b0:	84 e0       	ldi	r24, 0x04	; 4
    13b2:	0e 94 c3 0b 	call	0x1786	; 0x1786 <wait_for_button_release>
    13b6:	55 ca       	rjmp	.-2902   	; 0x862 <main+0xf6>

000013b8 <delayMicroseconds.clone.0>:
    13b8:	81 e0       	ldi	r24, 0x01	; 1
    13ba:	90 e0       	ldi	r25, 0x00	; 0
    13bc:	6f 93       	push	r22
    13be:	64 e0       	ldi	r22, 0x04	; 4
    13c0:	6a 95       	dec	r22
    13c2:	f1 f7       	brne	.-4      	; 0x13c0 <delayMicroseconds.clone.0+0x8>
    13c4:	6f 91       	pop	r22
    13c6:	01 97       	sbiw	r24, 0x01	; 1
    13c8:	c9 f7       	brne	.-14     	; 0x13bc <delayMicroseconds.clone.0+0x4>
    13ca:	08 95       	ret

000013cc <_ZN12OrangutanLCD8busyWaitEv>:
    13cc:	0f 93       	push	r16
    13ce:	1f 93       	push	r17
    13d0:	cf 93       	push	r28
    13d2:	df 93       	push	r29
    13d4:	17 b1       	in	r17, 0x07	; 7
    13d6:	3d 98       	cbi	0x07, 5	; 7
    13d8:	28 98       	cbi	0x05, 0	; 5
    13da:	29 9a       	sbi	0x05, 1	; 5
    13dc:	c0 e0       	ldi	r28, 0x00	; 0
    13de:	d0 e0       	ldi	r29, 0x00	; 0
    13e0:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <delayMicroseconds.clone.0>
    13e4:	2a 9a       	sbi	0x05, 2	; 5
    13e6:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <delayMicroseconds.clone.0>
    13ea:	06 b1       	in	r16, 0x06	; 6
    13ec:	2a 98       	cbi	0x05, 2	; 5
    13ee:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <delayMicroseconds.clone.0>
    13f2:	2a 9a       	sbi	0x05, 2	; 5
    13f4:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <delayMicroseconds.clone.0>
    13f8:	2a 98       	cbi	0x05, 2	; 5
    13fa:	24 96       	adiw	r28, 0x04	; 4
    13fc:	05 ff       	sbrs	r16, 5
    13fe:	10 c0       	rjmp	.+32     	; 0x1420 <_ZN12OrangutanLCD8busyWaitEv+0x54>
    1400:	9e 01       	movw	r18, r28
    1402:	40 e0       	ldi	r20, 0x00	; 0
    1404:	50 e0       	ldi	r21, 0x00	; 0
    1406:	80 91 11 03 	lds	r24, 0x0311
    140a:	90 91 12 03 	lds	r25, 0x0312
    140e:	a0 91 13 03 	lds	r26, 0x0313
    1412:	b0 91 14 03 	lds	r27, 0x0314
    1416:	28 17       	cp	r18, r24
    1418:	39 07       	cpc	r19, r25
    141a:	4a 07       	cpc	r20, r26
    141c:	5b 07       	cpc	r21, r27
    141e:	00 f3       	brcs	.-64     	; 0x13e0 <_ZN12OrangutanLCD8busyWaitEv+0x14>
    1420:	9e 01       	movw	r18, r28
    1422:	40 e0       	ldi	r20, 0x00	; 0
    1424:	50 e0       	ldi	r21, 0x00	; 0
    1426:	80 91 11 03 	lds	r24, 0x0311
    142a:	90 91 12 03 	lds	r25, 0x0312
    142e:	a0 91 13 03 	lds	r26, 0x0313
    1432:	b0 91 14 03 	lds	r27, 0x0314
    1436:	28 17       	cp	r18, r24
    1438:	39 07       	cpc	r19, r25
    143a:	4a 07       	cpc	r20, r26
    143c:	5b 07       	cpc	r21, r27
    143e:	28 f0       	brcs	.+10     	; 0x144a <_ZN12OrangutanLCD8busyWaitEv+0x7e>
    1440:	82 e3       	ldi	r24, 0x32	; 50
    1442:	90 e0       	ldi	r25, 0x00	; 0
    1444:	a0 e0       	ldi	r26, 0x00	; 0
    1446:	b0 e0       	ldi	r27, 0x00	; 0
    1448:	04 c0       	rjmp	.+8      	; 0x1452 <_ZN12OrangutanLCD8busyWaitEv+0x86>
    144a:	80 e3       	ldi	r24, 0x30	; 48
    144c:	95 e7       	ldi	r25, 0x75	; 117
    144e:	a0 e0       	ldi	r26, 0x00	; 0
    1450:	b0 e0       	ldi	r27, 0x00	; 0
    1452:	80 93 11 03 	sts	0x0311, r24
    1456:	90 93 12 03 	sts	0x0312, r25
    145a:	a0 93 13 03 	sts	0x0313, r26
    145e:	b0 93 14 03 	sts	0x0314, r27
    1462:	17 b9       	out	0x07, r17	; 7
    1464:	df 91       	pop	r29
    1466:	cf 91       	pop	r28
    1468:	1f 91       	pop	r17
    146a:	0f 91       	pop	r16
    146c:	08 95       	ret

0000146e <_ZN12OrangutanLCD8sendDataEh>:
    146e:	28 b1       	in	r18, 0x08	; 8
    1470:	90 e0       	ldi	r25, 0x00	; 0
    1472:	8f 70       	andi	r24, 0x0F	; 15
    1474:	90 70       	andi	r25, 0x00	; 0
    1476:	88 0f       	add	r24, r24
    1478:	99 1f       	adc	r25, r25
    147a:	88 0f       	add	r24, r24
    147c:	99 1f       	adc	r25, r25
    147e:	23 7c       	andi	r18, 0xC3	; 195
    1480:	28 2b       	or	r18, r24
    1482:	28 b9       	out	0x08, r18	; 8
    1484:	2a 9a       	sbi	0x05, 2	; 5
    1486:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <delayMicroseconds.clone.0>
    148a:	2a 98       	cbi	0x05, 2	; 5
    148c:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <delayMicroseconds.clone.0>
    1490:	08 95       	ret

00001492 <_ZN12OrangutanLCD4sendEhhh>:
    1492:	a2 e0       	ldi	r26, 0x02	; 2
    1494:	b0 e0       	ldi	r27, 0x00	; 0
    1496:	ef e4       	ldi	r30, 0x4F	; 79
    1498:	fa e0       	ldi	r31, 0x0A	; 10
    149a:	0c 94 96 18 	jmp	0x312c	; 0x312c <__prologue_saves__+0x1a>
    149e:	18 2f       	mov	r17, r24
    14a0:	4a 83       	std	Y+2, r20	; 0x02
    14a2:	69 83       	std	Y+1, r22	; 0x01
    14a4:	0e 94 c7 0a 	call	0x158e	; 0x158e <_ZN12OrangutanLCD4initEv>
    14a8:	0e 94 e6 09 	call	0x13cc	; 0x13cc <_ZN12OrangutanLCD8busyWaitEv>
    14ac:	f7 b0       	in	r15, 0x07	; 7
    14ae:	08 b1       	in	r16, 0x08	; 8
    14b0:	29 98       	cbi	0x05, 1	; 5
    14b2:	69 81       	ldd	r22, Y+1	; 0x01
    14b4:	4a 81       	ldd	r20, Y+2	; 0x02
    14b6:	66 23       	and	r22, r22
    14b8:	11 f0       	breq	.+4      	; 0x14be <_ZN12OrangutanLCD4sendEhhh+0x2c>
    14ba:	28 9a       	sbi	0x05, 0	; 5
    14bc:	01 c0       	rjmp	.+2      	; 0x14c0 <_ZN12OrangutanLCD4sendEhhh+0x2e>
    14be:	28 98       	cbi	0x05, 0	; 5
    14c0:	87 b1       	in	r24, 0x07	; 7
    14c2:	8c 63       	ori	r24, 0x3C	; 60
    14c4:	87 b9       	out	0x07, r24	; 7
    14c6:	41 30       	cpi	r20, 0x01	; 1
    14c8:	29 f0       	breq	.+10     	; 0x14d4 <_ZN12OrangutanLCD4sendEhhh+0x42>
    14ca:	81 2f       	mov	r24, r17
    14cc:	82 95       	swap	r24
    14ce:	8f 70       	andi	r24, 0x0F	; 15
    14d0:	0e 94 37 0a 	call	0x146e	; 0x146e <_ZN12OrangutanLCD8sendDataEh>
    14d4:	81 2f       	mov	r24, r17
    14d6:	8f 70       	andi	r24, 0x0F	; 15
    14d8:	0e 94 37 0a 	call	0x146e	; 0x146e <_ZN12OrangutanLCD8sendDataEh>
    14dc:	f7 b8       	out	0x07, r15	; 7
    14de:	08 b9       	out	0x08, r16	; 8
    14e0:	22 96       	adiw	r28, 0x02	; 2
    14e2:	e5 e0       	ldi	r30, 0x05	; 5
    14e4:	0c 94 b2 18 	jmp	0x3164	; 0x3164 <__epilogue_restores__+0x1a>

000014e8 <_ZN12OrangutanLCD8send_cmdEh>:
    14e8:	60 e0       	ldi	r22, 0x00	; 0
    14ea:	42 e0       	ldi	r20, 0x02	; 2
    14ec:	0e 94 49 0a 	call	0x1492	; 0x1492 <_ZN12OrangutanLCD4sendEhhh>
    14f0:	08 95       	ret

000014f2 <_ZN12OrangutanLCD9send_dataEh>:
    14f2:	61 e0       	ldi	r22, 0x01	; 1
    14f4:	42 e0       	ldi	r20, 0x02	; 2
    14f6:	0e 94 49 0a 	call	0x1492	; 0x1492 <_ZN12OrangutanLCD4sendEhhh>
    14fa:	08 95       	ret

000014fc <print_character>:
    14fc:	0e 94 79 0a 	call	0x14f2	; 0x14f2 <_ZN12OrangutanLCD9send_dataEh>
    1500:	08 95       	ret

00001502 <_ZN12OrangutanLCD13send_4bit_cmdEh>:
    1502:	60 e0       	ldi	r22, 0x00	; 0
    1504:	41 e0       	ldi	r20, 0x01	; 1
    1506:	0e 94 49 0a 	call	0x1492	; 0x1492 <_ZN12OrangutanLCD4sendEhhh>
    150a:	08 95       	ret

0000150c <_ZN12OrangutanLCD5init2Ev>:
    150c:	3d 98       	cbi	0x07, 5	; 7
    150e:	45 9a       	sbi	0x08, 5	; 8
    1510:	80 e3       	ldi	r24, 0x30	; 48
    1512:	95 e7       	ldi	r25, 0x75	; 117
    1514:	a0 e0       	ldi	r26, 0x00	; 0
    1516:	b0 e0       	ldi	r27, 0x00	; 0
    1518:	80 93 11 03 	sts	0x0311, r24
    151c:	90 93 12 03 	sts	0x0312, r25
    1520:	a0 93 13 03 	sts	0x0313, r26
    1524:	b0 93 14 03 	sts	0x0314, r27
    1528:	20 9a       	sbi	0x04, 0	; 4
    152a:	21 9a       	sbi	0x04, 1	; 4
    152c:	22 9a       	sbi	0x04, 2	; 4
    152e:	8e e1       	ldi	r24, 0x1E	; 30
    1530:	90 e0       	ldi	r25, 0x00	; 0
    1532:	0e 94 74 14 	call	0x28e8	; 0x28e8 <delay_ms>
    1536:	83 e0       	ldi	r24, 0x03	; 3
    1538:	0e 94 81 0a 	call	0x1502	; 0x1502 <_ZN12OrangutanLCD13send_4bit_cmdEh>
    153c:	86 e0       	ldi	r24, 0x06	; 6
    153e:	90 e0       	ldi	r25, 0x00	; 0
    1540:	0e 94 74 14 	call	0x28e8	; 0x28e8 <delay_ms>
    1544:	83 e0       	ldi	r24, 0x03	; 3
    1546:	0e 94 81 0a 	call	0x1502	; 0x1502 <_ZN12OrangutanLCD13send_4bit_cmdEh>
    154a:	82 e0       	ldi	r24, 0x02	; 2
    154c:	90 e0       	ldi	r25, 0x00	; 0
    154e:	0e 94 74 14 	call	0x28e8	; 0x28e8 <delay_ms>
    1552:	83 e0       	ldi	r24, 0x03	; 3
    1554:	0e 94 81 0a 	call	0x1502	; 0x1502 <_ZN12OrangutanLCD13send_4bit_cmdEh>
    1558:	82 e0       	ldi	r24, 0x02	; 2
    155a:	90 e0       	ldi	r25, 0x00	; 0
    155c:	0e 94 74 14 	call	0x28e8	; 0x28e8 <delay_ms>
    1560:	82 e0       	ldi	r24, 0x02	; 2
    1562:	0e 94 81 0a 	call	0x1502	; 0x1502 <_ZN12OrangutanLCD13send_4bit_cmdEh>
    1566:	82 e0       	ldi	r24, 0x02	; 2
    1568:	90 e0       	ldi	r25, 0x00	; 0
    156a:	0e 94 74 14 	call	0x28e8	; 0x28e8 <delay_ms>
    156e:	88 e2       	ldi	r24, 0x28	; 40
    1570:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <_ZN12OrangutanLCD8send_cmdEh>
    1574:	88 e0       	ldi	r24, 0x08	; 8
    1576:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <_ZN12OrangutanLCD8send_cmdEh>
    157a:	81 e0       	ldi	r24, 0x01	; 1
    157c:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <_ZN12OrangutanLCD8send_cmdEh>
    1580:	86 e0       	ldi	r24, 0x06	; 6
    1582:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <_ZN12OrangutanLCD8send_cmdEh>
    1586:	8c e0       	ldi	r24, 0x0C	; 12
    1588:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <_ZN12OrangutanLCD8send_cmdEh>
    158c:	08 95       	ret

0000158e <_ZN12OrangutanLCD4initEv>:
    158e:	80 91 15 03 	lds	r24, 0x0315
    1592:	88 23       	and	r24, r24
    1594:	29 f4       	brne	.+10     	; 0x15a0 <_ZN12OrangutanLCD4initEv+0x12>
    1596:	81 e0       	ldi	r24, 0x01	; 1
    1598:	80 93 15 03 	sts	0x0315, r24
    159c:	0e 94 86 0a 	call	0x150c	; 0x150c <_ZN12OrangutanLCD5init2Ev>
    15a0:	08 95       	ret

000015a2 <_ZN12OrangutanLCD5clearEv>:
    15a2:	81 e0       	ldi	r24, 0x01	; 1
    15a4:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <_ZN12OrangutanLCD8send_cmdEh>
    15a8:	80 91 0d 03 	lds	r24, 0x030D
    15ac:	90 91 0e 03 	lds	r25, 0x030E
    15b0:	00 97       	sbiw	r24, 0x00	; 0
    15b2:	11 f1       	breq	.+68     	; 0x15f8 <_ZN12OrangutanLCD5clearEv+0x56>
    15b4:	a0 e0       	ldi	r26, 0x00	; 0
    15b6:	b0 e2       	ldi	r27, 0x20	; 32
    15b8:	08 c0       	rjmp	.+16     	; 0x15ca <_ZN12OrangutanLCD5clearEv+0x28>
    15ba:	e0 91 0d 03 	lds	r30, 0x030D
    15be:	f0 91 0e 03 	lds	r31, 0x030E
    15c2:	e2 0f       	add	r30, r18
    15c4:	f3 1f       	adc	r31, r19
    15c6:	b0 83       	st	Z, r27
    15c8:	af 5f       	subi	r26, 0xFF	; 255
    15ca:	2a 2f       	mov	r18, r26
    15cc:	30 e0       	ldi	r19, 0x00	; 0
    15ce:	80 91 ba 02 	lds	r24, 0x02BA
    15d2:	90 e0       	ldi	r25, 0x00	; 0
    15d4:	01 97       	sbiw	r24, 0x01	; 1
    15d6:	60 91 bb 02 	lds	r22, 0x02BB
    15da:	70 e0       	ldi	r23, 0x00	; 0
    15dc:	86 9f       	mul	r24, r22
    15de:	a0 01       	movw	r20, r0
    15e0:	87 9f       	mul	r24, r23
    15e2:	50 0d       	add	r21, r0
    15e4:	96 9f       	mul	r25, r22
    15e6:	50 0d       	add	r21, r0
    15e8:	11 24       	eor	r1, r1
    15ea:	24 17       	cp	r18, r20
    15ec:	35 07       	cpc	r19, r21
    15ee:	2c f3       	brlt	.-54     	; 0x15ba <_ZN12OrangutanLCD5clearEv+0x18>
    15f0:	10 92 10 03 	sts	0x0310, r1
    15f4:	10 92 0f 03 	sts	0x030F, r1
    15f8:	08 95       	ret

000015fa <clear>:
    15fa:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <_ZN12OrangutanLCD5clearEv>
    15fe:	08 95       	ret

00001600 <_ZN12OrangutanLCD5printEPKc>:
    1600:	ef 92       	push	r14
    1602:	ff 92       	push	r15
    1604:	cf 93       	push	r28
    1606:	df 93       	push	r29
    1608:	e8 2e       	mov	r14, r24
    160a:	e7 01       	movw	r28, r14
    160c:	7e 01       	movw	r14, r28
    160e:	f9 2e       	mov	r15, r25
    1610:	e7 01       	movw	r28, r14
    1612:	02 c0       	rjmp	.+4      	; 0x1618 <_ZN12OrangutanLCD5printEPKc+0x18>
    1614:	0e 94 79 0a 	call	0x14f2	; 0x14f2 <_ZN12OrangutanLCD9send_dataEh>
    1618:	89 91       	ld	r24, Y+
    161a:	88 23       	and	r24, r24
    161c:	d9 f7       	brne	.-10     	; 0x1614 <_ZN12OrangutanLCD5printEPKc+0x14>
    161e:	df 91       	pop	r29
    1620:	cf 91       	pop	r28
    1622:	ff 90       	pop	r15
    1624:	ef 90       	pop	r14
    1626:	08 95       	ret

00001628 <print>:
    1628:	0e 94 00 0b 	call	0x1600	; 0x1600 <_ZN12OrangutanLCD5printEPKc>
    162c:	08 95       	ret

0000162e <_ZN12OrangutanLCD5printEm>:
    162e:	aa e0       	ldi	r26, 0x0A	; 10
    1630:	b0 e0       	ldi	r27, 0x00	; 0
    1632:	ed e1       	ldi	r30, 0x1D	; 29
    1634:	fb e0       	ldi	r31, 0x0B	; 11
    1636:	0c 94 91 18 	jmp	0x3122	; 0x3122 <__prologue_saves__+0x10>
    163a:	9b 01       	movw	r18, r22
    163c:	ac 01       	movw	r20, r24
    163e:	1a e0       	ldi	r17, 0x0A	; 10
    1640:	6a e0       	ldi	r22, 0x0A	; 10
    1642:	c6 2e       	mov	r12, r22
    1644:	d1 2c       	mov	r13, r1
    1646:	e1 2c       	mov	r14, r1
    1648:	f1 2c       	mov	r15, r1
    164a:	5e 01       	movw	r10, r28
    164c:	08 94       	sec
    164e:	a1 1c       	adc	r10, r1
    1650:	b1 1c       	adc	r11, r1
    1652:	02 2f       	mov	r16, r18
    1654:	ca 01       	movw	r24, r20
    1656:	b9 01       	movw	r22, r18
    1658:	a7 01       	movw	r20, r14
    165a:	96 01       	movw	r18, r12
    165c:	0e 94 4c 18 	call	0x3098	; 0x3098 <__udivmodsi4>
    1660:	11 50       	subi	r17, 0x01	; 1
    1662:	f5 01       	movw	r30, r10
    1664:	e1 0f       	add	r30, r17
    1666:	f1 1d       	adc	r31, r1
    1668:	00 5d       	subi	r16, 0xD0	; 208
    166a:	92 2f       	mov	r25, r18
    166c:	99 0f       	add	r25, r25
    166e:	89 2f       	mov	r24, r25
    1670:	88 0f       	add	r24, r24
    1672:	88 0f       	add	r24, r24
    1674:	89 0f       	add	r24, r25
    1676:	08 1b       	sub	r16, r24
    1678:	00 83       	st	Z, r16
    167a:	21 15       	cp	r18, r1
    167c:	31 05       	cpc	r19, r1
    167e:	41 05       	cpc	r20, r1
    1680:	51 05       	cpc	r21, r1
    1682:	39 f7       	brne	.-50     	; 0x1652 <_ZN12OrangutanLCD5printEm+0x24>
    1684:	08 c0       	rjmp	.+16     	; 0x1696 <_ZN12OrangutanLCD5printEm+0x68>
    1686:	f6 01       	movw	r30, r12
    1688:	e1 0f       	add	r30, r17
    168a:	f1 1d       	adc	r31, r1
    168c:	80 81       	ld	r24, Z
    168e:	0e 94 79 0a 	call	0x14f2	; 0x14f2 <_ZN12OrangutanLCD9send_dataEh>
    1692:	1f 5f       	subi	r17, 0xFF	; 255
    1694:	04 c0       	rjmp	.+8      	; 0x169e <_ZN12OrangutanLCD5printEm+0x70>
    1696:	6e 01       	movw	r12, r28
    1698:	08 94       	sec
    169a:	c1 1c       	adc	r12, r1
    169c:	d1 1c       	adc	r13, r1
    169e:	1a 30       	cpi	r17, 0x0A	; 10
    16a0:	90 f3       	brcs	.-28     	; 0x1686 <_ZN12OrangutanLCD5printEm+0x58>
    16a2:	2a 96       	adiw	r28, 0x0a	; 10
    16a4:	ea e0       	ldi	r30, 0x0A	; 10
    16a6:	0c 94 ad 18 	jmp	0x315a	; 0x315a <__epilogue_restores__+0x10>

000016aa <_ZN12OrangutanLCD5printEl>:
    16aa:	ef 92       	push	r14
    16ac:	ff 92       	push	r15
    16ae:	0f 93       	push	r16
    16b0:	1f 93       	push	r17
    16b2:	7b 01       	movw	r14, r22
    16b4:	8c 01       	movw	r16, r24
    16b6:	97 ff       	sbrs	r25, 7
    16b8:	0b c0       	rjmp	.+22     	; 0x16d0 <_ZN12OrangutanLCD5printEl+0x26>
    16ba:	10 95       	com	r17
    16bc:	00 95       	com	r16
    16be:	f0 94       	com	r15
    16c0:	e0 94       	com	r14
    16c2:	e1 1c       	adc	r14, r1
    16c4:	f1 1c       	adc	r15, r1
    16c6:	01 1d       	adc	r16, r1
    16c8:	11 1d       	adc	r17, r1
    16ca:	8d e2       	ldi	r24, 0x2D	; 45
    16cc:	0e 94 79 0a 	call	0x14f2	; 0x14f2 <_ZN12OrangutanLCD9send_dataEh>
    16d0:	c8 01       	movw	r24, r16
    16d2:	b7 01       	movw	r22, r14
    16d4:	0e 94 17 0b 	call	0x162e	; 0x162e <_ZN12OrangutanLCD5printEm>
    16d8:	1f 91       	pop	r17
    16da:	0f 91       	pop	r16
    16dc:	ff 90       	pop	r15
    16de:	ef 90       	pop	r14
    16e0:	08 95       	ret

000016e2 <print_long>:
    16e2:	0e 94 55 0b 	call	0x16aa	; 0x16aa <_ZN12OrangutanLCD5printEl>
    16e6:	08 95       	ret

000016e8 <_ZN12OrangutanLCD6gotoXYEhh>:
    16e8:	a5 e0       	ldi	r26, 0x05	; 5
    16ea:	b0 e0       	ldi	r27, 0x00	; 0
    16ec:	ea e7       	ldi	r30, 0x7A	; 122
    16ee:	fb e0       	ldi	r31, 0x0B	; 11
    16f0:	0c 94 98 18 	jmp	0x3130	; 0x3130 <__prologue_saves__+0x1e>
    16f4:	18 2f       	mov	r17, r24
    16f6:	80 e8       	ldi	r24, 0x80	; 128
    16f8:	89 83       	std	Y+1, r24	; 0x01
    16fa:	80 ec       	ldi	r24, 0xC0	; 192
    16fc:	8a 83       	std	Y+2, r24	; 0x02
    16fe:	84 e9       	ldi	r24, 0x94	; 148
    1700:	8b 83       	std	Y+3, r24	; 0x03
    1702:	84 ed       	ldi	r24, 0xD4	; 212
    1704:	8c 83       	std	Y+4, r24	; 0x04
    1706:	fe 01       	movw	r30, r28
    1708:	e6 0f       	add	r30, r22
    170a:	f1 1d       	adc	r31, r1
    170c:	81 81       	ldd	r24, Z+1	; 0x01
    170e:	81 0f       	add	r24, r17
    1710:	6d 83       	std	Y+5, r22	; 0x05
    1712:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <_ZN12OrangutanLCD8send_cmdEh>
    1716:	10 93 10 03 	sts	0x0310, r17
    171a:	6d 81       	ldd	r22, Y+5	; 0x05
    171c:	60 93 0f 03 	sts	0x030F, r22
    1720:	25 96       	adiw	r28, 0x05	; 5
    1722:	e3 e0       	ldi	r30, 0x03	; 3
    1724:	0c 94 b4 18 	jmp	0x3168	; 0x3168 <__epilogue_restores__+0x1e>

00001728 <lcd_goto_xy>:
    1728:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <_ZN12OrangutanLCD6gotoXYEhh>
    172c:	08 95       	ret

0000172e <_ZN20OrangutanPushbuttons5init2Ev>:
    172e:	87 b1       	in	r24, 0x07	; 7
    1730:	83 7d       	andi	r24, 0xD3	; 211
    1732:	87 b9       	out	0x07, r24	; 7
    1734:	88 b1       	in	r24, 0x08	; 8
    1736:	8c 62       	ori	r24, 0x2C	; 44
    1738:	88 b9       	out	0x08, r24	; 8
    173a:	85 e0       	ldi	r24, 0x05	; 5
    173c:	90 e0       	ldi	r25, 0x00	; 0
    173e:	6f 93       	push	r22
    1740:	64 e0       	ldi	r22, 0x04	; 4
    1742:	6a 95       	dec	r22
    1744:	f1 f7       	brne	.-4      	; 0x1742 <_ZN20OrangutanPushbuttons5init2Ev+0x14>
    1746:	6f 91       	pop	r22
    1748:	01 97       	sbiw	r24, 0x01	; 1
    174a:	c9 f7       	brne	.-14     	; 0x173e <_ZN20OrangutanPushbuttons5init2Ev+0x10>
    174c:	08 95       	ret

0000174e <_ZN20OrangutanPushbuttons4initEv>:
    174e:	80 91 16 03 	lds	r24, 0x0316
    1752:	88 23       	and	r24, r24
    1754:	29 f4       	brne	.+10     	; 0x1760 <_ZN20OrangutanPushbuttons4initEv+0x12>
    1756:	81 e0       	ldi	r24, 0x01	; 1
    1758:	80 93 16 03 	sts	0x0316, r24
    175c:	0e 94 97 0b 	call	0x172e	; 0x172e <_ZN20OrangutanPushbuttons5init2Ev>
    1760:	08 95       	ret

00001762 <_ZN20OrangutanPushbuttons14waitForReleaseEh>:
    1762:	1f 93       	push	r17
    1764:	18 2f       	mov	r17, r24
    1766:	0e 94 a7 0b 	call	0x174e	; 0x174e <_ZN20OrangutanPushbuttons4initEv>
    176a:	86 b1       	in	r24, 0x06	; 6
    176c:	81 23       	and	r24, r17
    176e:	e9 f3       	breq	.-6      	; 0x176a <_ZN20OrangutanPushbuttons14waitForReleaseEh+0x8>
    1770:	8a e0       	ldi	r24, 0x0A	; 10
    1772:	90 e0       	ldi	r25, 0x00	; 0
    1774:	0e 94 74 14 	call	0x28e8	; 0x28e8 <delay_ms>
    1778:	86 b1       	in	r24, 0x06	; 6
    177a:	81 23       	and	r24, r17
    177c:	b1 f3       	breq	.-20     	; 0x176a <_ZN20OrangutanPushbuttons14waitForReleaseEh+0x8>
    177e:	86 b1       	in	r24, 0x06	; 6
    1780:	81 23       	and	r24, r17
    1782:	1f 91       	pop	r17
    1784:	08 95       	ret

00001786 <wait_for_button_release>:
    1786:	0e 94 b1 0b 	call	0x1762	; 0x1762 <_ZN20OrangutanPushbuttons14waitForReleaseEh>
    178a:	08 95       	ret

0000178c <_ZN20OrangutanPushbuttons9isPressedEh>:
    178c:	a1 e0       	ldi	r26, 0x01	; 1
    178e:	b0 e0       	ldi	r27, 0x00	; 0
    1790:	ec ec       	ldi	r30, 0xCC	; 204
    1792:	fb e0       	ldi	r31, 0x0B	; 11
    1794:	0c 94 99 18 	jmp	0x3132	; 0x3132 <__prologue_saves__+0x20>
    1798:	89 83       	std	Y+1, r24	; 0x01
    179a:	0e 94 a7 0b 	call	0x174e	; 0x174e <_ZN20OrangutanPushbuttons4initEv>
    179e:	96 b1       	in	r25, 0x06	; 6
    17a0:	90 95       	com	r25
    17a2:	89 81       	ldd	r24, Y+1	; 0x01
    17a4:	89 23       	and	r24, r25
    17a6:	21 96       	adiw	r28, 0x01	; 1
    17a8:	e2 e0       	ldi	r30, 0x02	; 2
    17aa:	0c 94 b5 18 	jmp	0x316a	; 0x316a <__epilogue_restores__+0x20>

000017ae <button_is_pressed>:
    17ae:	0e 94 c6 0b 	call	0x178c	; 0x178c <_ZN20OrangutanPushbuttons9isPressedEh>
    17b2:	08 95       	ret

000017b4 <serial_get_received_bytes>:
    17b4:	28 2f       	mov	r18, r24
    17b6:	30 e0       	ldi	r19, 0x00	; 0
    17b8:	f9 01       	movw	r30, r18
    17ba:	ee 0f       	add	r30, r30
    17bc:	ff 1f       	adc	r31, r31
    17be:	43 e0       	ldi	r20, 0x03	; 3
    17c0:	22 0f       	add	r18, r18
    17c2:	33 1f       	adc	r19, r19
    17c4:	4a 95       	dec	r20
    17c6:	e1 f7       	brne	.-8      	; 0x17c0 <serial_get_received_bytes+0xc>
    17c8:	e2 0f       	add	r30, r18
    17ca:	f3 1f       	adc	r31, r19
    17cc:	e4 54       	subi	r30, 0x44	; 68
    17ce:	fd 4f       	sbci	r31, 0xFD	; 253
    17d0:	82 81       	ldd	r24, Z+2	; 0x02
    17d2:	08 95       	ret

000017d4 <serial_send_buffer_empty>:
    17d4:	28 2f       	mov	r18, r24
    17d6:	30 e0       	ldi	r19, 0x00	; 0
    17d8:	f9 01       	movw	r30, r18
    17da:	ee 0f       	add	r30, r30
    17dc:	ff 1f       	adc	r31, r31
    17de:	73 e0       	ldi	r23, 0x03	; 3
    17e0:	22 0f       	add	r18, r18
    17e2:	33 1f       	adc	r19, r19
    17e4:	7a 95       	dec	r23
    17e6:	e1 f7       	brne	.-8      	; 0x17e0 <serial_send_buffer_empty+0xc>
    17e8:	e2 0f       	add	r30, r18
    17ea:	f3 1f       	adc	r31, r19
    17ec:	e4 54       	subi	r30, 0x44	; 68
    17ee:	fd 4f       	sbci	r31, 0xFD	; 253
    17f0:	41 81       	ldd	r20, Z+1	; 0x01
    17f2:	28 2f       	mov	r18, r24
    17f4:	30 e0       	ldi	r19, 0x00	; 0
    17f6:	f9 01       	movw	r30, r18
    17f8:	ee 0f       	add	r30, r30
    17fa:	ff 1f       	adc	r31, r31
    17fc:	53 e0       	ldi	r21, 0x03	; 3
    17fe:	22 0f       	add	r18, r18
    1800:	33 1f       	adc	r19, r19
    1802:	5a 95       	dec	r21
    1804:	e1 f7       	brne	.-8      	; 0x17fe <serial_send_buffer_empty+0x2a>
    1806:	e2 0f       	add	r30, r18
    1808:	f3 1f       	adc	r31, r19
    180a:	e4 54       	subi	r30, 0x44	; 68
    180c:	fd 4f       	sbci	r31, 0xFD	; 253
    180e:	81 e0       	ldi	r24, 0x01	; 1
    1810:	93 81       	ldd	r25, Z+3	; 0x03
    1812:	49 13       	cpse	r20, r25
    1814:	80 e0       	ldi	r24, 0x00	; 0
    1816:	08 95       	ret

00001818 <_ZN15OrangutanSerial21serial_rx_handle_byteEhh>:
    1818:	28 2f       	mov	r18, r24
    181a:	30 e0       	ldi	r19, 0x00	; 0
    181c:	f9 01       	movw	r30, r18
    181e:	ee 0f       	add	r30, r30
    1820:	ff 1f       	adc	r31, r31
    1822:	b3 e0       	ldi	r27, 0x03	; 3
    1824:	22 0f       	add	r18, r18
    1826:	33 1f       	adc	r19, r19
    1828:	ba 95       	dec	r27
    182a:	e1 f7       	brne	.-8      	; 0x1824 <_ZN15OrangutanSerial21serial_rx_handle_byteEhh+0xc>
    182c:	e2 0f       	add	r30, r18
    182e:	f3 1f       	adc	r31, r19
    1830:	e4 54       	subi	r30, 0x44	; 68
    1832:	fd 4f       	sbci	r31, 0xFD	; 253
    1834:	40 85       	ldd	r20, Z+8	; 0x08
    1836:	51 85       	ldd	r21, Z+9	; 0x09
    1838:	41 15       	cp	r20, r1
    183a:	51 05       	cpc	r21, r1
    183c:	09 f4       	brne	.+2      	; 0x1840 <_ZN15OrangutanSerial21serial_rx_handle_byteEhh+0x28>
    183e:	52 c0       	rjmp	.+164    	; 0x18e4 <_ZN15OrangutanSerial21serial_rx_handle_byteEhh+0xcc>
    1840:	28 2f       	mov	r18, r24
    1842:	30 e0       	ldi	r19, 0x00	; 0
    1844:	f9 01       	movw	r30, r18
    1846:	ee 0f       	add	r30, r30
    1848:	ff 1f       	adc	r31, r31
    184a:	73 e0       	ldi	r23, 0x03	; 3
    184c:	22 0f       	add	r18, r18
    184e:	33 1f       	adc	r19, r19
    1850:	7a 95       	dec	r23
    1852:	e1 f7       	brne	.-8      	; 0x184c <_ZN15OrangutanSerial21serial_rx_handle_byteEhh+0x34>
    1854:	e2 0f       	add	r30, r18
    1856:	f3 1f       	adc	r31, r19
    1858:	e4 54       	subi	r30, 0x44	; 68
    185a:	fd 4f       	sbci	r31, 0xFD	; 253
    185c:	72 81       	ldd	r23, Z+2	; 0x02
    185e:	28 2f       	mov	r18, r24
    1860:	30 e0       	ldi	r19, 0x00	; 0
    1862:	f9 01       	movw	r30, r18
    1864:	ee 0f       	add	r30, r30
    1866:	ff 1f       	adc	r31, r31
    1868:	b3 e0       	ldi	r27, 0x03	; 3
    186a:	22 0f       	add	r18, r18
    186c:	33 1f       	adc	r19, r19
    186e:	ba 95       	dec	r27
    1870:	e1 f7       	brne	.-8      	; 0x186a <_ZN15OrangutanSerial21serial_rx_handle_byteEhh+0x52>
    1872:	e2 0f       	add	r30, r18
    1874:	f3 1f       	adc	r31, r19
    1876:	e4 54       	subi	r30, 0x44	; 68
    1878:	fd 4f       	sbci	r31, 0xFD	; 253
    187a:	94 81       	ldd	r25, Z+4	; 0x04
    187c:	79 17       	cp	r23, r25
    187e:	90 f5       	brcc	.+100    	; 0x18e4 <_ZN15OrangutanSerial21serial_rx_handle_byteEhh+0xcc>
    1880:	28 2f       	mov	r18, r24
    1882:	30 e0       	ldi	r19, 0x00	; 0
    1884:	f9 01       	movw	r30, r18
    1886:	ee 0f       	add	r30, r30
    1888:	ff 1f       	adc	r31, r31
    188a:	73 e0       	ldi	r23, 0x03	; 3
    188c:	22 0f       	add	r18, r18
    188e:	33 1f       	adc	r19, r19
    1890:	7a 95       	dec	r23
    1892:	e1 f7       	brne	.-8      	; 0x188c <_ZN15OrangutanSerial21serial_rx_handle_byteEhh+0x74>
    1894:	e2 0f       	add	r30, r18
    1896:	f3 1f       	adc	r31, r19
    1898:	e4 54       	subi	r30, 0x44	; 68
    189a:	fd 4f       	sbci	r31, 0xFD	; 253
    189c:	92 81       	ldd	r25, Z+2	; 0x02
    189e:	49 0f       	add	r20, r25
    18a0:	51 1d       	adc	r21, r1
    18a2:	fa 01       	movw	r30, r20
    18a4:	60 83       	st	Z, r22
    18a6:	28 2f       	mov	r18, r24
    18a8:	30 e0       	ldi	r19, 0x00	; 0
    18aa:	f9 01       	movw	r30, r18
    18ac:	ee 0f       	add	r30, r30
    18ae:	ff 1f       	adc	r31, r31
    18b0:	53 e0       	ldi	r21, 0x03	; 3
    18b2:	22 0f       	add	r18, r18
    18b4:	33 1f       	adc	r19, r19
    18b6:	5a 95       	dec	r21
    18b8:	e1 f7       	brne	.-8      	; 0x18b2 <_ZN15OrangutanSerial21serial_rx_handle_byteEhh+0x9a>
    18ba:	e2 0f       	add	r30, r18
    18bc:	f3 1f       	adc	r31, r19
    18be:	e4 54       	subi	r30, 0x44	; 68
    18c0:	fd 4f       	sbci	r31, 0xFD	; 253
    18c2:	92 81       	ldd	r25, Z+2	; 0x02
    18c4:	9f 5f       	subi	r25, 0xFF	; 255
    18c6:	28 2f       	mov	r18, r24
    18c8:	30 e0       	ldi	r19, 0x00	; 0
    18ca:	f9 01       	movw	r30, r18
    18cc:	ee 0f       	add	r30, r30
    18ce:	ff 1f       	adc	r31, r31
    18d0:	b3 e0       	ldi	r27, 0x03	; 3
    18d2:	22 0f       	add	r18, r18
    18d4:	33 1f       	adc	r19, r19
    18d6:	ba 95       	dec	r27
    18d8:	e1 f7       	brne	.-8      	; 0x18d2 <_ZN15OrangutanSerial21serial_rx_handle_byteEhh+0xba>
    18da:	e2 0f       	add	r30, r18
    18dc:	f3 1f       	adc	r31, r19
    18de:	e4 54       	subi	r30, 0x44	; 68
    18e0:	fd 4f       	sbci	r31, 0xFD	; 253
    18e2:	92 83       	std	Z+2, r25	; 0x02
    18e4:	28 2f       	mov	r18, r24
    18e6:	30 e0       	ldi	r19, 0x00	; 0
    18e8:	f9 01       	movw	r30, r18
    18ea:	ee 0f       	add	r30, r30
    18ec:	ff 1f       	adc	r31, r31
    18ee:	73 e0       	ldi	r23, 0x03	; 3
    18f0:	22 0f       	add	r18, r18
    18f2:	33 1f       	adc	r19, r19
    18f4:	7a 95       	dec	r23
    18f6:	e1 f7       	brne	.-8      	; 0x18f0 <_ZN15OrangutanSerial21serial_rx_handle_byteEhh+0xd8>
    18f8:	e2 0f       	add	r30, r18
    18fa:	f3 1f       	adc	r31, r19
    18fc:	e4 54       	subi	r30, 0x44	; 68
    18fe:	fd 4f       	sbci	r31, 0xFD	; 253
    1900:	42 81       	ldd	r20, Z+2	; 0x02
    1902:	28 2f       	mov	r18, r24
    1904:	30 e0       	ldi	r19, 0x00	; 0
    1906:	f9 01       	movw	r30, r18
    1908:	ee 0f       	add	r30, r30
    190a:	ff 1f       	adc	r31, r31
    190c:	53 e0       	ldi	r21, 0x03	; 3
    190e:	22 0f       	add	r18, r18
    1910:	33 1f       	adc	r19, r19
    1912:	5a 95       	dec	r21
    1914:	e1 f7       	brne	.-8      	; 0x190e <_ZN15OrangutanSerial21serial_rx_handle_byteEhh+0xf6>
    1916:	e2 0f       	add	r30, r18
    1918:	f3 1f       	adc	r31, r19
    191a:	e4 54       	subi	r30, 0x44	; 68
    191c:	fd 4f       	sbci	r31, 0xFD	; 253
    191e:	94 81       	ldd	r25, Z+4	; 0x04
    1920:	49 17       	cp	r20, r25
    1922:	01 f5       	brne	.+64     	; 0x1964 <_ZN15OrangutanSerial21serial_rx_handle_byteEhh+0x14c>
    1924:	28 2f       	mov	r18, r24
    1926:	30 e0       	ldi	r19, 0x00	; 0
    1928:	f9 01       	movw	r30, r18
    192a:	ee 0f       	add	r30, r30
    192c:	ff 1f       	adc	r31, r31
    192e:	93 e0       	ldi	r25, 0x03	; 3
    1930:	22 0f       	add	r18, r18
    1932:	33 1f       	adc	r19, r19
    1934:	9a 95       	dec	r25
    1936:	e1 f7       	brne	.-8      	; 0x1930 <_ZN15OrangutanSerial21serial_rx_handle_byteEhh+0x118>
    1938:	e2 0f       	add	r30, r18
    193a:	f3 1f       	adc	r31, r19
    193c:	e4 54       	subi	r30, 0x44	; 68
    193e:	fd 4f       	sbci	r31, 0xFD	; 253
    1940:	95 81       	ldd	r25, Z+5	; 0x05
    1942:	99 23       	and	r25, r25
    1944:	79 f0       	breq	.+30     	; 0x1964 <_ZN15OrangutanSerial21serial_rx_handle_byteEhh+0x14c>
    1946:	28 2f       	mov	r18, r24
    1948:	30 e0       	ldi	r19, 0x00	; 0
    194a:	f9 01       	movw	r30, r18
    194c:	ee 0f       	add	r30, r30
    194e:	ff 1f       	adc	r31, r31
    1950:	b3 e0       	ldi	r27, 0x03	; 3
    1952:	22 0f       	add	r18, r18
    1954:	33 1f       	adc	r19, r19
    1956:	ba 95       	dec	r27
    1958:	e1 f7       	brne	.-8      	; 0x1952 <_ZN15OrangutanSerial21serial_rx_handle_byteEhh+0x13a>
    195a:	e2 0f       	add	r30, r18
    195c:	f3 1f       	adc	r31, r19
    195e:	e4 54       	subi	r30, 0x44	; 68
    1960:	fd 4f       	sbci	r31, 0xFD	; 253
    1962:	12 82       	std	Z+2, r1	; 0x02
    1964:	08 95       	ret

00001966 <_ZN15OrangutanSerial15serial_rx_checkEh>:
    1966:	0f 93       	push	r16
    1968:	1f 93       	push	r17
    196a:	18 2f       	mov	r17, r24
    196c:	82 30       	cpi	r24, 0x02	; 2
    196e:	09 f4       	brne	.+2      	; 0x1972 <_ZN15OrangutanSerial15serial_rx_checkEh+0xc>
    1970:	75 c0       	rjmp	.+234    	; 0x1a5c <_ZN15OrangutanSerial15serial_rx_checkEh+0xf6>
    1972:	88 23       	and	r24, r24
    1974:	19 f4       	brne	.+6      	; 0x197c <_ZN15OrangutanSerial15serial_rx_checkEh+0x16>
    1976:	e1 ec       	ldi	r30, 0xC1	; 193
    1978:	f0 e0       	ldi	r31, 0x00	; 0
    197a:	02 c0       	rjmp	.+4      	; 0x1980 <_ZN15OrangutanSerial15serial_rx_checkEh+0x1a>
    197c:	e9 ec       	ldi	r30, 0xC9	; 201
    197e:	f0 e0       	ldi	r31, 0x00	; 0
    1980:	80 81       	ld	r24, Z
    1982:	8f 77       	andi	r24, 0x7F	; 127
    1984:	80 83       	st	Z, r24
    1986:	81 2f       	mov	r24, r17
    1988:	90 e0       	ldi	r25, 0x00	; 0
    198a:	fc 01       	movw	r30, r24
    198c:	ee 0f       	add	r30, r30
    198e:	ff 1f       	adc	r31, r31
    1990:	03 e0       	ldi	r16, 0x03	; 3
    1992:	88 0f       	add	r24, r24
    1994:	99 1f       	adc	r25, r25
    1996:	0a 95       	dec	r16
    1998:	e1 f7       	brne	.-8      	; 0x1992 <_ZN15OrangutanSerial15serial_rx_checkEh+0x2c>
    199a:	e8 0f       	add	r30, r24
    199c:	f9 1f       	adc	r31, r25
    199e:	e4 54       	subi	r30, 0x44	; 68
    19a0:	fd 4f       	sbci	r31, 0xFD	; 253
    19a2:	80 85       	ldd	r24, Z+8	; 0x08
    19a4:	91 85       	ldd	r25, Z+9	; 0x09
    19a6:	00 97       	sbiw	r24, 0x00	; 0
    19a8:	a9 f1       	breq	.+106    	; 0x1a14 <_ZN15OrangutanSerial15serial_rx_checkEh+0xae>
    19aa:	21 2f       	mov	r18, r17
    19ac:	30 e0       	ldi	r19, 0x00	; 0
    19ae:	f9 01       	movw	r30, r18
    19b0:	ee 0f       	add	r30, r30
    19b2:	ff 1f       	adc	r31, r31
    19b4:	a3 e0       	ldi	r26, 0x03	; 3
    19b6:	22 0f       	add	r18, r18
    19b8:	33 1f       	adc	r19, r19
    19ba:	aa 95       	dec	r26
    19bc:	e1 f7       	brne	.-8      	; 0x19b6 <_ZN15OrangutanSerial15serial_rx_checkEh+0x50>
    19be:	e2 0f       	add	r30, r18
    19c0:	f3 1f       	adc	r31, r19
    19c2:	e4 54       	subi	r30, 0x44	; 68
    19c4:	fd 4f       	sbci	r31, 0xFD	; 253
    19c6:	92 81       	ldd	r25, Z+2	; 0x02
    19c8:	21 2f       	mov	r18, r17
    19ca:	30 e0       	ldi	r19, 0x00	; 0
    19cc:	f9 01       	movw	r30, r18
    19ce:	ee 0f       	add	r30, r30
    19d0:	ff 1f       	adc	r31, r31
    19d2:	63 e0       	ldi	r22, 0x03	; 3
    19d4:	22 0f       	add	r18, r18
    19d6:	33 1f       	adc	r19, r19
    19d8:	6a 95       	dec	r22
    19da:	e1 f7       	brne	.-8      	; 0x19d4 <_ZN15OrangutanSerial15serial_rx_checkEh+0x6e>
    19dc:	e2 0f       	add	r30, r18
    19de:	f3 1f       	adc	r31, r19
    19e0:	e4 54       	subi	r30, 0x44	; 68
    19e2:	fd 4f       	sbci	r31, 0xFD	; 253
    19e4:	84 81       	ldd	r24, Z+4	; 0x04
    19e6:	98 17       	cp	r25, r24
    19e8:	a8 f4       	brcc	.+42     	; 0x1a14 <_ZN15OrangutanSerial15serial_rx_checkEh+0xae>
    19ea:	11 23       	and	r17, r17
    19ec:	19 f4       	brne	.+6      	; 0x19f4 <_ZN15OrangutanSerial15serial_rx_checkEh+0x8e>
    19ee:	e0 ec       	ldi	r30, 0xC0	; 192
    19f0:	f0 e0       	ldi	r31, 0x00	; 0
    19f2:	02 c0       	rjmp	.+4      	; 0x19f8 <_ZN15OrangutanSerial15serial_rx_checkEh+0x92>
    19f4:	e8 ec       	ldi	r30, 0xC8	; 200
    19f6:	f0 e0       	ldi	r31, 0x00	; 0
    19f8:	80 81       	ld	r24, Z
    19fa:	87 ff       	sbrs	r24, 7
    19fc:	0b c0       	rjmp	.+22     	; 0x1a14 <_ZN15OrangutanSerial15serial_rx_checkEh+0xae>
    19fe:	11 23       	and	r17, r17
    1a00:	19 f4       	brne	.+6      	; 0x1a08 <_ZN15OrangutanSerial15serial_rx_checkEh+0xa2>
    1a02:	e6 ec       	ldi	r30, 0xC6	; 198
    1a04:	f0 e0       	ldi	r31, 0x00	; 0
    1a06:	02 c0       	rjmp	.+4      	; 0x1a0c <_ZN15OrangutanSerial15serial_rx_checkEh+0xa6>
    1a08:	ee ec       	ldi	r30, 0xCE	; 206
    1a0a:	f0 e0       	ldi	r31, 0x00	; 0
    1a0c:	60 81       	ld	r22, Z
    1a0e:	81 2f       	mov	r24, r17
    1a10:	0e 94 0c 0c 	call	0x1818	; 0x1818 <_ZN15OrangutanSerial21serial_rx_handle_byteEhh>
    1a14:	21 2f       	mov	r18, r17
    1a16:	30 e0       	ldi	r19, 0x00	; 0
    1a18:	f9 01       	movw	r30, r18
    1a1a:	ee 0f       	add	r30, r30
    1a1c:	ff 1f       	adc	r31, r31
    1a1e:	43 e0       	ldi	r20, 0x03	; 3
    1a20:	22 0f       	add	r18, r18
    1a22:	33 1f       	adc	r19, r19
    1a24:	4a 95       	dec	r20
    1a26:	e1 f7       	brne	.-8      	; 0x1a20 <_ZN15OrangutanSerial15serial_rx_checkEh+0xba>
    1a28:	e2 0f       	add	r30, r18
    1a2a:	f3 1f       	adc	r31, r19
    1a2c:	e4 54       	subi	r30, 0x44	; 68
    1a2e:	fd 4f       	sbci	r31, 0xFD	; 253
    1a30:	80 81       	ld	r24, Z
    1a32:	88 23       	and	r24, r24
    1a34:	09 f0       	breq	.+2      	; 0x1a38 <_ZN15OrangutanSerial15serial_rx_checkEh+0xd2>
    1a36:	59 c0       	rjmp	.+178    	; 0x1aea <_ZN15OrangutanSerial15serial_rx_checkEh+0x184>
    1a38:	11 23       	and	r17, r17
    1a3a:	19 f4       	brne	.+6      	; 0x1a42 <_ZN15OrangutanSerial15serial_rx_checkEh+0xdc>
    1a3c:	e1 ec       	ldi	r30, 0xC1	; 193
    1a3e:	f0 e0       	ldi	r31, 0x00	; 0
    1a40:	02 c0       	rjmp	.+4      	; 0x1a46 <_ZN15OrangutanSerial15serial_rx_checkEh+0xe0>
    1a42:	e9 ec       	ldi	r30, 0xC9	; 201
    1a44:	f0 e0       	ldi	r31, 0x00	; 0
    1a46:	80 81       	ld	r24, Z
    1a48:	80 68       	ori	r24, 0x80	; 128
    1a4a:	80 83       	st	Z, r24
    1a4c:	4e c0       	rjmp	.+156    	; 0x1aea <_ZN15OrangutanSerial15serial_rx_checkEh+0x184>
    1a4e:	80 91 d5 02 	lds	r24, 0x02D5
    1a52:	88 23       	and	r24, r24
    1a54:	19 f0       	breq	.+6      	; 0x1a5c <_ZN15OrangutanSerial15serial_rx_checkEh+0xf6>
    1a56:	10 92 d2 02 	sts	0x02D2, r1
    1a5a:	47 c0       	rjmp	.+142    	; 0x1aea <_ZN15OrangutanSerial15serial_rx_checkEh+0x184>
    1a5c:	80 91 d8 02 	lds	r24, 0x02D8
    1a60:	90 91 d9 02 	lds	r25, 0x02D9
    1a64:	00 97       	sbiw	r24, 0x00	; 0
    1a66:	09 f4       	brne	.+2      	; 0x1a6a <_ZN15OrangutanSerial15serial_rx_checkEh+0x104>
    1a68:	40 c0       	rjmp	.+128    	; 0x1aea <_ZN15OrangutanSerial15serial_rx_checkEh+0x184>
    1a6a:	90 91 d2 02 	lds	r25, 0x02D2
    1a6e:	80 91 d4 02 	lds	r24, 0x02D4
    1a72:	98 17       	cp	r25, r24
    1a74:	d0 f5       	brcc	.+116    	; 0x1aea <_ZN15OrangutanSerial15serial_rx_checkEh+0x184>
    1a76:	80 91 23 03 	lds	r24, 0x0323
    1a7a:	88 23       	and	r24, r24
    1a7c:	a9 f4       	brne	.+42     	; 0x1aa8 <_ZN15OrangutanSerial15serial_rx_checkEh+0x142>
    1a7e:	0e 94 7c 14 	call	0x28f8	; 0x28f8 <_ZN12OrangutanSVP15serialReadStartEv>
    1a82:	80 93 23 03 	sts	0x0323, r24
    1a86:	10 e0       	ldi	r17, 0x00	; 0
    1a88:	0b c0       	rjmp	.+22     	; 0x1aa0 <_ZN15OrangutanSerial15serial_rx_checkEh+0x13a>
    1a8a:	0e 94 77 14 	call	0x28ee	; 0x28ee <_ZN12OrangutanSVP11getNextByteEv>
    1a8e:	e0 2f       	mov	r30, r16
    1a90:	f0 e0       	ldi	r31, 0x00	; 0
    1a92:	31 97       	sbiw	r30, 0x01	; 1
    1a94:	e1 1b       	sub	r30, r17
    1a96:	f1 09       	sbc	r31, r1
    1a98:	ec 5d       	subi	r30, 0xDC	; 220
    1a9a:	fc 4f       	sbci	r31, 0xFC	; 252
    1a9c:	80 83       	st	Z, r24
    1a9e:	1f 5f       	subi	r17, 0xFF	; 255
    1aa0:	00 91 23 03 	lds	r16, 0x0323
    1aa4:	10 17       	cp	r17, r16
    1aa6:	88 f3       	brcs	.-30     	; 0x1a8a <_ZN15OrangutanSerial15serial_rx_checkEh+0x124>
    1aa8:	a0 91 23 03 	lds	r26, 0x0323
    1aac:	aa 23       	and	r26, r26
    1aae:	e9 f0       	breq	.+58     	; 0x1aea <_ZN15OrangutanSerial15serial_rx_checkEh+0x184>
    1ab0:	80 91 d2 02 	lds	r24, 0x02D2
    1ab4:	e0 91 d8 02 	lds	r30, 0x02D8
    1ab8:	f0 91 d9 02 	lds	r31, 0x02D9
    1abc:	e8 0f       	add	r30, r24
    1abe:	f1 1d       	adc	r31, r1
    1ac0:	a1 50       	subi	r26, 0x01	; 1
    1ac2:	a0 93 23 03 	sts	0x0323, r26
    1ac6:	b0 e0       	ldi	r27, 0x00	; 0
    1ac8:	ac 5d       	subi	r26, 0xDC	; 220
    1aca:	bc 4f       	sbci	r27, 0xFC	; 252
    1acc:	8c 91       	ld	r24, X
    1ace:	80 83       	st	Z, r24
    1ad0:	80 91 d2 02 	lds	r24, 0x02D2
    1ad4:	8f 5f       	subi	r24, 0xFF	; 255
    1ad6:	80 93 d2 02 	sts	0x02D2, r24
    1ada:	90 91 d2 02 	lds	r25, 0x02D2
    1ade:	80 91 d4 02 	lds	r24, 0x02D4
    1ae2:	98 17       	cp	r25, r24
    1ae4:	09 f0       	breq	.+2      	; 0x1ae8 <_ZN15OrangutanSerial15serial_rx_checkEh+0x182>
    1ae6:	ba cf       	rjmp	.-140    	; 0x1a5c <_ZN15OrangutanSerial15serial_rx_checkEh+0xf6>
    1ae8:	b2 cf       	rjmp	.-156    	; 0x1a4e <_ZN15OrangutanSerial15serial_rx_checkEh+0xe8>
    1aea:	1f 91       	pop	r17
    1aec:	0f 91       	pop	r16
    1aee:	08 95       	ret

00001af0 <_ZN15OrangutanSerial14receive_inlineEhPchh>:
    1af0:	82 30       	cpi	r24, 0x02	; 2
    1af2:	51 f0       	breq	.+20     	; 0x1b08 <_ZN15OrangutanSerial14receive_inlineEhPchh+0x18>
    1af4:	88 23       	and	r24, r24
    1af6:	19 f4       	brne	.+6      	; 0x1afe <_ZN15OrangutanSerial14receive_inlineEhPchh+0xe>
    1af8:	e1 ec       	ldi	r30, 0xC1	; 193
    1afa:	f0 e0       	ldi	r31, 0x00	; 0
    1afc:	02 c0       	rjmp	.+4      	; 0x1b02 <_ZN15OrangutanSerial14receive_inlineEhPchh+0x12>
    1afe:	e9 ec       	ldi	r30, 0xC9	; 201
    1b00:	f0 e0       	ldi	r31, 0x00	; 0
    1b02:	90 81       	ld	r25, Z
    1b04:	9f 77       	andi	r25, 0x7F	; 127
    1b06:	90 83       	st	Z, r25
    1b08:	a8 2f       	mov	r26, r24
    1b0a:	b0 e0       	ldi	r27, 0x00	; 0
    1b0c:	fd 01       	movw	r30, r26
    1b0e:	ee 0f       	add	r30, r30
    1b10:	ff 1f       	adc	r31, r31
    1b12:	53 e0       	ldi	r21, 0x03	; 3
    1b14:	aa 0f       	add	r26, r26
    1b16:	bb 1f       	adc	r27, r27
    1b18:	5a 95       	dec	r21
    1b1a:	e1 f7       	brne	.-8      	; 0x1b14 <_ZN15OrangutanSerial14receive_inlineEhPchh+0x24>
    1b1c:	ea 0f       	add	r30, r26
    1b1e:	fb 1f       	adc	r31, r27
    1b20:	e4 54       	subi	r30, 0x44	; 68
    1b22:	fd 4f       	sbci	r31, 0xFD	; 253
    1b24:	71 87       	std	Z+9, r23	; 0x09
    1b26:	60 87       	std	Z+8, r22	; 0x08
    1b28:	68 2f       	mov	r22, r24
    1b2a:	70 e0       	ldi	r23, 0x00	; 0
    1b2c:	fb 01       	movw	r30, r22
    1b2e:	ee 0f       	add	r30, r30
    1b30:	ff 1f       	adc	r31, r31
    1b32:	93 e0       	ldi	r25, 0x03	; 3
    1b34:	66 0f       	add	r22, r22
    1b36:	77 1f       	adc	r23, r23
    1b38:	9a 95       	dec	r25
    1b3a:	e1 f7       	brne	.-8      	; 0x1b34 <_ZN15OrangutanSerial14receive_inlineEhPchh+0x44>
    1b3c:	e6 0f       	add	r30, r22
    1b3e:	f7 1f       	adc	r31, r23
    1b40:	e4 54       	subi	r30, 0x44	; 68
    1b42:	fd 4f       	sbci	r31, 0xFD	; 253
    1b44:	12 82       	std	Z+2, r1	; 0x02
    1b46:	68 2f       	mov	r22, r24
    1b48:	70 e0       	ldi	r23, 0x00	; 0
    1b4a:	fb 01       	movw	r30, r22
    1b4c:	ee 0f       	add	r30, r30
    1b4e:	ff 1f       	adc	r31, r31
    1b50:	a3 e0       	ldi	r26, 0x03	; 3
    1b52:	66 0f       	add	r22, r22
    1b54:	77 1f       	adc	r23, r23
    1b56:	aa 95       	dec	r26
    1b58:	e1 f7       	brne	.-8      	; 0x1b52 <_ZN15OrangutanSerial14receive_inlineEhPchh+0x62>
    1b5a:	e6 0f       	add	r30, r22
    1b5c:	f7 1f       	adc	r31, r23
    1b5e:	e4 54       	subi	r30, 0x44	; 68
    1b60:	fd 4f       	sbci	r31, 0xFD	; 253
    1b62:	44 83       	std	Z+4, r20	; 0x04
    1b64:	48 2f       	mov	r20, r24
    1b66:	50 e0       	ldi	r21, 0x00	; 0
    1b68:	fa 01       	movw	r30, r20
    1b6a:	ee 0f       	add	r30, r30
    1b6c:	ff 1f       	adc	r31, r31
    1b6e:	63 e0       	ldi	r22, 0x03	; 3
    1b70:	44 0f       	add	r20, r20
    1b72:	55 1f       	adc	r21, r21
    1b74:	6a 95       	dec	r22
    1b76:	e1 f7       	brne	.-8      	; 0x1b70 <_ZN15OrangutanSerial14receive_inlineEhPchh+0x80>
    1b78:	e4 0f       	add	r30, r20
    1b7a:	f5 1f       	adc	r31, r21
    1b7c:	e4 54       	subi	r30, 0x44	; 68
    1b7e:	fd 4f       	sbci	r31, 0xFD	; 253
    1b80:	25 83       	std	Z+5, r18	; 0x05
    1b82:	82 30       	cpi	r24, 0x02	; 2
    1b84:	d9 f0       	breq	.+54     	; 0x1bbc <_ZN15OrangutanSerial14receive_inlineEhPchh+0xcc>
    1b86:	28 2f       	mov	r18, r24
    1b88:	30 e0       	ldi	r19, 0x00	; 0
    1b8a:	f9 01       	movw	r30, r18
    1b8c:	ee 0f       	add	r30, r30
    1b8e:	ff 1f       	adc	r31, r31
    1b90:	43 e0       	ldi	r20, 0x03	; 3
    1b92:	22 0f       	add	r18, r18
    1b94:	33 1f       	adc	r19, r19
    1b96:	4a 95       	dec	r20
    1b98:	e1 f7       	brne	.-8      	; 0x1b92 <_ZN15OrangutanSerial14receive_inlineEhPchh+0xa2>
    1b9a:	e2 0f       	add	r30, r18
    1b9c:	f3 1f       	adc	r31, r19
    1b9e:	e4 54       	subi	r30, 0x44	; 68
    1ba0:	fd 4f       	sbci	r31, 0xFD	; 253
    1ba2:	90 81       	ld	r25, Z
    1ba4:	99 23       	and	r25, r25
    1ba6:	51 f4       	brne	.+20     	; 0x1bbc <_ZN15OrangutanSerial14receive_inlineEhPchh+0xcc>
    1ba8:	88 23       	and	r24, r24
    1baa:	19 f4       	brne	.+6      	; 0x1bb2 <_ZN15OrangutanSerial14receive_inlineEhPchh+0xc2>
    1bac:	e1 ec       	ldi	r30, 0xC1	; 193
    1bae:	f0 e0       	ldi	r31, 0x00	; 0
    1bb0:	02 c0       	rjmp	.+4      	; 0x1bb6 <_ZN15OrangutanSerial14receive_inlineEhPchh+0xc6>
    1bb2:	e9 ec       	ldi	r30, 0xC9	; 201
    1bb4:	f0 e0       	ldi	r31, 0x00	; 0
    1bb6:	80 81       	ld	r24, Z
    1bb8:	80 68       	ori	r24, 0x80	; 128
    1bba:	80 83       	st	Z, r24
    1bbc:	08 95       	ret

00001bbe <_ZN15OrangutanSerial11receiveRingEhPch>:
    1bbe:	21 e0       	ldi	r18, 0x01	; 1
    1bc0:	0e 94 78 0d 	call	0x1af0	; 0x1af0 <_ZN15OrangutanSerial14receive_inlineEhPchh>
    1bc4:	08 95       	ret

00001bc6 <serial_receive_ring>:
    1bc6:	0e 94 df 0d 	call	0x1bbe	; 0x1bbe <_ZN15OrangutanSerial11receiveRingEhPch>
    1bca:	08 95       	ret

00001bcc <__vector_20>:
    1bcc:	1f 92       	push	r1
    1bce:	0f 92       	push	r0
    1bd0:	0f b6       	in	r0, 0x3f	; 63
    1bd2:	0f 92       	push	r0
    1bd4:	0b b6       	in	r0, 0x3b	; 59
    1bd6:	0f 92       	push	r0
    1bd8:	11 24       	eor	r1, r1
    1bda:	2f 93       	push	r18
    1bdc:	3f 93       	push	r19
    1bde:	4f 93       	push	r20
    1be0:	5f 93       	push	r21
    1be2:	6f 93       	push	r22
    1be4:	7f 93       	push	r23
    1be6:	8f 93       	push	r24
    1be8:	9f 93       	push	r25
    1bea:	af 93       	push	r26
    1bec:	bf 93       	push	r27
    1bee:	ef 93       	push	r30
    1bf0:	ff 93       	push	r31
    1bf2:	60 91 c6 00 	lds	r22, 0x00C6
    1bf6:	80 e0       	ldi	r24, 0x00	; 0
    1bf8:	0e 94 0c 0c 	call	0x1818	; 0x1818 <_ZN15OrangutanSerial21serial_rx_handle_byteEhh>
    1bfc:	ff 91       	pop	r31
    1bfe:	ef 91       	pop	r30
    1c00:	bf 91       	pop	r27
    1c02:	af 91       	pop	r26
    1c04:	9f 91       	pop	r25
    1c06:	8f 91       	pop	r24
    1c08:	7f 91       	pop	r23
    1c0a:	6f 91       	pop	r22
    1c0c:	5f 91       	pop	r21
    1c0e:	4f 91       	pop	r20
    1c10:	3f 91       	pop	r19
    1c12:	2f 91       	pop	r18
    1c14:	0f 90       	pop	r0
    1c16:	0b be       	out	0x3b, r0	; 59
    1c18:	0f 90       	pop	r0
    1c1a:	0f be       	out	0x3f, r0	; 63
    1c1c:	0f 90       	pop	r0
    1c1e:	1f 90       	pop	r1
    1c20:	18 95       	reti

00001c22 <__vector_28>:
    1c22:	1f 92       	push	r1
    1c24:	0f 92       	push	r0
    1c26:	0f b6       	in	r0, 0x3f	; 63
    1c28:	0f 92       	push	r0
    1c2a:	0b b6       	in	r0, 0x3b	; 59
    1c2c:	0f 92       	push	r0
    1c2e:	11 24       	eor	r1, r1
    1c30:	2f 93       	push	r18
    1c32:	3f 93       	push	r19
    1c34:	4f 93       	push	r20
    1c36:	5f 93       	push	r21
    1c38:	6f 93       	push	r22
    1c3a:	7f 93       	push	r23
    1c3c:	8f 93       	push	r24
    1c3e:	9f 93       	push	r25
    1c40:	af 93       	push	r26
    1c42:	bf 93       	push	r27
    1c44:	ef 93       	push	r30
    1c46:	ff 93       	push	r31
    1c48:	60 91 ce 00 	lds	r22, 0x00CE
    1c4c:	81 e0       	ldi	r24, 0x01	; 1
    1c4e:	0e 94 0c 0c 	call	0x1818	; 0x1818 <_ZN15OrangutanSerial21serial_rx_handle_byteEhh>
    1c52:	ff 91       	pop	r31
    1c54:	ef 91       	pop	r30
    1c56:	bf 91       	pop	r27
    1c58:	af 91       	pop	r26
    1c5a:	9f 91       	pop	r25
    1c5c:	8f 91       	pop	r24
    1c5e:	7f 91       	pop	r23
    1c60:	6f 91       	pop	r22
    1c62:	5f 91       	pop	r21
    1c64:	4f 91       	pop	r20
    1c66:	3f 91       	pop	r19
    1c68:	2f 91       	pop	r18
    1c6a:	0f 90       	pop	r0
    1c6c:	0b be       	out	0x3b, r0	; 59
    1c6e:	0f 90       	pop	r0
    1c70:	0f be       	out	0x3f, r0	; 63
    1c72:	0f 90       	pop	r0
    1c74:	1f 90       	pop	r1
    1c76:	18 95       	reti

00001c78 <_Z24uart_enable_tx_interrupth>:
    1c78:	88 23       	and	r24, r24
    1c7a:	19 f4       	brne	.+6      	; 0x1c82 <_Z24uart_enable_tx_interrupth+0xa>
    1c7c:	e1 ec       	ldi	r30, 0xC1	; 193
    1c7e:	f0 e0       	ldi	r31, 0x00	; 0
    1c80:	02 c0       	rjmp	.+4      	; 0x1c86 <_Z24uart_enable_tx_interrupth+0xe>
    1c82:	e9 ec       	ldi	r30, 0xC9	; 201
    1c84:	f0 e0       	ldi	r31, 0x00	; 0
    1c86:	80 81       	ld	r24, Z
    1c88:	80 62       	ori	r24, 0x20	; 32
    1c8a:	80 83       	st	Z, r24
    1c8c:	08 95       	ret

00001c8e <_Z25uart_disable_tx_interrupth>:
    1c8e:	88 23       	and	r24, r24
    1c90:	19 f4       	brne	.+6      	; 0x1c98 <_Z25uart_disable_tx_interrupth+0xa>
    1c92:	e1 ec       	ldi	r30, 0xC1	; 193
    1c94:	f0 e0       	ldi	r31, 0x00	; 0
    1c96:	02 c0       	rjmp	.+4      	; 0x1c9c <_Z25uart_disable_tx_interrupth+0xe>
    1c98:	e9 ec       	ldi	r30, 0xC9	; 201
    1c9a:	f0 e0       	ldi	r31, 0x00	; 0
    1c9c:	80 81       	ld	r24, Z
    1c9e:	8f 7d       	andi	r24, 0xDF	; 223
    1ca0:	80 83       	st	Z, r24
    1ca2:	08 95       	ret

00001ca4 <_ZN15OrangutanSerial24uart_update_tx_interruptEh>:
    1ca4:	28 2f       	mov	r18, r24
    1ca6:	30 e0       	ldi	r19, 0x00	; 0
    1ca8:	f9 01       	movw	r30, r18
    1caa:	ee 0f       	add	r30, r30
    1cac:	ff 1f       	adc	r31, r31
    1cae:	93 e0       	ldi	r25, 0x03	; 3
    1cb0:	22 0f       	add	r18, r18
    1cb2:	33 1f       	adc	r19, r19
    1cb4:	9a 95       	dec	r25
    1cb6:	e1 f7       	brne	.-8      	; 0x1cb0 <_ZN15OrangutanSerial24uart_update_tx_interruptEh+0xc>
    1cb8:	e2 0f       	add	r30, r18
    1cba:	f3 1f       	adc	r31, r19
    1cbc:	e4 54       	subi	r30, 0x44	; 68
    1cbe:	fd 4f       	sbci	r31, 0xFD	; 253
    1cc0:	26 81       	ldd	r18, Z+6	; 0x06
    1cc2:	37 81       	ldd	r19, Z+7	; 0x07
    1cc4:	21 15       	cp	r18, r1
    1cc6:	31 05       	cpc	r19, r1
    1cc8:	a1 f1       	breq	.+104    	; 0x1d32 <_ZN15OrangutanSerial24uart_update_tx_interruptEh+0x8e>
    1cca:	28 2f       	mov	r18, r24
    1ccc:	30 e0       	ldi	r19, 0x00	; 0
    1cce:	f9 01       	movw	r30, r18
    1cd0:	ee 0f       	add	r30, r30
    1cd2:	ff 1f       	adc	r31, r31
    1cd4:	a3 e0       	ldi	r26, 0x03	; 3
    1cd6:	22 0f       	add	r18, r18
    1cd8:	33 1f       	adc	r19, r19
    1cda:	aa 95       	dec	r26
    1cdc:	e1 f7       	brne	.-8      	; 0x1cd6 <_ZN15OrangutanSerial24uart_update_tx_interruptEh+0x32>
    1cde:	e2 0f       	add	r30, r18
    1ce0:	f3 1f       	adc	r31, r19
    1ce2:	e4 54       	subi	r30, 0x44	; 68
    1ce4:	fd 4f       	sbci	r31, 0xFD	; 253
    1ce6:	41 81       	ldd	r20, Z+1	; 0x01
    1ce8:	28 2f       	mov	r18, r24
    1cea:	30 e0       	ldi	r19, 0x00	; 0
    1cec:	f9 01       	movw	r30, r18
    1cee:	ee 0f       	add	r30, r30
    1cf0:	ff 1f       	adc	r31, r31
    1cf2:	63 e0       	ldi	r22, 0x03	; 3
    1cf4:	22 0f       	add	r18, r18
    1cf6:	33 1f       	adc	r19, r19
    1cf8:	6a 95       	dec	r22
    1cfa:	e1 f7       	brne	.-8      	; 0x1cf4 <_ZN15OrangutanSerial24uart_update_tx_interruptEh+0x50>
    1cfc:	e2 0f       	add	r30, r18
    1cfe:	f3 1f       	adc	r31, r19
    1d00:	e4 54       	subi	r30, 0x44	; 68
    1d02:	fd 4f       	sbci	r31, 0xFD	; 253
    1d04:	93 81       	ldd	r25, Z+3	; 0x03
    1d06:	49 17       	cp	r20, r25
    1d08:	a0 f4       	brcc	.+40     	; 0x1d32 <_ZN15OrangutanSerial24uart_update_tx_interruptEh+0x8e>
    1d0a:	28 2f       	mov	r18, r24
    1d0c:	30 e0       	ldi	r19, 0x00	; 0
    1d0e:	f9 01       	movw	r30, r18
    1d10:	ee 0f       	add	r30, r30
    1d12:	ff 1f       	adc	r31, r31
    1d14:	43 e0       	ldi	r20, 0x03	; 3
    1d16:	22 0f       	add	r18, r18
    1d18:	33 1f       	adc	r19, r19
    1d1a:	4a 95       	dec	r20
    1d1c:	e1 f7       	brne	.-8      	; 0x1d16 <_ZN15OrangutanSerial24uart_update_tx_interruptEh+0x72>
    1d1e:	e2 0f       	add	r30, r18
    1d20:	f3 1f       	adc	r31, r19
    1d22:	e4 54       	subi	r30, 0x44	; 68
    1d24:	fd 4f       	sbci	r31, 0xFD	; 253
    1d26:	90 81       	ld	r25, Z
    1d28:	99 23       	and	r25, r25
    1d2a:	19 f4       	brne	.+6      	; 0x1d32 <_ZN15OrangutanSerial24uart_update_tx_interruptEh+0x8e>
    1d2c:	0e 94 3c 0e 	call	0x1c78	; 0x1c78 <_Z24uart_enable_tx_interrupth>
    1d30:	08 95       	ret
    1d32:	0e 94 47 0e 	call	0x1c8e	; 0x1c8e <_Z25uart_disable_tx_interrupth>
    1d36:	08 95       	ret

00001d38 <_ZN15OrangutanSerial15initUART_inlineEh>:
    1d38:	82 30       	cpi	r24, 0x02	; 2
    1d3a:	31 f1       	breq	.+76     	; 0x1d88 <_ZN15OrangutanSerial15initUART_inlineEh+0x50>
    1d3c:	28 2f       	mov	r18, r24
    1d3e:	30 e0       	ldi	r19, 0x00	; 0
    1d40:	f9 01       	movw	r30, r18
    1d42:	ee 0f       	add	r30, r30
    1d44:	ff 1f       	adc	r31, r31
    1d46:	53 e0       	ldi	r21, 0x03	; 3
    1d48:	22 0f       	add	r18, r18
    1d4a:	33 1f       	adc	r19, r19
    1d4c:	5a 95       	dec	r21
    1d4e:	e1 f7       	brne	.-8      	; 0x1d48 <_ZN15OrangutanSerial15initUART_inlineEh+0x10>
    1d50:	e2 0f       	add	r30, r18
    1d52:	f3 1f       	adc	r31, r19
    1d54:	e4 54       	subi	r30, 0x44	; 68
    1d56:	fd 4f       	sbci	r31, 0xFD	; 253
    1d58:	90 81       	ld	r25, Z
    1d5a:	99 23       	and	r25, r25
    1d5c:	49 f4       	brne	.+18     	; 0x1d70 <_ZN15OrangutanSerial15initUART_inlineEh+0x38>
    1d5e:	88 23       	and	r24, r24
    1d60:	19 f4       	brne	.+6      	; 0x1d68 <_ZN15OrangutanSerial15initUART_inlineEh+0x30>
    1d62:	e1 ec       	ldi	r30, 0xC1	; 193
    1d64:	f0 e0       	ldi	r31, 0x00	; 0
    1d66:	02 c0       	rjmp	.+4      	; 0x1d6c <_ZN15OrangutanSerial15initUART_inlineEh+0x34>
    1d68:	e9 ec       	ldi	r30, 0xC9	; 201
    1d6a:	f0 e0       	ldi	r31, 0x00	; 0
    1d6c:	98 e9       	ldi	r25, 0x98	; 152
    1d6e:	08 c0       	rjmp	.+16     	; 0x1d80 <_ZN15OrangutanSerial15initUART_inlineEh+0x48>
    1d70:	88 23       	and	r24, r24
    1d72:	19 f4       	brne	.+6      	; 0x1d7a <_ZN15OrangutanSerial15initUART_inlineEh+0x42>
    1d74:	e1 ec       	ldi	r30, 0xC1	; 193
    1d76:	f0 e0       	ldi	r31, 0x00	; 0
    1d78:	02 c0       	rjmp	.+4      	; 0x1d7e <_ZN15OrangutanSerial15initUART_inlineEh+0x46>
    1d7a:	e9 ec       	ldi	r30, 0xC9	; 201
    1d7c:	f0 e0       	ldi	r31, 0x00	; 0
    1d7e:	98 e1       	ldi	r25, 0x18	; 24
    1d80:	90 83       	st	Z, r25
    1d82:	0e 94 52 0e 	call	0x1ca4	; 0x1ca4 <_ZN15OrangutanSerial24uart_update_tx_interruptEh>
    1d86:	78 94       	sei
    1d88:	08 95       	ret

00001d8a <_ZN15OrangutanSerial8initPortEh>:
    1d8a:	88 23       	and	r24, r24
    1d8c:	19 f0       	breq	.+6      	; 0x1d94 <_ZN15OrangutanSerial8initPortEh+0xa>
    1d8e:	81 30       	cpi	r24, 0x01	; 1
    1d90:	41 f4       	brne	.+16     	; 0x1da2 <_ZN15OrangutanSerial8initPortEh+0x18>
    1d92:	04 c0       	rjmp	.+8      	; 0x1d9c <_ZN15OrangutanSerial8initPortEh+0x12>
    1d94:	80 e0       	ldi	r24, 0x00	; 0
    1d96:	0e 94 9c 0e 	call	0x1d38	; 0x1d38 <_ZN15OrangutanSerial15initUART_inlineEh>
    1d9a:	08 95       	ret
    1d9c:	81 e0       	ldi	r24, 0x01	; 1
    1d9e:	0e 94 9c 0e 	call	0x1d38	; 0x1d38 <_ZN15OrangutanSerial15initUART_inlineEh>
    1da2:	08 95       	ret

00001da4 <_ZN15OrangutanSerial11setBaudRateEhm>:
    1da4:	a0 e0       	ldi	r26, 0x00	; 0
    1da6:	b0 e0       	ldi	r27, 0x00	; 0
    1da8:	e8 ed       	ldi	r30, 0xD8	; 216
    1daa:	fe e0       	ldi	r31, 0x0E	; 14
    1dac:	0c 94 94 18 	jmp	0x3128	; 0x3128 <__prologue_saves__+0x16>
    1db0:	d8 2e       	mov	r13, r24
    1db2:	7a 01       	movw	r14, r20
    1db4:	8b 01       	movw	r16, r22
    1db6:	0e 94 c5 0e 	call	0x1d8a	; 0x1d8a <_ZN15OrangutanSerial8initPortEh>
    1dba:	8d 2d       	mov	r24, r13
    1dbc:	82 30       	cpi	r24, 0x02	; 2
    1dbe:	01 f1       	breq	.+64     	; 0x1e00 <_ZN15OrangutanSerial11setBaudRateEhm+0x5c>
    1dc0:	dd 20       	and	r13, r13
    1dc2:	19 f4       	brne	.+6      	; 0x1dca <_ZN15OrangutanSerial11setBaudRateEhm+0x26>
    1dc4:	c4 ec       	ldi	r28, 0xC4	; 196
    1dc6:	d0 e0       	ldi	r29, 0x00	; 0
    1dc8:	02 c0       	rjmp	.+4      	; 0x1dce <_ZN15OrangutanSerial11setBaudRateEhm+0x2a>
    1dca:	cc ec       	ldi	r28, 0xCC	; 204
    1dcc:	d0 e0       	ldi	r29, 0x00	; 0
    1dce:	c8 01       	movw	r24, r16
    1dd0:	b7 01       	movw	r22, r14
    1dd2:	28 ef       	ldi	r18, 0xF8	; 248
    1dd4:	3f ef       	ldi	r19, 0xFF	; 255
    1dd6:	4f ef       	ldi	r20, 0xFF	; 255
    1dd8:	5f ef       	ldi	r21, 0xFF	; 255
    1dda:	0e 94 0d 18 	call	0x301a	; 0x301a <__mulsi3>
    1dde:	60 50       	subi	r22, 0x00	; 0
    1de0:	73 4d       	sbci	r23, 0xD3	; 211
    1de2:	8e 4c       	sbci	r24, 0xCE	; 206
    1de4:	9e 4f       	sbci	r25, 0xFE	; 254
    1de6:	a8 01       	movw	r20, r16
    1de8:	97 01       	movw	r18, r14
    1dea:	e4 e0       	ldi	r30, 0x04	; 4
    1dec:	22 0f       	add	r18, r18
    1dee:	33 1f       	adc	r19, r19
    1df0:	44 1f       	adc	r20, r20
    1df2:	55 1f       	adc	r21, r21
    1df4:	ea 95       	dec	r30
    1df6:	d1 f7       	brne	.-12     	; 0x1dec <_ZN15OrangutanSerial11setBaudRateEhm+0x48>
    1df8:	0e 94 4c 18 	call	0x3098	; 0x3098 <__udivmodsi4>
    1dfc:	39 83       	std	Y+1, r19	; 0x01
    1dfe:	28 83       	st	Y, r18
    1e00:	cd b7       	in	r28, 0x3d	; 61
    1e02:	de b7       	in	r29, 0x3e	; 62
    1e04:	e7 e0       	ldi	r30, 0x07	; 7
    1e06:	0c 94 b0 18 	jmp	0x3160	; 0x3160 <__epilogue_restores__+0x16>

00001e0a <serial_set_baud_rate>:
    1e0a:	0e 94 d2 0e 	call	0x1da4	; 0x1da4 <_ZN15OrangutanSerial11setBaudRateEhm>
    1e0e:	08 95       	ret

00001e10 <_ZN15OrangutanSerial11uart_tx_isrEh>:
    1e10:	28 2f       	mov	r18, r24
    1e12:	30 e0       	ldi	r19, 0x00	; 0
    1e14:	f9 01       	movw	r30, r18
    1e16:	ee 0f       	add	r30, r30
    1e18:	ff 1f       	adc	r31, r31
    1e1a:	73 e0       	ldi	r23, 0x03	; 3
    1e1c:	22 0f       	add	r18, r18
    1e1e:	33 1f       	adc	r19, r19
    1e20:	7a 95       	dec	r23
    1e22:	e1 f7       	brne	.-8      	; 0x1e1c <_ZN15OrangutanSerial11uart_tx_isrEh+0xc>
    1e24:	e2 0f       	add	r30, r18
    1e26:	f3 1f       	adc	r31, r19
    1e28:	e4 54       	subi	r30, 0x44	; 68
    1e2a:	fd 4f       	sbci	r31, 0xFD	; 253
    1e2c:	46 81       	ldd	r20, Z+6	; 0x06
    1e2e:	57 81       	ldd	r21, Z+7	; 0x07
    1e30:	41 15       	cp	r20, r1
    1e32:	51 05       	cpc	r21, r1
    1e34:	09 f4       	brne	.+2      	; 0x1e38 <_ZN15OrangutanSerial11uart_tx_isrEh+0x28>
    1e36:	65 c0       	rjmp	.+202    	; 0x1f02 <_ZN15OrangutanSerial11uart_tx_isrEh+0xf2>
    1e38:	28 2f       	mov	r18, r24
    1e3a:	30 e0       	ldi	r19, 0x00	; 0
    1e3c:	f9 01       	movw	r30, r18
    1e3e:	ee 0f       	add	r30, r30
    1e40:	ff 1f       	adc	r31, r31
    1e42:	93 e0       	ldi	r25, 0x03	; 3
    1e44:	22 0f       	add	r18, r18
    1e46:	33 1f       	adc	r19, r19
    1e48:	9a 95       	dec	r25
    1e4a:	e1 f7       	brne	.-8      	; 0x1e44 <_ZN15OrangutanSerial11uart_tx_isrEh+0x34>
    1e4c:	e2 0f       	add	r30, r18
    1e4e:	f3 1f       	adc	r31, r19
    1e50:	e4 54       	subi	r30, 0x44	; 68
    1e52:	fd 4f       	sbci	r31, 0xFD	; 253
    1e54:	61 81       	ldd	r22, Z+1	; 0x01
    1e56:	28 2f       	mov	r18, r24
    1e58:	30 e0       	ldi	r19, 0x00	; 0
    1e5a:	f9 01       	movw	r30, r18
    1e5c:	ee 0f       	add	r30, r30
    1e5e:	ff 1f       	adc	r31, r31
    1e60:	a3 e0       	ldi	r26, 0x03	; 3
    1e62:	22 0f       	add	r18, r18
    1e64:	33 1f       	adc	r19, r19
    1e66:	aa 95       	dec	r26
    1e68:	e1 f7       	brne	.-8      	; 0x1e62 <_ZN15OrangutanSerial11uart_tx_isrEh+0x52>
    1e6a:	e2 0f       	add	r30, r18
    1e6c:	f3 1f       	adc	r31, r19
    1e6e:	e4 54       	subi	r30, 0x44	; 68
    1e70:	fd 4f       	sbci	r31, 0xFD	; 253
    1e72:	93 81       	ldd	r25, Z+3	; 0x03
    1e74:	69 17       	cp	r22, r25
    1e76:	08 f0       	brcs	.+2      	; 0x1e7a <_ZN15OrangutanSerial11uart_tx_isrEh+0x6a>
    1e78:	44 c0       	rjmp	.+136    	; 0x1f02 <_ZN15OrangutanSerial11uart_tx_isrEh+0xf2>
    1e7a:	88 23       	and	r24, r24
    1e7c:	19 f4       	brne	.+6      	; 0x1e84 <_ZN15OrangutanSerial11uart_tx_isrEh+0x74>
    1e7e:	e0 ec       	ldi	r30, 0xC0	; 192
    1e80:	f0 e0       	ldi	r31, 0x00	; 0
    1e82:	02 c0       	rjmp	.+4      	; 0x1e88 <_ZN15OrangutanSerial11uart_tx_isrEh+0x78>
    1e84:	e8 ec       	ldi	r30, 0xC8	; 200
    1e86:	f0 e0       	ldi	r31, 0x00	; 0
    1e88:	90 81       	ld	r25, Z
    1e8a:	95 ff       	sbrs	r25, 5
    1e8c:	3a c0       	rjmp	.+116    	; 0x1f02 <_ZN15OrangutanSerial11uart_tx_isrEh+0xf2>
    1e8e:	88 23       	and	r24, r24
    1e90:	19 f4       	brne	.+6      	; 0x1e98 <_ZN15OrangutanSerial11uart_tx_isrEh+0x88>
    1e92:	a6 ec       	ldi	r26, 0xC6	; 198
    1e94:	b0 e0       	ldi	r27, 0x00	; 0
    1e96:	02 c0       	rjmp	.+4      	; 0x1e9c <_ZN15OrangutanSerial11uart_tx_isrEh+0x8c>
    1e98:	ae ec       	ldi	r26, 0xCE	; 206
    1e9a:	b0 e0       	ldi	r27, 0x00	; 0
    1e9c:	28 2f       	mov	r18, r24
    1e9e:	30 e0       	ldi	r19, 0x00	; 0
    1ea0:	f9 01       	movw	r30, r18
    1ea2:	ee 0f       	add	r30, r30
    1ea4:	ff 1f       	adc	r31, r31
    1ea6:	63 e0       	ldi	r22, 0x03	; 3
    1ea8:	22 0f       	add	r18, r18
    1eaa:	33 1f       	adc	r19, r19
    1eac:	6a 95       	dec	r22
    1eae:	e1 f7       	brne	.-8      	; 0x1ea8 <_ZN15OrangutanSerial11uart_tx_isrEh+0x98>
    1eb0:	e2 0f       	add	r30, r18
    1eb2:	f3 1f       	adc	r31, r19
    1eb4:	e4 54       	subi	r30, 0x44	; 68
    1eb6:	fd 4f       	sbci	r31, 0xFD	; 253
    1eb8:	91 81       	ldd	r25, Z+1	; 0x01
    1eba:	49 0f       	add	r20, r25
    1ebc:	51 1d       	adc	r21, r1
    1ebe:	fa 01       	movw	r30, r20
    1ec0:	90 81       	ld	r25, Z
    1ec2:	9c 93       	st	X, r25
    1ec4:	28 2f       	mov	r18, r24
    1ec6:	30 e0       	ldi	r19, 0x00	; 0
    1ec8:	f9 01       	movw	r30, r18
    1eca:	ee 0f       	add	r30, r30
    1ecc:	ff 1f       	adc	r31, r31
    1ece:	93 e0       	ldi	r25, 0x03	; 3
    1ed0:	22 0f       	add	r18, r18
    1ed2:	33 1f       	adc	r19, r19
    1ed4:	9a 95       	dec	r25
    1ed6:	e1 f7       	brne	.-8      	; 0x1ed0 <_ZN15OrangutanSerial11uart_tx_isrEh+0xc0>
    1ed8:	e2 0f       	add	r30, r18
    1eda:	f3 1f       	adc	r31, r19
    1edc:	e4 54       	subi	r30, 0x44	; 68
    1ede:	fd 4f       	sbci	r31, 0xFD	; 253
    1ee0:	91 81       	ldd	r25, Z+1	; 0x01
    1ee2:	9f 5f       	subi	r25, 0xFF	; 255
    1ee4:	28 2f       	mov	r18, r24
    1ee6:	30 e0       	ldi	r19, 0x00	; 0
    1ee8:	f9 01       	movw	r30, r18
    1eea:	ee 0f       	add	r30, r30
    1eec:	ff 1f       	adc	r31, r31
    1eee:	a3 e0       	ldi	r26, 0x03	; 3
    1ef0:	22 0f       	add	r18, r18
    1ef2:	33 1f       	adc	r19, r19
    1ef4:	aa 95       	dec	r26
    1ef6:	e1 f7       	brne	.-8      	; 0x1ef0 <_ZN15OrangutanSerial11uart_tx_isrEh+0xe0>
    1ef8:	e2 0f       	add	r30, r18
    1efa:	f3 1f       	adc	r31, r19
    1efc:	e4 54       	subi	r30, 0x44	; 68
    1efe:	fd 4f       	sbci	r31, 0xFD	; 253
    1f00:	91 83       	std	Z+1, r25	; 0x01
    1f02:	0e 94 52 0e 	call	0x1ca4	; 0x1ca4 <_ZN15OrangutanSerial24uart_update_tx_interruptEh>
    1f06:	08 95       	ret

00001f08 <_ZN15OrangutanSerial15serial_tx_checkEh>:
    1f08:	1f 93       	push	r17
    1f0a:	18 2f       	mov	r17, r24
    1f0c:	82 30       	cpi	r24, 0x02	; 2
    1f0e:	31 f0       	breq	.+12     	; 0x1f1c <_ZN15OrangutanSerial15serial_tx_checkEh+0x14>
    1f10:	0e 94 47 0e 	call	0x1c8e	; 0x1c8e <_Z25uart_disable_tx_interrupth>
    1f14:	81 2f       	mov	r24, r17
    1f16:	0e 94 08 0f 	call	0x1e10	; 0x1e10 <_ZN15OrangutanSerial11uart_tx_isrEh>
    1f1a:	1d c0       	rjmp	.+58     	; 0x1f56 <_ZN15OrangutanSerial15serial_tx_checkEh+0x4e>
    1f1c:	80 91 d6 02 	lds	r24, 0x02D6
    1f20:	90 91 d7 02 	lds	r25, 0x02D7
    1f24:	00 97       	sbiw	r24, 0x00	; 0
    1f26:	b9 f0       	breq	.+46     	; 0x1f56 <_ZN15OrangutanSerial15serial_tx_checkEh+0x4e>
    1f28:	30 91 d1 02 	lds	r19, 0x02D1
    1f2c:	20 91 d3 02 	lds	r18, 0x02D3
    1f30:	32 17       	cp	r19, r18
    1f32:	88 f4       	brcc	.+34     	; 0x1f56 <_ZN15OrangutanSerial15serial_tx_checkEh+0x4e>
    1f34:	06 c0       	rjmp	.+12     	; 0x1f42 <_ZN15OrangutanSerial15serial_tx_checkEh+0x3a>
    1f36:	80 91 d1 02 	lds	r24, 0x02D1
    1f3a:	8f 5f       	subi	r24, 0xFF	; 255
    1f3c:	80 93 d1 02 	sts	0x02D1, r24
    1f40:	ed cf       	rjmp	.-38     	; 0x1f1c <_ZN15OrangutanSerial15serial_tx_checkEh+0x14>
    1f42:	20 91 d1 02 	lds	r18, 0x02D1
    1f46:	82 0f       	add	r24, r18
    1f48:	91 1d       	adc	r25, r1
    1f4a:	fc 01       	movw	r30, r24
    1f4c:	80 81       	ld	r24, Z
    1f4e:	0e 94 83 14 	call	0x2906	; 0x2906 <_ZN12OrangutanSVP17serialSendIfReadyEc>
    1f52:	88 23       	and	r24, r24
    1f54:	81 f7       	brne	.-32     	; 0x1f36 <_ZN15OrangutanSerial15serial_tx_checkEh+0x2e>
    1f56:	1f 91       	pop	r17
    1f58:	08 95       	ret

00001f5a <_ZN15OrangutanSerial5checkEv>:
    1f5a:	80 e0       	ldi	r24, 0x00	; 0
    1f5c:	0e 94 84 0f 	call	0x1f08	; 0x1f08 <_ZN15OrangutanSerial15serial_tx_checkEh>
    1f60:	81 e0       	ldi	r24, 0x01	; 1
    1f62:	0e 94 84 0f 	call	0x1f08	; 0x1f08 <_ZN15OrangutanSerial15serial_tx_checkEh>
    1f66:	82 e0       	ldi	r24, 0x02	; 2
    1f68:	0e 94 84 0f 	call	0x1f08	; 0x1f08 <_ZN15OrangutanSerial15serial_tx_checkEh>
    1f6c:	80 e0       	ldi	r24, 0x00	; 0
    1f6e:	0e 94 b3 0c 	call	0x1966	; 0x1966 <_ZN15OrangutanSerial15serial_rx_checkEh>
    1f72:	81 e0       	ldi	r24, 0x01	; 1
    1f74:	0e 94 b3 0c 	call	0x1966	; 0x1966 <_ZN15OrangutanSerial15serial_rx_checkEh>
    1f78:	82 e0       	ldi	r24, 0x02	; 2
    1f7a:	0e 94 b3 0c 	call	0x1966	; 0x1966 <_ZN15OrangutanSerial15serial_rx_checkEh>
    1f7e:	08 95       	ret

00001f80 <serial_check>:
    1f80:	0e 94 ad 0f 	call	0x1f5a	; 0x1f5a <_ZN15OrangutanSerial5checkEv>
    1f84:	08 95       	ret

00001f86 <_ZN15OrangutanSerial4sendEhPch>:
    1f86:	28 2f       	mov	r18, r24
    1f88:	30 e0       	ldi	r19, 0x00	; 0
    1f8a:	f9 01       	movw	r30, r18
    1f8c:	ee 0f       	add	r30, r30
    1f8e:	ff 1f       	adc	r31, r31
    1f90:	93 e0       	ldi	r25, 0x03	; 3
    1f92:	22 0f       	add	r18, r18
    1f94:	33 1f       	adc	r19, r19
    1f96:	9a 95       	dec	r25
    1f98:	e1 f7       	brne	.-8      	; 0x1f92 <_ZN15OrangutanSerial4sendEhPch+0xc>
    1f9a:	e2 0f       	add	r30, r18
    1f9c:	f3 1f       	adc	r31, r19
    1f9e:	e4 54       	subi	r30, 0x44	; 68
    1fa0:	fd 4f       	sbci	r31, 0xFD	; 253
    1fa2:	77 83       	std	Z+7, r23	; 0x07
    1fa4:	66 83       	std	Z+6, r22	; 0x06
    1fa6:	28 2f       	mov	r18, r24
    1fa8:	30 e0       	ldi	r19, 0x00	; 0
    1faa:	f9 01       	movw	r30, r18
    1fac:	ee 0f       	add	r30, r30
    1fae:	ff 1f       	adc	r31, r31
    1fb0:	a3 e0       	ldi	r26, 0x03	; 3
    1fb2:	22 0f       	add	r18, r18
    1fb4:	33 1f       	adc	r19, r19
    1fb6:	aa 95       	dec	r26
    1fb8:	e1 f7       	brne	.-8      	; 0x1fb2 <_ZN15OrangutanSerial4sendEhPch+0x2c>
    1fba:	e2 0f       	add	r30, r18
    1fbc:	f3 1f       	adc	r31, r19
    1fbe:	e4 54       	subi	r30, 0x44	; 68
    1fc0:	fd 4f       	sbci	r31, 0xFD	; 253
    1fc2:	11 82       	std	Z+1, r1	; 0x01
    1fc4:	28 2f       	mov	r18, r24
    1fc6:	30 e0       	ldi	r19, 0x00	; 0
    1fc8:	f9 01       	movw	r30, r18
    1fca:	ee 0f       	add	r30, r30
    1fcc:	ff 1f       	adc	r31, r31
    1fce:	63 e0       	ldi	r22, 0x03	; 3
    1fd0:	22 0f       	add	r18, r18
    1fd2:	33 1f       	adc	r19, r19
    1fd4:	6a 95       	dec	r22
    1fd6:	e1 f7       	brne	.-8      	; 0x1fd0 <_ZN15OrangutanSerial4sendEhPch+0x4a>
    1fd8:	e2 0f       	add	r30, r18
    1fda:	f3 1f       	adc	r31, r19
    1fdc:	e4 54       	subi	r30, 0x44	; 68
    1fde:	fd 4f       	sbci	r31, 0xFD	; 253
    1fe0:	43 83       	std	Z+3, r20	; 0x03
    1fe2:	82 30       	cpi	r24, 0x02	; 2
    1fe4:	11 f0       	breq	.+4      	; 0x1fea <_ZN15OrangutanSerial4sendEhPch+0x64>
    1fe6:	0e 94 52 0e 	call	0x1ca4	; 0x1ca4 <_ZN15OrangutanSerial24uart_update_tx_interruptEh>
    1fea:	08 95       	ret

00001fec <serial_send>:
    1fec:	0e 94 c3 0f 	call	0x1f86	; 0x1f86 <_ZN15OrangutanSerial4sendEhPch>
    1ff0:	08 95       	ret

00001ff2 <__vector_21>:
    1ff2:	1f 92       	push	r1
    1ff4:	0f 92       	push	r0
    1ff6:	0f b6       	in	r0, 0x3f	; 63
    1ff8:	0f 92       	push	r0
    1ffa:	0b b6       	in	r0, 0x3b	; 59
    1ffc:	0f 92       	push	r0
    1ffe:	11 24       	eor	r1, r1
    2000:	2f 93       	push	r18
    2002:	3f 93       	push	r19
    2004:	4f 93       	push	r20
    2006:	5f 93       	push	r21
    2008:	6f 93       	push	r22
    200a:	7f 93       	push	r23
    200c:	8f 93       	push	r24
    200e:	9f 93       	push	r25
    2010:	af 93       	push	r26
    2012:	bf 93       	push	r27
    2014:	ef 93       	push	r30
    2016:	ff 93       	push	r31
    2018:	80 e0       	ldi	r24, 0x00	; 0
    201a:	0e 94 08 0f 	call	0x1e10	; 0x1e10 <_ZN15OrangutanSerial11uart_tx_isrEh>
    201e:	ff 91       	pop	r31
    2020:	ef 91       	pop	r30
    2022:	bf 91       	pop	r27
    2024:	af 91       	pop	r26
    2026:	9f 91       	pop	r25
    2028:	8f 91       	pop	r24
    202a:	7f 91       	pop	r23
    202c:	6f 91       	pop	r22
    202e:	5f 91       	pop	r21
    2030:	4f 91       	pop	r20
    2032:	3f 91       	pop	r19
    2034:	2f 91       	pop	r18
    2036:	0f 90       	pop	r0
    2038:	0b be       	out	0x3b, r0	; 59
    203a:	0f 90       	pop	r0
    203c:	0f be       	out	0x3f, r0	; 63
    203e:	0f 90       	pop	r0
    2040:	1f 90       	pop	r1
    2042:	18 95       	reti

00002044 <__vector_29>:
    2044:	1f 92       	push	r1
    2046:	0f 92       	push	r0
    2048:	0f b6       	in	r0, 0x3f	; 63
    204a:	0f 92       	push	r0
    204c:	0b b6       	in	r0, 0x3b	; 59
    204e:	0f 92       	push	r0
    2050:	11 24       	eor	r1, r1
    2052:	2f 93       	push	r18
    2054:	3f 93       	push	r19
    2056:	4f 93       	push	r20
    2058:	5f 93       	push	r21
    205a:	6f 93       	push	r22
    205c:	7f 93       	push	r23
    205e:	8f 93       	push	r24
    2060:	9f 93       	push	r25
    2062:	af 93       	push	r26
    2064:	bf 93       	push	r27
    2066:	ef 93       	push	r30
    2068:	ff 93       	push	r31
    206a:	81 e0       	ldi	r24, 0x01	; 1
    206c:	0e 94 08 0f 	call	0x1e10	; 0x1e10 <_ZN15OrangutanSerial11uart_tx_isrEh>
    2070:	ff 91       	pop	r31
    2072:	ef 91       	pop	r30
    2074:	bf 91       	pop	r27
    2076:	af 91       	pop	r26
    2078:	9f 91       	pop	r25
    207a:	8f 91       	pop	r24
    207c:	7f 91       	pop	r23
    207e:	6f 91       	pop	r22
    2080:	5f 91       	pop	r21
    2082:	4f 91       	pop	r20
    2084:	3f 91       	pop	r19
    2086:	2f 91       	pop	r18
    2088:	0f 90       	pop	r0
    208a:	0b be       	out	0x3b, r0	; 59
    208c:	0f 90       	pop	r0
    208e:	0f be       	out	0x3f, r0	; 63
    2090:	0f 90       	pop	r0
    2092:	1f 90       	pop	r1
    2094:	18 95       	reti

00002096 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh>:
    2096:	fc 01       	movw	r30, r24
    2098:	11 82       	std	Z+1, r1	; 0x01
    209a:	10 82       	st	Z, r1
    209c:	13 82       	std	Z+3, r1	; 0x03
    209e:	12 82       	std	Z+2, r1	; 0x02
    20a0:	15 82       	std	Z+5, r1	; 0x05
    20a2:	14 82       	std	Z+4, r1	; 0x04
    20a4:	16 82       	std	Z+6, r1	; 0x06
    20a6:	68 30       	cpi	r22, 0x08	; 8
    20a8:	68 f4       	brcc	.+26     	; 0x20c4 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x2e>
    20aa:	89 e2       	ldi	r24, 0x29	; 41
    20ac:	90 e0       	ldi	r25, 0x00	; 0
    20ae:	91 83       	std	Z+1, r25	; 0x01
    20b0:	80 83       	st	Z, r24
    20b2:	8b e2       	ldi	r24, 0x2B	; 43
    20b4:	90 e0       	ldi	r25, 0x00	; 0
    20b6:	93 83       	std	Z+3, r25	; 0x03
    20b8:	82 83       	std	Z+2, r24	; 0x02
    20ba:	8a e2       	ldi	r24, 0x2A	; 42
    20bc:	90 e0       	ldi	r25, 0x00	; 0
    20be:	95 83       	std	Z+5, r25	; 0x05
    20c0:	84 83       	std	Z+4, r24	; 0x04
    20c2:	23 c0       	rjmp	.+70     	; 0x210a <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x74>
    20c4:	60 31       	cpi	r22, 0x10	; 16
    20c6:	80 f4       	brcc	.+32     	; 0x20e8 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x52>
    20c8:	83 e2       	ldi	r24, 0x23	; 35
    20ca:	90 e0       	ldi	r25, 0x00	; 0
    20cc:	91 83       	std	Z+1, r25	; 0x01
    20ce:	80 83       	st	Z, r24
    20d0:	85 e2       	ldi	r24, 0x25	; 37
    20d2:	90 e0       	ldi	r25, 0x00	; 0
    20d4:	93 83       	std	Z+3, r25	; 0x03
    20d6:	82 83       	std	Z+2, r24	; 0x02
    20d8:	84 e2       	ldi	r24, 0x24	; 36
    20da:	90 e0       	ldi	r25, 0x00	; 0
    20dc:	95 83       	std	Z+5, r25	; 0x05
    20de:	84 83       	std	Z+4, r24	; 0x04
    20e0:	70 e0       	ldi	r23, 0x00	; 0
    20e2:	68 50       	subi	r22, 0x08	; 8
    20e4:	70 40       	sbci	r23, 0x00	; 0
    20e6:	11 c0       	rjmp	.+34     	; 0x210a <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x74>
    20e8:	68 31       	cpi	r22, 0x18	; 24
    20ea:	c0 f4       	brcc	.+48     	; 0x211c <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x86>
    20ec:	86 e2       	ldi	r24, 0x26	; 38
    20ee:	90 e0       	ldi	r25, 0x00	; 0
    20f0:	91 83       	std	Z+1, r25	; 0x01
    20f2:	80 83       	st	Z, r24
    20f4:	88 e2       	ldi	r24, 0x28	; 40
    20f6:	90 e0       	ldi	r25, 0x00	; 0
    20f8:	93 83       	std	Z+3, r25	; 0x03
    20fa:	82 83       	std	Z+2, r24	; 0x02
    20fc:	87 e2       	ldi	r24, 0x27	; 39
    20fe:	90 e0       	ldi	r25, 0x00	; 0
    2100:	95 83       	std	Z+5, r25	; 0x05
    2102:	84 83       	std	Z+4, r24	; 0x04
    2104:	70 e0       	ldi	r23, 0x00	; 0
    2106:	60 51       	subi	r22, 0x10	; 16
    2108:	70 40       	sbci	r23, 0x00	; 0
    210a:	81 e0       	ldi	r24, 0x01	; 1
    210c:	90 e0       	ldi	r25, 0x00	; 0
    210e:	02 c0       	rjmp	.+4      	; 0x2114 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x7e>
    2110:	88 0f       	add	r24, r24
    2112:	99 1f       	adc	r25, r25
    2114:	6a 95       	dec	r22
    2116:	e2 f7       	brpl	.-8      	; 0x2110 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x7a>
    2118:	86 83       	std	Z+6, r24	; 0x06
    211a:	08 95       	ret
    211c:	60 32       	cpi	r22, 0x20	; 32
    211e:	c0 f4       	brcc	.+48     	; 0x2150 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0xba>
    2120:	80 e2       	ldi	r24, 0x20	; 32
    2122:	90 e0       	ldi	r25, 0x00	; 0
    2124:	91 83       	std	Z+1, r25	; 0x01
    2126:	80 83       	st	Z, r24
    2128:	82 e2       	ldi	r24, 0x22	; 34
    212a:	90 e0       	ldi	r25, 0x00	; 0
    212c:	93 83       	std	Z+3, r25	; 0x03
    212e:	82 83       	std	Z+2, r24	; 0x02
    2130:	81 e2       	ldi	r24, 0x21	; 33
    2132:	90 e0       	ldi	r25, 0x00	; 0
    2134:	95 83       	std	Z+5, r25	; 0x05
    2136:	84 83       	std	Z+4, r24	; 0x04
    2138:	2f e1       	ldi	r18, 0x1F	; 31
    213a:	30 e0       	ldi	r19, 0x00	; 0
    213c:	26 1b       	sub	r18, r22
    213e:	31 09       	sbc	r19, r1
    2140:	81 e0       	ldi	r24, 0x01	; 1
    2142:	90 e0       	ldi	r25, 0x00	; 0
    2144:	02 c0       	rjmp	.+4      	; 0x214a <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0xb4>
    2146:	88 0f       	add	r24, r24
    2148:	99 1f       	adc	r25, r25
    214a:	2a 95       	dec	r18
    214c:	e2 f7       	brpl	.-8      	; 0x2146 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0xb0>
    214e:	86 83       	std	Z+6, r24	; 0x06
    2150:	08 95       	ret

00002152 <_ZN16OrangutanDigital16setDataDirectionEP8IOStructh>:
    2152:	fc 01       	movw	r30, r24
    2154:	a4 81       	ldd	r26, Z+4	; 0x04
    2156:	b5 81       	ldd	r27, Z+5	; 0x05
    2158:	86 81       	ldd	r24, Z+6	; 0x06
    215a:	66 23       	and	r22, r22
    215c:	21 f0       	breq	.+8      	; 0x2166 <_ZN16OrangutanDigital16setDataDirectionEP8IOStructh+0x14>
    215e:	9c 91       	ld	r25, X
    2160:	98 2b       	or	r25, r24
    2162:	9c 93       	st	X, r25
    2164:	08 95       	ret
    2166:	9c 91       	ld	r25, X
    2168:	80 95       	com	r24
    216a:	89 23       	and	r24, r25
    216c:	8c 93       	st	X, r24
    216e:	08 95       	ret

00002170 <_ZN16OrangutanDigital14setOutputValueEP8IOStructh>:
    2170:	fc 01       	movw	r30, r24
    2172:	6f 3f       	cpi	r22, 0xFF	; 255
    2174:	31 f4       	brne	.+12     	; 0x2182 <_ZN16OrangutanDigital14setOutputValueEP8IOStructh+0x12>
    2176:	a2 81       	ldd	r26, Z+2	; 0x02
    2178:	b3 81       	ldd	r27, Z+3	; 0x03
    217a:	8c 91       	ld	r24, X
    217c:	96 81       	ldd	r25, Z+6	; 0x06
    217e:	89 27       	eor	r24, r25
    2180:	0c c0       	rjmp	.+24     	; 0x219a <_ZN16OrangutanDigital14setOutputValueEP8IOStructh+0x2a>
    2182:	a2 81       	ldd	r26, Z+2	; 0x02
    2184:	b3 81       	ldd	r27, Z+3	; 0x03
    2186:	86 81       	ldd	r24, Z+6	; 0x06
    2188:	66 23       	and	r22, r22
    218a:	21 f0       	breq	.+8      	; 0x2194 <_ZN16OrangutanDigital14setOutputValueEP8IOStructh+0x24>
    218c:	9c 91       	ld	r25, X
    218e:	98 2b       	or	r25, r24
    2190:	9c 93       	st	X, r25
    2192:	08 95       	ret
    2194:	9c 91       	ld	r25, X
    2196:	80 95       	com	r24
    2198:	89 23       	and	r24, r25
    219a:	8c 93       	st	X, r24
    219c:	08 95       	ret

0000219e <_ZN15OrangutanServos11initPortPinEP10PortStructh>:
    219e:	a7 e0       	ldi	r26, 0x07	; 7
    21a0:	b0 e0       	ldi	r27, 0x00	; 0
    21a2:	e5 ed       	ldi	r30, 0xD5	; 213
    21a4:	f0 e1       	ldi	r31, 0x10	; 16
    21a6:	0c 94 95 18 	jmp	0x312a	; 0x312a <__prologue_saves__+0x18>
    21aa:	7c 01       	movw	r14, r24
    21ac:	8e 01       	movw	r16, r28
    21ae:	0f 5f       	subi	r16, 0xFF	; 255
    21b0:	1f 4f       	sbci	r17, 0xFF	; 255
    21b2:	c8 01       	movw	r24, r16
    21b4:	0e 94 4b 10 	call	0x2096	; 0x2096 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh>
    21b8:	c8 01       	movw	r24, r16
    21ba:	60 e0       	ldi	r22, 0x00	; 0
    21bc:	0e 94 b8 10 	call	0x2170	; 0x2170 <_ZN16OrangutanDigital14setOutputValueEP8IOStructh>
    21c0:	c8 01       	movw	r24, r16
    21c2:	61 e0       	ldi	r22, 0x01	; 1
    21c4:	0e 94 a9 10 	call	0x2152	; 0x2152 <_ZN16OrangutanDigital16setDataDirectionEP8IOStructh>
    21c8:	8b 81       	ldd	r24, Y+3	; 0x03
    21ca:	9c 81       	ldd	r25, Y+4	; 0x04
    21cc:	f7 01       	movw	r30, r14
    21ce:	91 83       	std	Z+1, r25	; 0x01
    21d0:	80 83       	st	Z, r24
    21d2:	8f 81       	ldd	r24, Y+7	; 0x07
    21d4:	82 83       	std	Z+2, r24	; 0x02
    21d6:	27 96       	adiw	r28, 0x07	; 7
    21d8:	e6 e0       	ldi	r30, 0x06	; 6
    21da:	0c 94 b1 18 	jmp	0x3162	; 0x3162 <__epilogue_restores__+0x18>

000021de <__vector_12>:
    21de:	1f 92       	push	r1
    21e0:	0f 92       	push	r0
    21e2:	0f b6       	in	r0, 0x3f	; 63
    21e4:	0f 92       	push	r0
    21e6:	0b b6       	in	r0, 0x3b	; 59
    21e8:	0f 92       	push	r0
    21ea:	11 24       	eor	r1, r1
    21ec:	1f 93       	push	r17
    21ee:	2f 93       	push	r18
    21f0:	3f 93       	push	r19
    21f2:	4f 93       	push	r20
    21f4:	5f 93       	push	r21
    21f6:	6f 93       	push	r22
    21f8:	7f 93       	push	r23
    21fa:	8f 93       	push	r24
    21fc:	9f 93       	push	r25
    21fe:	af 93       	push	r26
    2200:	bf 93       	push	r27
    2202:	ef 93       	push	r30
    2204:	ff 93       	push	r31
    2206:	80 91 3b 03 	lds	r24, 0x033B
    220a:	8f 5f       	subi	r24, 0xFF	; 255
    220c:	87 70       	andi	r24, 0x07	; 7
    220e:	80 93 3b 03 	sts	0x033B, r24
    2212:	40 e0       	ldi	r20, 0x00	; 0
    2214:	53 e0       	ldi	r21, 0x03	; 3
    2216:	21 c0       	rjmp	.+66     	; 0x225a <__vector_12+0x7c>
    2218:	90 e0       	ldi	r25, 0x00	; 0
    221a:	20 91 3c 03 	lds	r18, 0x033C
    221e:	30 91 3d 03 	lds	r19, 0x033D
    2222:	80 ff       	sbrs	r24, 0
    2224:	0b c0       	rjmp	.+22     	; 0x223c <__vector_12+0x5e>
    2226:	45 9f       	mul	r20, r21
    2228:	f0 01       	movw	r30, r0
    222a:	11 24       	eor	r1, r1
    222c:	e2 0f       	add	r30, r18
    222e:	f3 1f       	adc	r31, r19
    2230:	a0 81       	ld	r26, Z
    2232:	b1 81       	ldd	r27, Z+1	; 0x01
    2234:	2c 91       	ld	r18, X
    2236:	32 81       	ldd	r19, Z+2	; 0x02
    2238:	23 2b       	or	r18, r19
    223a:	0b c0       	rjmp	.+22     	; 0x2252 <__vector_12+0x74>
    223c:	45 9f       	mul	r20, r21
    223e:	f0 01       	movw	r30, r0
    2240:	11 24       	eor	r1, r1
    2242:	e2 0f       	add	r30, r18
    2244:	f3 1f       	adc	r31, r19
    2246:	a0 81       	ld	r26, Z
    2248:	b1 81       	ldd	r27, Z+1	; 0x01
    224a:	3c 91       	ld	r19, X
    224c:	22 81       	ldd	r18, Z+2	; 0x02
    224e:	20 95       	com	r18
    2250:	23 23       	and	r18, r19
    2252:	2c 93       	st	X, r18
    2254:	95 95       	asr	r25
    2256:	87 95       	ror	r24
    2258:	4f 5f       	subi	r20, 0xFF	; 255
    225a:	90 91 38 03 	lds	r25, 0x0338
    225e:	49 17       	cp	r20, r25
    2260:	d8 f2       	brcs	.-74     	; 0x2218 <__vector_12+0x3a>
    2262:	10 91 3b 03 	lds	r17, 0x033B
    2266:	1f 5f       	subi	r17, 0xFF	; 255
    2268:	17 70       	andi	r17, 0x07	; 7
    226a:	80 91 39 03 	lds	r24, 0x0339
    226e:	18 17       	cp	r17, r24
    2270:	28 f0       	brcs	.+10     	; 0x227c <__vector_12+0x9e>
    2272:	10 92 89 00 	sts	0x0089, r1
    2276:	10 92 88 00 	sts	0x0088, r1
    227a:	49 c0       	rjmp	.+146    	; 0x230e <__vector_12+0x130>
    227c:	21 2f       	mov	r18, r17
    227e:	30 e0       	ldi	r19, 0x00	; 0
    2280:	22 0f       	add	r18, r18
    2282:	33 1f       	adc	r19, r19
    2284:	e0 91 2c 03 	lds	r30, 0x032C
    2288:	f0 91 2d 03 	lds	r31, 0x032D
    228c:	e2 0f       	add	r30, r18
    228e:	f3 1f       	adc	r31, r19
    2290:	40 81       	ld	r20, Z
    2292:	51 81       	ldd	r21, Z+1	; 0x01
    2294:	a0 91 34 03 	lds	r26, 0x0334
    2298:	b0 91 35 03 	lds	r27, 0x0335
    229c:	a2 0f       	add	r26, r18
    229e:	b3 1f       	adc	r27, r19
    22a0:	6d 91       	ld	r22, X+
    22a2:	7c 91       	ld	r23, X
    22a4:	11 97       	sbiw	r26, 0x01	; 1
    22a6:	61 15       	cp	r22, r1
    22a8:	71 05       	cpc	r23, r1
    22aa:	11 f1       	breq	.+68     	; 0x22f0 <__vector_12+0x112>
    22ac:	41 15       	cp	r20, r1
    22ae:	51 05       	cpc	r21, r1
    22b0:	f9 f0       	breq	.+62     	; 0x22f0 <__vector_12+0x112>
    22b2:	a0 91 30 03 	lds	r26, 0x0330
    22b6:	b0 91 31 03 	lds	r27, 0x0331
    22ba:	a2 0f       	add	r26, r18
    22bc:	b3 1f       	adc	r27, r19
    22be:	8d 91       	ld	r24, X+
    22c0:	9c 91       	ld	r25, X
    22c2:	11 97       	sbiw	r26, 0x01	; 1
    22c4:	00 97       	sbiw	r24, 0x00	; 0
    22c6:	a1 f0       	breq	.+40     	; 0x22f0 <__vector_12+0x112>
    22c8:	48 17       	cp	r20, r24
    22ca:	59 07       	cpc	r21, r25
    22cc:	38 f4       	brcc	.+14     	; 0x22dc <__vector_12+0xfe>
    22ce:	46 0f       	add	r20, r22
    22d0:	57 1f       	adc	r21, r23
    22d2:	48 17       	cp	r20, r24
    22d4:	59 07       	cpc	r21, r25
    22d6:	a8 f4       	brcc	.+42     	; 0x2302 <__vector_12+0x124>
    22d8:	ca 01       	movw	r24, r20
    22da:	13 c0       	rjmp	.+38     	; 0x2302 <__vector_12+0x124>
    22dc:	9c 01       	movw	r18, r24
    22de:	26 0f       	add	r18, r22
    22e0:	37 1f       	adc	r19, r23
    22e2:	42 17       	cp	r20, r18
    22e4:	53 07       	cpc	r21, r19
    22e6:	68 f0       	brcs	.+26     	; 0x2302 <__vector_12+0x124>
    22e8:	ca 01       	movw	r24, r20
    22ea:	86 1b       	sub	r24, r22
    22ec:	97 0b       	sbc	r25, r23
    22ee:	09 c0       	rjmp	.+18     	; 0x2302 <__vector_12+0x124>
    22f0:	a0 91 30 03 	lds	r26, 0x0330
    22f4:	b0 91 31 03 	lds	r27, 0x0331
    22f8:	a2 0f       	add	r26, r18
    22fa:	b3 1f       	adc	r27, r19
    22fc:	8d 91       	ld	r24, X+
    22fe:	9c 91       	ld	r25, X
    2300:	11 97       	sbiw	r26, 0x01	; 1
    2302:	90 93 89 00 	sts	0x0089, r25
    2306:	80 93 88 00 	sts	0x0088, r24
    230a:	91 83       	std	Z+1, r25	; 0x01
    230c:	80 83       	st	Z, r24
    230e:	80 91 3a 03 	lds	r24, 0x033A
    2312:	18 17       	cp	r17, r24
    2314:	28 f0       	brcs	.+10     	; 0x2320 <__vector_12+0x142>
    2316:	10 92 8b 00 	sts	0x008B, r1
    231a:	10 92 8a 00 	sts	0x008A, r1
    231e:	42 c0       	rjmp	.+132    	; 0x23a4 <__vector_12+0x1c6>
    2320:	81 2f       	mov	r24, r17
    2322:	90 e0       	ldi	r25, 0x00	; 0
    2324:	88 0f       	add	r24, r24
    2326:	99 1f       	adc	r25, r25
    2328:	e0 91 2e 03 	lds	r30, 0x032E
    232c:	f0 91 2f 03 	lds	r31, 0x032F
    2330:	e8 0f       	add	r30, r24
    2332:	f9 1f       	adc	r31, r25
    2334:	40 81       	ld	r20, Z
    2336:	51 81       	ldd	r21, Z+1	; 0x01
    2338:	a0 91 36 03 	lds	r26, 0x0336
    233c:	b0 91 37 03 	lds	r27, 0x0337
    2340:	a8 0f       	add	r26, r24
    2342:	b9 1f       	adc	r27, r25
    2344:	2d 91       	ld	r18, X+
    2346:	3c 91       	ld	r19, X
    2348:	11 97       	sbiw	r26, 0x01	; 1
    234a:	60 91 32 03 	lds	r22, 0x0332
    234e:	70 91 33 03 	lds	r23, 0x0333
    2352:	21 15       	cp	r18, r1
    2354:	31 05       	cpc	r19, r1
    2356:	d1 f0       	breq	.+52     	; 0x238c <__vector_12+0x1ae>
    2358:	86 0f       	add	r24, r22
    235a:	97 1f       	adc	r25, r23
    235c:	dc 01       	movw	r26, r24
    235e:	8d 91       	ld	r24, X+
    2360:	9c 91       	ld	r25, X
    2362:	11 97       	sbiw	r26, 0x01	; 1
    2364:	48 17       	cp	r20, r24
    2366:	59 07       	cpc	r21, r25
    2368:	38 f4       	brcc	.+14     	; 0x2378 <__vector_12+0x19a>
    236a:	24 0f       	add	r18, r20
    236c:	35 1f       	adc	r19, r21
    236e:	28 17       	cp	r18, r24
    2370:	39 07       	cpc	r19, r25
    2372:	90 f4       	brcc	.+36     	; 0x2398 <__vector_12+0x1ba>
    2374:	c9 01       	movw	r24, r18
    2376:	10 c0       	rjmp	.+32     	; 0x2398 <__vector_12+0x1ba>
    2378:	bc 01       	movw	r22, r24
    237a:	62 0f       	add	r22, r18
    237c:	73 1f       	adc	r23, r19
    237e:	46 17       	cp	r20, r22
    2380:	57 07       	cpc	r21, r23
    2382:	50 f0       	brcs	.+20     	; 0x2398 <__vector_12+0x1ba>
    2384:	ca 01       	movw	r24, r20
    2386:	82 1b       	sub	r24, r18
    2388:	93 0b       	sbc	r25, r19
    238a:	06 c0       	rjmp	.+12     	; 0x2398 <__vector_12+0x1ba>
    238c:	86 0f       	add	r24, r22
    238e:	97 1f       	adc	r25, r23
    2390:	dc 01       	movw	r26, r24
    2392:	8d 91       	ld	r24, X+
    2394:	9c 91       	ld	r25, X
    2396:	11 97       	sbiw	r26, 0x01	; 1
    2398:	90 93 8b 00 	sts	0x008B, r25
    239c:	80 93 8a 00 	sts	0x008A, r24
    23a0:	91 83       	std	Z+1, r25	; 0x01
    23a2:	80 83       	st	Z, r24
    23a4:	80 91 3b 03 	lds	r24, 0x033B
    23a8:	90 91 3a 03 	lds	r25, 0x033A
    23ac:	89 17       	cp	r24, r25
    23ae:	88 f4       	brcc	.+34     	; 0x23d2 <__vector_12+0x1f4>
    23b0:	93 e0       	ldi	r25, 0x03	; 3
    23b2:	89 9f       	mul	r24, r25
    23b4:	c0 01       	movw	r24, r0
    23b6:	11 24       	eor	r1, r1
    23b8:	e0 91 3e 03 	lds	r30, 0x033E
    23bc:	f0 91 3f 03 	lds	r31, 0x033F
    23c0:	e8 0f       	add	r30, r24
    23c2:	f9 1f       	adc	r31, r25
    23c4:	a0 81       	ld	r26, Z
    23c6:	b1 81       	ldd	r27, Z+1	; 0x01
    23c8:	9c 91       	ld	r25, X
    23ca:	82 81       	ldd	r24, Z+2	; 0x02
    23cc:	80 95       	com	r24
    23ce:	89 23       	and	r24, r25
    23d0:	8c 93       	st	X, r24
    23d2:	ff 91       	pop	r31
    23d4:	ef 91       	pop	r30
    23d6:	bf 91       	pop	r27
    23d8:	af 91       	pop	r26
    23da:	9f 91       	pop	r25
    23dc:	8f 91       	pop	r24
    23de:	7f 91       	pop	r23
    23e0:	6f 91       	pop	r22
    23e2:	5f 91       	pop	r21
    23e4:	4f 91       	pop	r20
    23e6:	3f 91       	pop	r19
    23e8:	2f 91       	pop	r18
    23ea:	1f 91       	pop	r17
    23ec:	0f 90       	pop	r0
    23ee:	0b be       	out	0x3b, r0	; 59
    23f0:	0f 90       	pop	r0
    23f2:	0f be       	out	0x3f, r0	; 63
    23f4:	0f 90       	pop	r0
    23f6:	1f 90       	pop	r1
    23f8:	18 95       	reti

000023fa <__vector_14>:
    23fa:	1f 92       	push	r1
    23fc:	0f 92       	push	r0
    23fe:	0f b6       	in	r0, 0x3f	; 63
    2400:	0f 92       	push	r0
    2402:	0b b6       	in	r0, 0x3b	; 59
    2404:	0f 92       	push	r0
    2406:	11 24       	eor	r1, r1
    2408:	8f 93       	push	r24
    240a:	9f 93       	push	r25
    240c:	af 93       	push	r26
    240e:	bf 93       	push	r27
    2410:	ef 93       	push	r30
    2412:	ff 93       	push	r31
    2414:	80 91 3b 03 	lds	r24, 0x033B
    2418:	90 91 3a 03 	lds	r25, 0x033A
    241c:	89 17       	cp	r24, r25
    241e:	80 f4       	brcc	.+32     	; 0x2440 <__vector_14+0x46>
    2420:	93 e0       	ldi	r25, 0x03	; 3
    2422:	89 9f       	mul	r24, r25
    2424:	c0 01       	movw	r24, r0
    2426:	11 24       	eor	r1, r1
    2428:	e0 91 3e 03 	lds	r30, 0x033E
    242c:	f0 91 3f 03 	lds	r31, 0x033F
    2430:	e8 0f       	add	r30, r24
    2432:	f9 1f       	adc	r31, r25
    2434:	a0 81       	ld	r26, Z
    2436:	b1 81       	ldd	r27, Z+1	; 0x01
    2438:	8c 91       	ld	r24, X
    243a:	92 81       	ldd	r25, Z+2	; 0x02
    243c:	89 27       	eor	r24, r25
    243e:	8c 93       	st	X, r24
    2440:	ff 91       	pop	r31
    2442:	ef 91       	pop	r30
    2444:	bf 91       	pop	r27
    2446:	af 91       	pop	r26
    2448:	9f 91       	pop	r25
    244a:	8f 91       	pop	r24
    244c:	0f 90       	pop	r0
    244e:	0b be       	out	0x3b, r0	; 59
    2450:	0f 90       	pop	r0
    2452:	0f be       	out	0x3f, r0	; 63
    2454:	0f 90       	pop	r0
    2456:	1f 90       	pop	r1
    2458:	18 95       	reti

0000245a <_Z15freeServoMemoryv>:
    245a:	80 91 3c 03 	lds	r24, 0x033C
    245e:	90 91 3d 03 	lds	r25, 0x033D
    2462:	00 97       	sbiw	r24, 0x00	; 0
    2464:	31 f0       	breq	.+12     	; 0x2472 <_Z15freeServoMemoryv+0x18>
    2466:	0e 94 56 19 	call	0x32ac	; 0x32ac <free>
    246a:	10 92 3d 03 	sts	0x033D, r1
    246e:	10 92 3c 03 	sts	0x033C, r1
    2472:	80 91 2c 03 	lds	r24, 0x032C
    2476:	90 91 2d 03 	lds	r25, 0x032D
    247a:	00 97       	sbiw	r24, 0x00	; 0
    247c:	31 f0       	breq	.+12     	; 0x248a <_Z15freeServoMemoryv+0x30>
    247e:	0e 94 56 19 	call	0x32ac	; 0x32ac <free>
    2482:	10 92 2d 03 	sts	0x032D, r1
    2486:	10 92 2c 03 	sts	0x032C, r1
    248a:	80 91 30 03 	lds	r24, 0x0330
    248e:	90 91 31 03 	lds	r25, 0x0331
    2492:	00 97       	sbiw	r24, 0x00	; 0
    2494:	31 f0       	breq	.+12     	; 0x24a2 <_Z15freeServoMemoryv+0x48>
    2496:	0e 94 56 19 	call	0x32ac	; 0x32ac <free>
    249a:	10 92 31 03 	sts	0x0331, r1
    249e:	10 92 30 03 	sts	0x0330, r1
    24a2:	80 91 34 03 	lds	r24, 0x0334
    24a6:	90 91 35 03 	lds	r25, 0x0335
    24aa:	00 97       	sbiw	r24, 0x00	; 0
    24ac:	31 f0       	breq	.+12     	; 0x24ba <_Z15freeServoMemoryv+0x60>
    24ae:	0e 94 56 19 	call	0x32ac	; 0x32ac <free>
    24b2:	10 92 35 03 	sts	0x0335, r1
    24b6:	10 92 34 03 	sts	0x0334, r1
    24ba:	80 91 3e 03 	lds	r24, 0x033E
    24be:	90 91 3f 03 	lds	r25, 0x033F
    24c2:	00 97       	sbiw	r24, 0x00	; 0
    24c4:	31 f0       	breq	.+12     	; 0x24d2 <_Z15freeServoMemoryv+0x78>
    24c6:	0e 94 56 19 	call	0x32ac	; 0x32ac <free>
    24ca:	10 92 3f 03 	sts	0x033F, r1
    24ce:	10 92 3e 03 	sts	0x033E, r1
    24d2:	80 91 2e 03 	lds	r24, 0x032E
    24d6:	90 91 2f 03 	lds	r25, 0x032F
    24da:	00 97       	sbiw	r24, 0x00	; 0
    24dc:	31 f0       	breq	.+12     	; 0x24ea <_Z15freeServoMemoryv+0x90>
    24de:	0e 94 56 19 	call	0x32ac	; 0x32ac <free>
    24e2:	10 92 2f 03 	sts	0x032F, r1
    24e6:	10 92 2e 03 	sts	0x032E, r1
    24ea:	80 91 32 03 	lds	r24, 0x0332
    24ee:	90 91 33 03 	lds	r25, 0x0333
    24f2:	00 97       	sbiw	r24, 0x00	; 0
    24f4:	31 f0       	breq	.+12     	; 0x2502 <_Z15freeServoMemoryv+0xa8>
    24f6:	0e 94 56 19 	call	0x32ac	; 0x32ac <free>
    24fa:	10 92 33 03 	sts	0x0333, r1
    24fe:	10 92 32 03 	sts	0x0332, r1
    2502:	80 91 36 03 	lds	r24, 0x0336
    2506:	90 91 37 03 	lds	r25, 0x0337
    250a:	00 97       	sbiw	r24, 0x00	; 0
    250c:	31 f0       	breq	.+12     	; 0x251a <_Z15freeServoMemoryv+0xc0>
    250e:	0e 94 56 19 	call	0x32ac	; 0x32ac <free>
    2512:	10 92 37 03 	sts	0x0337, r1
    2516:	10 92 36 03 	sts	0x0336, r1
    251a:	08 95       	ret

0000251c <_ZN15OrangutanServos5startEPKhhS1_h>:
    251c:	a1 e0       	ldi	r26, 0x01	; 1
    251e:	b0 e0       	ldi	r27, 0x00	; 0
    2520:	e4 e9       	ldi	r30, 0x94	; 148
    2522:	f2 e1       	ldi	r31, 0x12	; 18
    2524:	0c 94 8b 18 	jmp	0x3116	; 0x3116 <__prologue_saves__+0x4>
    2528:	98 2e       	mov	r9, r24
    252a:	79 2e       	mov	r7, r25
    252c:	84 2e       	mov	r8, r20
    252e:	65 2e       	mov	r6, r21
    2530:	10 92 6f 00 	sts	0x006F, r1
    2534:	10 92 4b 03 	sts	0x034B, r1
    2538:	81 e0       	ldi	r24, 0x01	; 1
    253a:	80 93 da 02 	sts	0x02DA, r24
    253e:	10 92 4d 03 	sts	0x034D, r1
    2542:	10 92 4c 03 	sts	0x034C, r1
    2546:	10 92 81 00 	sts	0x0081, r1
    254a:	c6 2e       	mov	r12, r22
    254c:	64 30       	cpi	r22, 0x04	; 4
    254e:	10 f0       	brcs	.+4      	; 0x2554 <_ZN15OrangutanServos5startEPKhhS1_h+0x38>
    2550:	13 e0       	ldi	r17, 0x03	; 3
    2552:	c1 2e       	mov	r12, r17
    2554:	c0 92 38 03 	sts	0x0338, r12
    2558:	81 e0       	ldi	r24, 0x01	; 1
    255a:	90 e0       	ldi	r25, 0x00	; 0
    255c:	0c 2c       	mov	r0, r12
    255e:	02 c0       	rjmp	.+4      	; 0x2564 <_ZN15OrangutanServos5startEPKhhS1_h+0x48>
    2560:	88 0f       	add	r24, r24
    2562:	99 1f       	adc	r25, r25
    2564:	0a 94       	dec	r0
    2566:	e2 f7       	brpl	.-8      	; 0x2560 <_ZN15OrangutanServos5startEPKhhS1_h+0x44>
    2568:	80 93 39 03 	sts	0x0339, r24
    256c:	5d 98       	cbi	0x0b, 5	; 11
    256e:	55 9a       	sbi	0x0a, 5	; 10
    2570:	82 e8       	ldi	r24, 0x82	; 130
    2572:	80 93 80 00 	sts	0x0080, r24
    2576:	d2 2e       	mov	r13, r18
    2578:	29 30       	cpi	r18, 0x09	; 9
    257a:	10 f0       	brcs	.+4      	; 0x2580 <_ZN15OrangutanServos5startEPKhhS1_h+0x64>
    257c:	b8 e0       	ldi	r27, 0x08	; 8
    257e:	db 2e       	mov	r13, r27
    2580:	d0 92 3a 03 	sts	0x033A, r13
    2584:	0e 94 2d 12 	call	0x245a	; 0x245a <_Z15freeServoMemoryv>
    2588:	43 e0       	ldi	r20, 0x03	; 3
    258a:	2c 2d       	mov	r18, r12
    258c:	24 9f       	mul	r18, r20
    258e:	c0 01       	movw	r24, r0
    2590:	11 24       	eor	r1, r1
    2592:	49 83       	std	Y+1, r20	; 0x01
    2594:	0e 94 c0 18 	call	0x3180	; 0x3180 <malloc>
    2598:	8c 01       	movw	r16, r24
    259a:	90 93 3d 03 	sts	0x033D, r25
    259e:	80 93 3c 03 	sts	0x033C, r24
    25a2:	80 91 39 03 	lds	r24, 0x0339
    25a6:	48 2e       	mov	r4, r24
    25a8:	55 24       	eor	r5, r5
    25aa:	44 0c       	add	r4, r4
    25ac:	55 1c       	adc	r5, r5
    25ae:	c2 01       	movw	r24, r4
    25b0:	0e 94 c0 18 	call	0x3180	; 0x3180 <malloc>
    25b4:	7c 01       	movw	r14, r24
    25b6:	90 93 2d 03 	sts	0x032D, r25
    25ba:	80 93 2c 03 	sts	0x032C, r24
    25be:	c2 01       	movw	r24, r4
    25c0:	0e 94 c0 18 	call	0x3180	; 0x3180 <malloc>
    25c4:	5c 01       	movw	r10, r24
    25c6:	90 93 31 03 	sts	0x0331, r25
    25ca:	80 93 30 03 	sts	0x0330, r24
    25ce:	c2 01       	movw	r24, r4
    25d0:	0e 94 c0 18 	call	0x3180	; 0x3180 <malloc>
    25d4:	90 93 35 03 	sts	0x0335, r25
    25d8:	80 93 34 03 	sts	0x0334, r24
    25dc:	49 81       	ldd	r20, Y+1	; 0x01
    25de:	01 15       	cp	r16, r1
    25e0:	11 05       	cpc	r17, r1
    25e2:	09 f4       	brne	.+2      	; 0x25e6 <_ZN15OrangutanServos5startEPKhhS1_h+0xca>
    25e4:	43 c0       	rjmp	.+134    	; 0x266c <_ZN15OrangutanServos5startEPKhhS1_h+0x150>
    25e6:	e1 14       	cp	r14, r1
    25e8:	f1 04       	cpc	r15, r1
    25ea:	09 f4       	brne	.+2      	; 0x25ee <_ZN15OrangutanServos5startEPKhhS1_h+0xd2>
    25ec:	3f c0       	rjmp	.+126    	; 0x266c <_ZN15OrangutanServos5startEPKhhS1_h+0x150>
    25ee:	a1 14       	cp	r10, r1
    25f0:	b1 04       	cpc	r11, r1
    25f2:	e1 f1       	breq	.+120    	; 0x266c <_ZN15OrangutanServos5startEPKhhS1_h+0x150>
    25f4:	00 97       	sbiw	r24, 0x00	; 0
    25f6:	d1 f1       	breq	.+116    	; 0x266c <_ZN15OrangutanServos5startEPKhhS1_h+0x150>
    25f8:	dd 20       	and	r13, r13
    25fa:	29 f4       	brne	.+10     	; 0x2606 <_ZN15OrangutanServos5startEPKhhS1_h+0xea>
    25fc:	09 2d       	mov	r16, r9
    25fe:	17 2d       	mov	r17, r7
    2600:	ee 24       	eor	r14, r14
    2602:	ff 24       	eor	r15, r15
    2604:	46 c0       	rjmp	.+140    	; 0x2692 <_ZN15OrangutanServos5startEPKhhS1_h+0x176>
    2606:	ed 2d       	mov	r30, r13
    2608:	e4 9f       	mul	r30, r20
    260a:	c0 01       	movw	r24, r0
    260c:	11 24       	eor	r1, r1
    260e:	0e 94 c0 18 	call	0x3180	; 0x3180 <malloc>
    2612:	8c 01       	movw	r16, r24
    2614:	90 93 3f 03 	sts	0x033F, r25
    2618:	80 93 3e 03 	sts	0x033E, r24
    261c:	80 91 3a 03 	lds	r24, 0x033A
    2620:	48 2e       	mov	r4, r24
    2622:	55 24       	eor	r5, r5
    2624:	44 0c       	add	r4, r4
    2626:	55 1c       	adc	r5, r5
    2628:	c2 01       	movw	r24, r4
    262a:	0e 94 c0 18 	call	0x3180	; 0x3180 <malloc>
    262e:	7c 01       	movw	r14, r24
    2630:	90 93 2f 03 	sts	0x032F, r25
    2634:	80 93 2e 03 	sts	0x032E, r24
    2638:	c2 01       	movw	r24, r4
    263a:	0e 94 c0 18 	call	0x3180	; 0x3180 <malloc>
    263e:	5c 01       	movw	r10, r24
    2640:	90 93 33 03 	sts	0x0333, r25
    2644:	80 93 32 03 	sts	0x0332, r24
    2648:	c2 01       	movw	r24, r4
    264a:	0e 94 c0 18 	call	0x3180	; 0x3180 <malloc>
    264e:	90 93 37 03 	sts	0x0337, r25
    2652:	80 93 36 03 	sts	0x0336, r24
    2656:	01 15       	cp	r16, r1
    2658:	11 05       	cpc	r17, r1
    265a:	41 f0       	breq	.+16     	; 0x266c <_ZN15OrangutanServos5startEPKhhS1_h+0x150>
    265c:	e1 14       	cp	r14, r1
    265e:	f1 04       	cpc	r15, r1
    2660:	29 f0       	breq	.+10     	; 0x266c <_ZN15OrangutanServos5startEPKhhS1_h+0x150>
    2662:	a1 14       	cp	r10, r1
    2664:	b1 04       	cpc	r11, r1
    2666:	11 f0       	breq	.+4      	; 0x266c <_ZN15OrangutanServos5startEPKhhS1_h+0x150>
    2668:	00 97       	sbiw	r24, 0x00	; 0
    266a:	41 f6       	brne	.-112    	; 0x25fc <_ZN15OrangutanServos5startEPKhhS1_h+0xe0>
    266c:	0e 94 2d 12 	call	0x245a	; 0x245a <_Z15freeServoMemoryv>
    2670:	81 e0       	ldi	r24, 0x01	; 1
    2672:	88 c0       	rjmp	.+272    	; 0x2784 <_ZN15OrangutanServos5startEPKhhS1_h+0x268>
    2674:	f8 01       	movw	r30, r16
    2676:	61 91       	ld	r22, Z+
    2678:	8f 01       	movw	r16, r30
    267a:	80 91 3c 03 	lds	r24, 0x033C
    267e:	90 91 3d 03 	lds	r25, 0x033D
    2682:	8e 0d       	add	r24, r14
    2684:	9f 1d       	adc	r25, r15
    2686:	0e 94 cf 10 	call	0x219e	; 0x219e <_ZN15OrangutanServos11initPortPinEP10PortStructh>
    268a:	83 e0       	ldi	r24, 0x03	; 3
    268c:	90 e0       	ldi	r25, 0x00	; 0
    268e:	e8 0e       	add	r14, r24
    2690:	f9 1e       	adc	r15, r25
    2692:	80 2f       	mov	r24, r16
    2694:	89 19       	sub	r24, r9
    2696:	8c 15       	cp	r24, r12
    2698:	68 f3       	brcs	.-38     	; 0x2674 <_ZN15OrangutanServos5startEPKhhS1_h+0x158>
    269a:	60 91 2c 03 	lds	r22, 0x032C
    269e:	70 91 2d 03 	lds	r23, 0x032D
    26a2:	40 91 30 03 	lds	r20, 0x0330
    26a6:	50 91 31 03 	lds	r21, 0x0331
    26aa:	20 91 34 03 	lds	r18, 0x0334
    26ae:	30 91 35 03 	lds	r19, 0x0335
    26b2:	a0 e0       	ldi	r26, 0x00	; 0
    26b4:	14 c0       	rjmp	.+40     	; 0x26de <_ZN15OrangutanServos5startEPKhhS1_h+0x1c2>
    26b6:	8a 2f       	mov	r24, r26
    26b8:	90 e0       	ldi	r25, 0x00	; 0
    26ba:	88 0f       	add	r24, r24
    26bc:	99 1f       	adc	r25, r25
    26be:	fb 01       	movw	r30, r22
    26c0:	e8 0f       	add	r30, r24
    26c2:	f9 1f       	adc	r31, r25
    26c4:	11 82       	std	Z+1, r1	; 0x01
    26c6:	10 82       	st	Z, r1
    26c8:	fa 01       	movw	r30, r20
    26ca:	e8 0f       	add	r30, r24
    26cc:	f9 1f       	adc	r31, r25
    26ce:	11 82       	std	Z+1, r1	; 0x01
    26d0:	10 82       	st	Z, r1
    26d2:	82 0f       	add	r24, r18
    26d4:	93 1f       	adc	r25, r19
    26d6:	fc 01       	movw	r30, r24
    26d8:	11 82       	std	Z+1, r1	; 0x01
    26da:	10 82       	st	Z, r1
    26dc:	af 5f       	subi	r26, 0xFF	; 255
    26de:	80 91 39 03 	lds	r24, 0x0339
    26e2:	a8 17       	cp	r26, r24
    26e4:	40 f3       	brcs	.-48     	; 0x26b6 <_ZN15OrangutanServos5startEPKhhS1_h+0x19a>
    26e6:	e8 2c       	mov	r14, r8
    26e8:	f6 2c       	mov	r15, r6
    26ea:	aa 24       	eor	r10, r10
    26ec:	bb 24       	eor	r11, r11
    26ee:	00 e0       	ldi	r16, 0x00	; 0
    26f0:	10 e0       	ldi	r17, 0x00	; 0
    26f2:	29 c0       	rjmp	.+82     	; 0x2746 <_ZN15OrangutanServos5startEPKhhS1_h+0x22a>
    26f4:	f7 01       	movw	r30, r14
    26f6:	61 91       	ld	r22, Z+
    26f8:	7f 01       	movw	r14, r30
    26fa:	80 91 3e 03 	lds	r24, 0x033E
    26fe:	90 91 3f 03 	lds	r25, 0x033F
    2702:	80 0f       	add	r24, r16
    2704:	91 1f       	adc	r25, r17
    2706:	0e 94 cf 10 	call	0x219e	; 0x219e <_ZN15OrangutanServos11initPortPinEP10PortStructh>
    270a:	e0 91 2e 03 	lds	r30, 0x032E
    270e:	f0 91 2f 03 	lds	r31, 0x032F
    2712:	ea 0d       	add	r30, r10
    2714:	fb 1d       	adc	r31, r11
    2716:	11 82       	std	Z+1, r1	; 0x01
    2718:	10 82       	st	Z, r1
    271a:	e0 91 32 03 	lds	r30, 0x0332
    271e:	f0 91 33 03 	lds	r31, 0x0333
    2722:	ea 0d       	add	r30, r10
    2724:	fb 1d       	adc	r31, r11
    2726:	11 82       	std	Z+1, r1	; 0x01
    2728:	10 82       	st	Z, r1
    272a:	e0 91 36 03 	lds	r30, 0x0336
    272e:	f0 91 37 03 	lds	r31, 0x0337
    2732:	ea 0d       	add	r30, r10
    2734:	fb 1d       	adc	r31, r11
    2736:	11 82       	std	Z+1, r1	; 0x01
    2738:	10 82       	st	Z, r1
    273a:	0d 5f       	subi	r16, 0xFD	; 253
    273c:	1f 4f       	sbci	r17, 0xFF	; 255
    273e:	82 e0       	ldi	r24, 0x02	; 2
    2740:	90 e0       	ldi	r25, 0x00	; 0
    2742:	a8 0e       	add	r10, r24
    2744:	b9 1e       	adc	r11, r25
    2746:	8e 2d       	mov	r24, r14
    2748:	88 19       	sub	r24, r8
    274a:	8d 15       	cp	r24, r13
    274c:	98 f2       	brcs	.-90     	; 0x26f4 <_ZN15OrangutanServos5startEPKhhS1_h+0x1d8>
    274e:	10 92 3b 03 	sts	0x033B, r1
    2752:	81 e1       	ldi	r24, 0x11	; 17
    2754:	80 93 81 00 	sts	0x0081, r24
    2758:	88 ea       	ldi	r24, 0xA8	; 168
    275a:	91 e6       	ldi	r25, 0x61	; 97
    275c:	90 93 87 00 	sts	0x0087, r25
    2760:	80 93 86 00 	sts	0x0086, r24
    2764:	8f ef       	ldi	r24, 0xFF	; 255
    2766:	86 bb       	out	0x16, r24	; 22
    2768:	80 91 6f 00 	lds	r24, 0x006F
    276c:	80 62       	ori	r24, 0x20	; 32
    276e:	80 93 6f 00 	sts	0x006F, r24
    2772:	dd 20       	and	r13, r13
    2774:	29 f0       	breq	.+10     	; 0x2780 <_ZN15OrangutanServos5startEPKhhS1_h+0x264>
    2776:	80 91 6f 00 	lds	r24, 0x006F
    277a:	84 60       	ori	r24, 0x04	; 4
    277c:	80 93 6f 00 	sts	0x006F, r24
    2780:	78 94       	sei
    2782:	80 e0       	ldi	r24, 0x00	; 0
    2784:	21 96       	adiw	r28, 0x01	; 1
    2786:	e0 e1       	ldi	r30, 0x10	; 16
    2788:	0c 94 a7 18 	jmp	0x314e	; 0x314e <__epilogue_restores__+0x4>

0000278c <servos_start>:
    278c:	40 e0       	ldi	r20, 0x00	; 0
    278e:	50 e0       	ldi	r21, 0x00	; 0
    2790:	20 e0       	ldi	r18, 0x00	; 0
    2792:	0e 94 8e 12 	call	0x251c	; 0x251c <_ZN15OrangutanServos5startEPKhhS1_h>
    2796:	08 95       	ret

00002798 <_ZN15OrangutanServos14setServoTargetEhj>:
    2798:	90 91 39 03 	lds	r25, 0x0339
    279c:	89 17       	cp	r24, r25
    279e:	48 f5       	brcc	.+82     	; 0x27f2 <_ZN15OrangutanServos14setServoTargetEhj+0x5a>
    27a0:	90 91 6f 00 	lds	r25, 0x006F
    27a4:	9f 7d       	andi	r25, 0xDF	; 223
    27a6:	90 93 6f 00 	sts	0x006F, r25
    27aa:	90 e0       	ldi	r25, 0x00	; 0
    27ac:	87 70       	andi	r24, 0x07	; 7
    27ae:	90 70       	andi	r25, 0x00	; 0
    27b0:	88 0f       	add	r24, r24
    27b2:	99 1f       	adc	r25, r25
    27b4:	e0 91 30 03 	lds	r30, 0x0330
    27b8:	f0 91 31 03 	lds	r31, 0x0331
    27bc:	e8 0f       	add	r30, r24
    27be:	f9 1f       	adc	r31, r25
    27c0:	86 2f       	mov	r24, r22
    27c2:	97 2f       	mov	r25, r23
    27c4:	29 e0       	ldi	r18, 0x09	; 9
    27c6:	83 39       	cpi	r24, 0x93	; 147
    27c8:	92 07       	cpc	r25, r18
    27ca:	10 f0       	brcs	.+4      	; 0x27d0 <_ZN15OrangutanServos14setServoTargetEhj+0x38>
    27cc:	82 e9       	ldi	r24, 0x92	; 146
    27ce:	99 e0       	ldi	r25, 0x09	; 9
    27d0:	9c 01       	movw	r18, r24
    27d2:	22 0f       	add	r18, r18
    27d4:	33 1f       	adc	r19, r19
    27d6:	43 e0       	ldi	r20, 0x03	; 3
    27d8:	88 0f       	add	r24, r24
    27da:	99 1f       	adc	r25, r25
    27dc:	4a 95       	dec	r20
    27de:	e1 f7       	brne	.-8      	; 0x27d8 <_ZN15OrangutanServos14setServoTargetEhj+0x40>
    27e0:	28 0f       	add	r18, r24
    27e2:	39 1f       	adc	r19, r25
    27e4:	31 83       	std	Z+1, r19	; 0x01
    27e6:	20 83       	st	Z, r18
    27e8:	80 91 6f 00 	lds	r24, 0x006F
    27ec:	80 62       	ori	r24, 0x20	; 32
    27ee:	80 93 6f 00 	sts	0x006F, r24
    27f2:	08 95       	ret

000027f4 <set_servo_target>:
    27f4:	0e 94 cc 13 	call	0x2798	; 0x2798 <_ZN15OrangutanServos14setServoTargetEhj>
    27f8:	08 95       	ret

000027fa <_ZN15OrangutanServos13setServoSpeedEhj>:
    27fa:	90 91 39 03 	lds	r25, 0x0339
    27fe:	89 17       	cp	r24, r25
    2800:	f8 f4       	brcc	.+62     	; 0x2840 <_ZN15OrangutanServos13setServoSpeedEhj+0x46>
    2802:	90 91 6f 00 	lds	r25, 0x006F
    2806:	9f 7d       	andi	r25, 0xDF	; 223
    2808:	90 93 6f 00 	sts	0x006F, r25
    280c:	90 e0       	ldi	r25, 0x00	; 0
    280e:	87 70       	andi	r24, 0x07	; 7
    2810:	90 70       	andi	r25, 0x00	; 0
    2812:	88 0f       	add	r24, r24
    2814:	99 1f       	adc	r25, r25
    2816:	e0 91 34 03 	lds	r30, 0x0334
    281a:	f0 91 35 03 	lds	r31, 0x0335
    281e:	e8 0f       	add	r30, r24
    2820:	f9 1f       	adc	r31, r25
    2822:	86 2f       	mov	r24, r22
    2824:	97 2f       	mov	r25, r23
    2826:	21 e6       	ldi	r18, 0x61	; 97
    2828:	89 3a       	cpi	r24, 0xA9	; 169
    282a:	92 07       	cpc	r25, r18
    282c:	10 f0       	brcs	.+4      	; 0x2832 <_ZN15OrangutanServos13setServoSpeedEhj+0x38>
    282e:	88 ea       	ldi	r24, 0xA8	; 168
    2830:	91 e6       	ldi	r25, 0x61	; 97
    2832:	91 83       	std	Z+1, r25	; 0x01
    2834:	80 83       	st	Z, r24
    2836:	80 91 6f 00 	lds	r24, 0x006F
    283a:	80 62       	ori	r24, 0x20	; 32
    283c:	80 93 6f 00 	sts	0x006F, r24
    2840:	08 95       	ret

00002842 <set_servo_speed>:
    2842:	0e 94 fd 13 	call	0x27fa	; 0x27fa <_ZN15OrangutanServos13setServoSpeedEhj>
    2846:	08 95       	ret

00002848 <_ZN13OrangutanTime17delayMicrosecondsEj>:
    2848:	6f 93       	push	r22
    284a:	64 e0       	ldi	r22, 0x04	; 4
    284c:	6a 95       	dec	r22
    284e:	f1 f7       	brne	.-4      	; 0x284c <_ZN13OrangutanTime17delayMicrosecondsEj+0x4>
    2850:	6f 91       	pop	r22
    2852:	01 97       	sbiw	r24, 0x01	; 1
    2854:	c9 f7       	brne	.-14     	; 0x2848 <_ZN13OrangutanTime17delayMicrosecondsEj>
    2856:	08 95       	ret

00002858 <__vector_11>:
    2858:	2f 92       	push	r2
    285a:	8f 93       	push	r24
    285c:	9f 93       	push	r25
    285e:	2f b6       	in	r2, 0x3f	; 63
    2860:	80 91 41 03 	lds	r24, 0x0341
    2864:	90 91 42 03 	lds	r25, 0x0342
    2868:	01 96       	adiw	r24, 0x01	; 1
    286a:	80 93 41 03 	sts	0x0341, r24
    286e:	90 93 42 03 	sts	0x0342, r25
    2872:	90 e0       	ldi	r25, 0x00	; 0
    2874:	80 91 43 03 	lds	r24, 0x0343
    2878:	89 1f       	adc	r24, r25
    287a:	80 93 43 03 	sts	0x0343, r24
    287e:	90 91 49 03 	lds	r25, 0x0349
    2882:	9c 5f       	subi	r25, 0xFC	; 252
    2884:	90 93 49 03 	sts	0x0349, r25
    2888:	80 91 48 03 	lds	r24, 0x0348
    288c:	80 51       	subi	r24, 0x10	; 16
    288e:	97 42       	sbci	r25, 0x27	; 39
    2890:	c0 f0       	brcs	.+48     	; 0x28c2 <end>
    2892:	90 93 49 03 	sts	0x0349, r25
    2896:	80 93 48 03 	sts	0x0348, r24
    289a:	80 91 44 03 	lds	r24, 0x0344
    289e:	90 91 45 03 	lds	r25, 0x0345
    28a2:	01 96       	adiw	r24, 0x01	; 1
    28a4:	80 93 44 03 	sts	0x0344, r24
    28a8:	90 93 45 03 	sts	0x0345, r25
    28ac:	90 e0       	ldi	r25, 0x00	; 0
    28ae:	80 91 46 03 	lds	r24, 0x0346
    28b2:	89 1f       	adc	r24, r25
    28b4:	80 93 46 03 	sts	0x0346, r24
    28b8:	80 91 47 03 	lds	r24, 0x0347
    28bc:	89 1f       	adc	r24, r25
    28be:	80 93 47 03 	sts	0x0347, r24

000028c2 <end>:
    28c2:	2f be       	out	0x3f, r2	; 63
    28c4:	9f 91       	pop	r25
    28c6:	8f 91       	pop	r24
    28c8:	2f 90       	pop	r2
    28ca:	18 95       	reti

000028cc <_ZN13OrangutanTime17delayMillisecondsEj>:
    28cc:	cf 93       	push	r28
    28ce:	df 93       	push	r29
    28d0:	ec 01       	movw	r28, r24
    28d2:	05 c0       	rjmp	.+10     	; 0x28de <_ZN13OrangutanTime17delayMillisecondsEj+0x12>
    28d4:	88 ee       	ldi	r24, 0xE8	; 232
    28d6:	93 e0       	ldi	r25, 0x03	; 3
    28d8:	0e 94 24 14 	call	0x2848	; 0x2848 <_ZN13OrangutanTime17delayMicrosecondsEj>
    28dc:	21 97       	sbiw	r28, 0x01	; 1
    28de:	20 97       	sbiw	r28, 0x00	; 0
    28e0:	c9 f7       	brne	.-14     	; 0x28d4 <_ZN13OrangutanTime17delayMillisecondsEj+0x8>
    28e2:	df 91       	pop	r29
    28e4:	cf 91       	pop	r28
    28e6:	08 95       	ret

000028e8 <delay_ms>:
    28e8:	0e 94 66 14 	call	0x28cc	; 0x28cc <_ZN13OrangutanTime17delayMillisecondsEj>
    28ec:	08 95       	ret

000028ee <_ZN12OrangutanSVP11getNextByteEv>:
    28ee:	8f ef       	ldi	r24, 0xFF	; 255
    28f0:	64 e0       	ldi	r22, 0x04	; 4
    28f2:	0e 94 e8 17 	call	0x2fd0	; 0x2fd0 <_ZN18OrangutanSPIMaster16transmitAndDelayEhh>
    28f6:	08 95       	ret

000028f8 <_ZN12OrangutanSVP15serialReadStartEv>:
    28f8:	83 e8       	ldi	r24, 0x83	; 131
    28fa:	67 e0       	ldi	r22, 0x07	; 7
    28fc:	0e 94 e8 17 	call	0x2fd0	; 0x2fd0 <_ZN18OrangutanSPIMaster16transmitAndDelayEhh>
    2900:	0e 94 77 14 	call	0x28ee	; 0x28ee <_ZN12OrangutanSVP11getNextByteEv>
    2904:	08 95       	ret

00002906 <_ZN12OrangutanSVP17serialSendIfReadyEc>:
    2906:	1f 93       	push	r17
    2908:	18 2f       	mov	r17, r24
    290a:	98 2f       	mov	r25, r24
    290c:	90 95       	com	r25
    290e:	99 1f       	adc	r25, r25
    2910:	99 27       	eor	r25, r25
    2912:	99 1f       	adc	r25, r25
    2914:	85 e8       	ldi	r24, 0x85	; 133
    2916:	89 1b       	sub	r24, r25
    2918:	65 e0       	ldi	r22, 0x05	; 5
    291a:	0e 94 e8 17 	call	0x2fd0	; 0x2fd0 <_ZN18OrangutanSPIMaster16transmitAndDelayEhh>
    291e:	81 2f       	mov	r24, r17
    2920:	8f 77       	andi	r24, 0x7F	; 127
    2922:	65 e0       	ldi	r22, 0x05	; 5
    2924:	0e 94 e8 17 	call	0x2fd0	; 0x2fd0 <_ZN18OrangutanSPIMaster16transmitAndDelayEhh>
    2928:	1f 91       	pop	r17
    292a:	08 95       	ret

0000292c <_ZL16currentCharacterv>:
    292c:	90 91 50 03 	lds	r25, 0x0350
    2930:	e0 91 4c 03 	lds	r30, 0x034C
    2934:	f0 91 4d 03 	lds	r31, 0x034D
    2938:	99 23       	and	r25, r25
    293a:	11 f0       	breq	.+4      	; 0x2940 <_ZL16currentCharacterv+0x14>
    293c:	84 91       	lpm	r24, Z
    293e:	01 c0       	rjmp	.+2      	; 0x2942 <_ZL16currentCharacterv+0x16>
    2940:	80 81       	ld	r24, Z
    2942:	28 2f       	mov	r18, r24
    2944:	21 54       	subi	r18, 0x41	; 65
    2946:	2a 31       	cpi	r18, 0x1A	; 26
    2948:	10 f4       	brcc	.+4      	; 0x294e <_ZL16currentCharacterv+0x22>
    294a:	80 5e       	subi	r24, 0xE0	; 224
    294c:	08 95       	ret
    294e:	80 32       	cpi	r24, 0x20	; 32
    2950:	71 f4       	brne	.+28     	; 0x296e <_ZL16currentCharacterv+0x42>
    2952:	20 91 4c 03 	lds	r18, 0x034C
    2956:	30 91 4d 03 	lds	r19, 0x034D
    295a:	a9 01       	movw	r20, r18
    295c:	4f 5f       	subi	r20, 0xFF	; 255
    295e:	5f 4f       	sbci	r21, 0xFF	; 255
    2960:	50 93 4d 03 	sts	0x034D, r21
    2964:	40 93 4c 03 	sts	0x034C, r20
    2968:	21 15       	cp	r18, r1
    296a:	31 05       	cpc	r19, r1
    296c:	09 f7       	brne	.-62     	; 0x2930 <_ZL16currentCharacterv+0x4>
    296e:	08 95       	ret

00002970 <_ZL9getNumberv>:
    2970:	ef 92       	push	r14
    2972:	ff 92       	push	r15
    2974:	cf 93       	push	r28
    2976:	df 93       	push	r29
    2978:	0e 94 96 14 	call	0x292c	; 0x292c <_ZL16currentCharacterv>
    297c:	c0 e0       	ldi	r28, 0x00	; 0
    297e:	d0 e0       	ldi	r29, 0x00	; 0
    2980:	1b c0       	rjmp	.+54     	; 0x29b8 <_ZL9getNumberv+0x48>
    2982:	9e 01       	movw	r18, r28
    2984:	22 0f       	add	r18, r18
    2986:	33 1f       	adc	r19, r19
    2988:	93 e0       	ldi	r25, 0x03	; 3
    298a:	cc 0f       	add	r28, r28
    298c:	dd 1f       	adc	r29, r29
    298e:	9a 95       	dec	r25
    2990:	e1 f7       	brne	.-8      	; 0x298a <_ZL9getNumberv+0x1a>
    2992:	c2 0f       	add	r28, r18
    2994:	d3 1f       	adc	r29, r19
    2996:	99 27       	eor	r25, r25
    2998:	87 fd       	sbrc	r24, 7
    299a:	90 95       	com	r25
    299c:	c8 0f       	add	r28, r24
    299e:	d9 1f       	adc	r29, r25
    29a0:	e0 97       	sbiw	r28, 0x30	; 48
    29a2:	80 91 4c 03 	lds	r24, 0x034C
    29a6:	90 91 4d 03 	lds	r25, 0x034D
    29aa:	01 96       	adiw	r24, 0x01	; 1
    29ac:	90 93 4d 03 	sts	0x034D, r25
    29b0:	80 93 4c 03 	sts	0x034C, r24
    29b4:	0e 94 96 14 	call	0x292c	; 0x292c <_ZL16currentCharacterv>
    29b8:	98 2f       	mov	r25, r24
    29ba:	90 53       	subi	r25, 0x30	; 48
    29bc:	9a 30       	cpi	r25, 0x0A	; 10
    29be:	08 f3       	brcs	.-62     	; 0x2982 <_ZL9getNumberv+0x12>
    29c0:	ce 01       	movw	r24, r28
    29c2:	df 91       	pop	r29
    29c4:	cf 91       	pop	r28
    29c6:	ff 90       	pop	r15
    29c8:	ef 90       	pop	r14
    29ca:	08 95       	ret

000029cc <_ZN15OrangutanBuzzer5init2Ev>:
    29cc:	10 92 6f 00 	sts	0x006F, r1
    29d0:	83 e2       	ldi	r24, 0x23	; 35
    29d2:	80 93 80 00 	sts	0x0080, r24
    29d6:	81 e1       	ldi	r24, 0x11	; 17
    29d8:	80 93 81 00 	sts	0x0081, r24
    29dc:	10 92 82 00 	sts	0x0082, r1
    29e0:	80 e1       	ldi	r24, 0x10	; 16
    29e2:	97 e2       	ldi	r25, 0x27	; 39
    29e4:	90 93 89 00 	sts	0x0089, r25
    29e8:	80 93 88 00 	sts	0x0088, r24
    29ec:	10 92 8b 00 	sts	0x008B, r1
    29f0:	10 92 8a 00 	sts	0x008A, r1
    29f4:	54 9a       	sbi	0x0a, 4	; 10
    29f6:	78 94       	sei
    29f8:	08 95       	ret

000029fa <_ZN15OrangutanBuzzer4initEv>:
    29fa:	80 91 4b 03 	lds	r24, 0x034B
    29fe:	88 23       	and	r24, r24
    2a00:	29 f4       	brne	.+10     	; 0x2a0c <_ZN15OrangutanBuzzer4initEv+0x12>
    2a02:	81 e0       	ldi	r24, 0x01	; 1
    2a04:	80 93 4b 03 	sts	0x034B, r24
    2a08:	0e 94 e6 14 	call	0x29cc	; 0x29cc <_ZN15OrangutanBuzzer5init2Ev>
    2a0c:	08 95       	ret

00002a0e <_ZN15OrangutanBuzzer13playFrequencyEjjh>:
    2a0e:	a0 e0       	ldi	r26, 0x00	; 0
    2a10:	b0 e0       	ldi	r27, 0x00	; 0
    2a12:	ed e0       	ldi	r30, 0x0D	; 13
    2a14:	f5 e1       	ldi	r31, 0x15	; 21
    2a16:	0c 94 8f 18 	jmp	0x311e	; 0x311e <__prologue_saves__+0xc>
    2a1a:	8c 01       	movw	r16, r24
    2a1c:	5b 01       	movw	r10, r22
    2a1e:	e4 2e       	mov	r14, r20
    2a20:	0e 94 fd 14 	call	0x29fa	; 0x29fa <_ZN15OrangutanBuzzer4initEv>
    2a24:	10 92 da 02 	sts	0x02DA, r1
    2a28:	17 ff       	sbrs	r17, 7
    2a2a:	04 c0       	rjmp	.+8      	; 0x2a34 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x26>
    2a2c:	1f 77       	andi	r17, 0x7F	; 127
    2a2e:	aa e0       	ldi	r26, 0x0A	; 10
    2a30:	fa 2e       	mov	r15, r26
    2a32:	02 c0       	rjmp	.+4      	; 0x2a38 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x2a>
    2a34:	ff 24       	eor	r15, r15
    2a36:	f3 94       	inc	r15
    2a38:	c0 90 81 00 	lds	r12, 0x0081
    2a3c:	dd 24       	eor	r13, r13
    2a3e:	28 ef       	ldi	r18, 0xF8	; 248
    2a40:	c2 22       	and	r12, r18
    2a42:	dd 24       	eor	r13, r13
    2a44:	88 ec       	ldi	r24, 0xC8	; 200
    2a46:	3f 2d       	mov	r19, r15
    2a48:	38 9f       	mul	r19, r24
    2a4a:	c0 01       	movw	r24, r0
    2a4c:	11 24       	eor	r1, r1
    2a4e:	80 17       	cp	r24, r16
    2a50:	91 07       	cpc	r25, r17
    2a52:	d8 f4       	brcc	.+54     	; 0x2a8a <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x7c>
    2a54:	e8 01       	movw	r28, r16
    2a56:	67 e2       	ldi	r22, 0x27	; 39
    2a58:	01 31       	cpi	r16, 0x11	; 17
    2a5a:	16 07       	cpc	r17, r22
    2a5c:	10 f0       	brcs	.+4      	; 0x2a62 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x54>
    2a5e:	c0 e1       	ldi	r28, 0x10	; 16
    2a60:	d7 e2       	ldi	r29, 0x27	; 39
    2a62:	be 01       	movw	r22, r28
    2a64:	76 95       	lsr	r23
    2a66:	67 95       	ror	r22
    2a68:	80 e0       	ldi	r24, 0x00	; 0
    2a6a:	90 e0       	ldi	r25, 0x00	; 0
    2a6c:	60 58       	subi	r22, 0x80	; 128
    2a6e:	79 46       	sbci	r23, 0x69	; 105
    2a70:	87 46       	sbci	r24, 0x67	; 103
    2a72:	9f 4f       	sbci	r25, 0xFF	; 255
    2a74:	9e 01       	movw	r18, r28
    2a76:	40 e0       	ldi	r20, 0x00	; 0
    2a78:	50 e0       	ldi	r21, 0x00	; 0
    2a7a:	0e 94 4c 18 	call	0x3098	; 0x3098 <__udivmodsi4>
    2a7e:	89 01       	movw	r16, r18
    2a80:	81 e0       	ldi	r24, 0x01	; 1
    2a82:	90 e0       	ldi	r25, 0x00	; 0
    2a84:	c8 2a       	or	r12, r24
    2a86:	d9 2a       	or	r13, r25
    2a88:	2c c0       	rjmp	.+88     	; 0x2ae2 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xd4>
    2a8a:	98 e2       	ldi	r25, 0x28	; 40
    2a8c:	f9 9e       	mul	r15, r25
    2a8e:	90 2d       	mov	r25, r0
    2a90:	11 24       	eor	r1, r1
    2a92:	80 e0       	ldi	r24, 0x00	; 0
    2a94:	89 2e       	mov	r8, r25
    2a96:	e4 01       	movw	r28, r8
    2a98:	4e 01       	movw	r8, r28
    2a9a:	98 2e       	mov	r9, r24
    2a9c:	e4 01       	movw	r28, r8
    2a9e:	80 16       	cp	r8, r16
    2aa0:	91 06       	cpc	r9, r17
    2aa2:	08 f4       	brcc	.+2      	; 0x2aa6 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x98>
    2aa4:	e8 01       	movw	r28, r16
    2aa6:	be 01       	movw	r22, r28
    2aa8:	76 95       	lsr	r23
    2aaa:	67 95       	ror	r22
    2aac:	9e 01       	movw	r18, r28
    2aae:	40 e0       	ldi	r20, 0x00	; 0
    2ab0:	50 e0       	ldi	r21, 0x00	; 0
    2ab2:	8f 2d       	mov	r24, r15
    2ab4:	8a 30       	cpi	r24, 0x0A	; 10
    2ab6:	39 f4       	brne	.+14     	; 0x2ac6 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xb8>
    2ab8:	80 e0       	ldi	r24, 0x00	; 0
    2aba:	90 e0       	ldi	r25, 0x00	; 0
    2abc:	60 5e       	subi	r22, 0xE0	; 224
    2abe:	73 44       	sbci	r23, 0x43	; 67
    2ac0:	81 44       	sbci	r24, 0x41	; 65
    2ac2:	9f 4f       	sbci	r25, 0xFF	; 255
    2ac4:	06 c0       	rjmp	.+12     	; 0x2ad2 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xc4>
    2ac6:	80 e0       	ldi	r24, 0x00	; 0
    2ac8:	90 e0       	ldi	r25, 0x00	; 0
    2aca:	60 53       	subi	r22, 0x30	; 48
    2acc:	7d 4e       	sbci	r23, 0xED	; 237
    2ace:	8c 4e       	sbci	r24, 0xEC	; 236
    2ad0:	9f 4f       	sbci	r25, 0xFF	; 255
    2ad2:	0e 94 4c 18 	call	0x3098	; 0x3098 <__udivmodsi4>
    2ad6:	89 01       	movw	r16, r18
    2ad8:	52 e0       	ldi	r21, 0x02	; 2
    2ada:	85 2e       	mov	r8, r21
    2adc:	91 2c       	mov	r9, r1
    2ade:	c8 28       	or	r12, r8
    2ae0:	d9 28       	or	r13, r9
    2ae2:	2f 2d       	mov	r18, r15
    2ae4:	2a 30       	cpi	r18, 0x0A	; 10
    2ae6:	39 f4       	brne	.+14     	; 0x2af6 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xe8>
    2ae8:	ce 01       	movw	r24, r28
    2aea:	05 96       	adiw	r24, 0x05	; 5
    2aec:	6a e0       	ldi	r22, 0x0A	; 10
    2aee:	70 e0       	ldi	r23, 0x00	; 0
    2af0:	0e 94 38 18 	call	0x3070	; 0x3070 <__udivmodhi4>
    2af4:	eb 01       	movw	r28, r22
    2af6:	33 e0       	ldi	r19, 0x03	; 3
    2af8:	c8 3e       	cpi	r28, 0xE8	; 232
    2afa:	d3 07       	cpc	r29, r19
    2afc:	79 f0       	breq	.+30     	; 0x2b1c <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x10e>
    2afe:	be 01       	movw	r22, r28
    2b00:	80 e0       	ldi	r24, 0x00	; 0
    2b02:	90 e0       	ldi	r25, 0x00	; 0
    2b04:	95 01       	movw	r18, r10
    2b06:	40 e0       	ldi	r20, 0x00	; 0
    2b08:	50 e0       	ldi	r21, 0x00	; 0
    2b0a:	0e 94 0d 18 	call	0x301a	; 0x301a <__mulsi3>
    2b0e:	28 ee       	ldi	r18, 0xE8	; 232
    2b10:	33 e0       	ldi	r19, 0x03	; 3
    2b12:	40 e0       	ldi	r20, 0x00	; 0
    2b14:	50 e0       	ldi	r21, 0x00	; 0
    2b16:	0e 94 6e 18 	call	0x30dc	; 0x30dc <__divmodsi4>
    2b1a:	01 c0       	rjmp	.+2      	; 0x2b1e <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x110>
    2b1c:	95 01       	movw	r18, r10
    2b1e:	10 92 6f 00 	sts	0x006F, r1
    2b22:	c0 92 81 00 	sts	0x0081, r12
    2b26:	10 93 89 00 	sts	0x0089, r17
    2b2a:	00 93 88 00 	sts	0x0088, r16
    2b2e:	40 91 88 00 	lds	r20, 0x0088
    2b32:	50 91 89 00 	lds	r21, 0x0089
    2b36:	6e 2d       	mov	r22, r14
    2b38:	60 31       	cpi	r22, 0x10	; 16
    2b3a:	08 f0       	brcs	.+2      	; 0x2b3e <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x130>
    2b3c:	6f e0       	ldi	r22, 0x0F	; 15
    2b3e:	80 e1       	ldi	r24, 0x10	; 16
    2b40:	90 e0       	ldi	r25, 0x00	; 0
    2b42:	86 1b       	sub	r24, r22
    2b44:	91 09       	sbc	r25, r1
    2b46:	ba 01       	movw	r22, r20
    2b48:	02 c0       	rjmp	.+4      	; 0x2b4e <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x140>
    2b4a:	76 95       	lsr	r23
    2b4c:	67 95       	ror	r22
    2b4e:	8a 95       	dec	r24
    2b50:	e2 f7       	brpl	.-8      	; 0x2b4a <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x13c>
    2b52:	70 93 8b 00 	sts	0x008B, r23
    2b56:	60 93 8a 00 	sts	0x008A, r22
    2b5a:	30 93 53 03 	sts	0x0353, r19
    2b5e:	20 93 52 03 	sts	0x0352, r18
    2b62:	86 b3       	in	r24, 0x16	; 22
    2b64:	8f ef       	ldi	r24, 0xFF	; 255
    2b66:	86 bb       	out	0x16, r24	; 22
    2b68:	81 e0       	ldi	r24, 0x01	; 1
    2b6a:	80 93 6f 00 	sts	0x006F, r24
    2b6e:	cd b7       	in	r28, 0x3d	; 61
    2b70:	de b7       	in	r29, 0x3e	; 62
    2b72:	ec e0       	ldi	r30, 0x0C	; 12
    2b74:	0c 94 ab 18 	jmp	0x3156	; 0x3156 <__epilogue_restores__+0xc>

00002b78 <_ZN15OrangutanBuzzer8playNoteEhjh>:
    2b78:	9b 01       	movw	r18, r22
    2b7a:	8f 3f       	cpi	r24, 0xFF	; 255
    2b7c:	11 f0       	breq	.+4      	; 0x2b82 <_ZN15OrangutanBuzzer8playNoteEhjh+0xa>
    2b7e:	44 23       	and	r20, r20
    2b80:	29 f4       	brne	.+10     	; 0x2b8c <_ZN15OrangutanBuzzer8playNoteEhjh+0x14>
    2b82:	88 ee       	ldi	r24, 0xE8	; 232
    2b84:	93 e0       	ldi	r25, 0x03	; 3
    2b86:	b9 01       	movw	r22, r18
    2b88:	40 e0       	ldi	r20, 0x00	; 0
    2b8a:	49 c0       	rjmp	.+146    	; 0x2c1e <_ZN15OrangutanBuzzer8playNoteEhjh+0xa6>
    2b8c:	81 31       	cpi	r24, 0x11	; 17
    2b8e:	30 f0       	brcs	.+12     	; 0x2b9c <_ZN15OrangutanBuzzer8playNoteEhjh+0x24>
    2b90:	58 2f       	mov	r21, r24
    2b92:	50 51       	subi	r21, 0x10	; 16
    2b94:	50 36       	cpi	r21, 0x60	; 96
    2b96:	18 f0       	brcs	.+6      	; 0x2b9e <_ZN15OrangutanBuzzer8playNoteEhjh+0x26>
    2b98:	5f e5       	ldi	r21, 0x5F	; 95
    2b9a:	01 c0       	rjmp	.+2      	; 0x2b9e <_ZN15OrangutanBuzzer8playNoteEhjh+0x26>
    2b9c:	50 e0       	ldi	r21, 0x00	; 0
    2b9e:	85 2f       	mov	r24, r21
    2ba0:	6c e0       	ldi	r22, 0x0C	; 12
    2ba2:	0e 94 2c 18 	call	0x3058	; 0x3058 <__udivmodqi4>
    2ba6:	a8 2f       	mov	r26, r24
    2ba8:	b0 e0       	ldi	r27, 0x00	; 0
    2baa:	e4 ef       	ldi	r30, 0xF4	; 244
    2bac:	ff ef       	ldi	r31, 0xFF	; 255
    2bae:	ae 9f       	mul	r26, r30
    2bb0:	b0 01       	movw	r22, r0
    2bb2:	af 9f       	mul	r26, r31
    2bb4:	70 0d       	add	r23, r0
    2bb6:	be 9f       	mul	r27, r30
    2bb8:	70 0d       	add	r23, r0
    2bba:	11 24       	eor	r1, r1
    2bbc:	65 0f       	add	r22, r21
    2bbe:	71 1d       	adc	r23, r1
    2bc0:	6c 30       	cpi	r22, 0x0C	; 12
    2bc2:	71 05       	cpc	r23, r1
    2bc4:	40 f4       	brcc	.+16     	; 0x2bd6 <_ZN15OrangutanBuzzer8playNoteEhjh+0x5e>
    2bc6:	fb 01       	movw	r30, r22
    2bc8:	ee 0f       	add	r30, r30
    2bca:	ff 1f       	adc	r31, r31
    2bcc:	ec 51       	subi	r30, 0x1C	; 28
    2bce:	fd 4f       	sbci	r31, 0xFD	; 253
    2bd0:	60 81       	ld	r22, Z
    2bd2:	71 81       	ldd	r23, Z+1	; 0x01
    2bd4:	02 c0       	rjmp	.+4      	; 0x2bda <_ZN15OrangutanBuzzer8playNoteEhjh+0x62>
    2bd6:	60 e0       	ldi	r22, 0x00	; 0
    2bd8:	70 e0       	ldi	r23, 0x00	; 0
    2bda:	87 30       	cpi	r24, 0x07	; 7
    2bdc:	81 f0       	breq	.+32     	; 0x2bfe <_ZN15OrangutanBuzzer8playNoteEhjh+0x86>
    2bde:	08 2e       	mov	r0, r24
    2be0:	02 c0       	rjmp	.+4      	; 0x2be6 <_ZN15OrangutanBuzzer8playNoteEhjh+0x6e>
    2be2:	66 0f       	add	r22, r22
    2be4:	77 1f       	adc	r23, r23
    2be6:	0a 94       	dec	r0
    2be8:	e2 f7       	brpl	.-8      	; 0x2be2 <_ZN15OrangutanBuzzer8playNoteEhjh+0x6a>
    2bea:	82 30       	cpi	r24, 0x02	; 2
    2bec:	28 f0       	brcs	.+10     	; 0x2bf8 <_ZN15OrangutanBuzzer8playNoteEhjh+0x80>
    2bee:	cb 01       	movw	r24, r22
    2bf0:	05 96       	adiw	r24, 0x05	; 5
    2bf2:	6a e0       	ldi	r22, 0x0A	; 10
    2bf4:	70 e0       	ldi	r23, 0x00	; 0
    2bf6:	0c c0       	rjmp	.+24     	; 0x2c10 <_ZN15OrangutanBuzzer8playNoteEhjh+0x98>
    2bf8:	60 50       	subi	r22, 0x00	; 0
    2bfa:	70 48       	sbci	r23, 0x80	; 128
    2bfc:	0b c0       	rjmp	.+22     	; 0x2c14 <_ZN15OrangutanBuzzer8playNoteEhjh+0x9c>
    2bfe:	cb 01       	movw	r24, r22
    2c00:	b6 e0       	ldi	r27, 0x06	; 6
    2c02:	88 0f       	add	r24, r24
    2c04:	99 1f       	adc	r25, r25
    2c06:	ba 95       	dec	r27
    2c08:	e1 f7       	brne	.-8      	; 0x2c02 <_ZN15OrangutanBuzzer8playNoteEhjh+0x8a>
    2c0a:	02 96       	adiw	r24, 0x02	; 2
    2c0c:	65 e0       	ldi	r22, 0x05	; 5
    2c0e:	70 e0       	ldi	r23, 0x00	; 0
    2c10:	0e 94 38 18 	call	0x3070	; 0x3070 <__udivmodhi4>
    2c14:	40 31       	cpi	r20, 0x10	; 16
    2c16:	08 f0       	brcs	.+2      	; 0x2c1a <_ZN15OrangutanBuzzer8playNoteEhjh+0xa2>
    2c18:	4f e0       	ldi	r20, 0x0F	; 15
    2c1a:	cb 01       	movw	r24, r22
    2c1c:	b9 01       	movw	r22, r18
    2c1e:	0e 94 07 15 	call	0x2a0e	; 0x2a0e <_ZN15OrangutanBuzzer13playFrequencyEjjh>
    2c22:	08 95       	ret

00002c24 <_ZL8nextNotev>:
    2c24:	a0 e0       	ldi	r26, 0x00	; 0
    2c26:	b0 e0       	ldi	r27, 0x00	; 0
    2c28:	e8 e1       	ldi	r30, 0x18	; 24
    2c2a:	f6 e1       	ldi	r31, 0x16	; 22
    2c2c:	0c 94 8e 18 	jmp	0x311c	; 0x311c <__prologue_saves__+0xa>
    2c30:	b0 90 db 02 	lds	r11, 0x02DB
    2c34:	80 91 4e 03 	lds	r24, 0x034E
    2c38:	88 23       	and	r24, r24
    2c3a:	61 f0       	breq	.+24     	; 0x2c54 <_ZL8nextNotev+0x30>
    2c3c:	60 91 4f 03 	lds	r22, 0x034F
    2c40:	66 23       	and	r22, r22
    2c42:	41 f0       	breq	.+16     	; 0x2c54 <_ZL8nextNotev+0x30>
    2c44:	8f ef       	ldi	r24, 0xFF	; 255
    2c46:	70 e0       	ldi	r23, 0x00	; 0
    2c48:	40 e0       	ldi	r20, 0x00	; 0
    2c4a:	0e 94 bc 15 	call	0x2b78	; 0x2b78 <_ZN15OrangutanBuzzer8playNoteEhjh>
    2c4e:	10 92 4f 03 	sts	0x034F, r1
    2c52:	34 c1       	rjmp	.+616    	; 0x2ebc <_ZL8nextNotev+0x298>
    2c54:	c0 ec       	ldi	r28, 0xC0	; 192
    2c56:	dd e5       	ldi	r29, 0x5D	; 93
    2c58:	aa 24       	eor	r10, r10
    2c5a:	a3 94       	inc	r10
    2c5c:	14 e0       	ldi	r17, 0x04	; 4
    2c5e:	71 2e       	mov	r7, r17
    2c60:	00 ed       	ldi	r16, 0xD0	; 208
    2c62:	17 e0       	ldi	r17, 0x07	; 7
    2c64:	b4 e0       	ldi	r27, 0x04	; 4
    2c66:	eb 2e       	mov	r14, r27
    2c68:	f1 2c       	mov	r15, r1
    2c6a:	a4 ef       	ldi	r26, 0xF4	; 244
    2c6c:	ca 2e       	mov	r12, r26
    2c6e:	a1 e0       	ldi	r26, 0x01	; 1
    2c70:	da 2e       	mov	r13, r26
    2c72:	ff e0       	ldi	r31, 0x0F	; 15
    2c74:	8f 2e       	mov	r8, r31
    2c76:	91 2c       	mov	r9, r1
    2c78:	0e 94 96 14 	call	0x292c	; 0x292c <_ZL16currentCharacterv>
    2c7c:	20 91 4c 03 	lds	r18, 0x034C
    2c80:	30 91 4d 03 	lds	r19, 0x034D
    2c84:	2f 5f       	subi	r18, 0xFF	; 255
    2c86:	3f 4f       	sbci	r19, 0xFF	; 255
    2c88:	30 93 4d 03 	sts	0x034D, r19
    2c8c:	20 93 4c 03 	sts	0x034C, r18
    2c90:	86 36       	cpi	r24, 0x66	; 102
    2c92:	f1 f1       	breq	.+124    	; 0x2d10 <_ZL8nextNotev+0xec>
    2c94:	87 36       	cpi	r24, 0x67	; 103
    2c96:	cc f4       	brge	.+50     	; 0x2cca <_ZL8nextNotev+0xa6>
    2c98:	82 36       	cpi	r24, 0x62	; 98
    2c9a:	09 f4       	brne	.+2      	; 0x2c9e <_ZL8nextNotev+0x7a>
    2c9c:	af c0       	rjmp	.+350    	; 0x2dfc <_ZL8nextNotev+0x1d8>
    2c9e:	83 36       	cpi	r24, 0x63	; 99
    2ca0:	7c f4       	brge	.+30     	; 0x2cc0 <_ZL8nextNotev+0x9c>
    2ca2:	8e 33       	cpi	r24, 0x3E	; 62
    2ca4:	49 f1       	breq	.+82     	; 0x2cf8 <_ZL8nextNotev+0xd4>
    2ca6:	8f 33       	cpi	r24, 0x3F	; 63
    2ca8:	3c f4       	brge	.+14     	; 0x2cb8 <_ZL8nextNotev+0x94>
    2caa:	81 32       	cpi	r24, 0x21	; 33
    2cac:	09 f4       	brne	.+2      	; 0x2cb0 <_ZL8nextNotev+0x8c>
    2cae:	87 c0       	rjmp	.+270    	; 0x2dbe <_ZL8nextNotev+0x19a>
    2cb0:	8c 33       	cpi	r24, 0x3C	; 60
    2cb2:	09 f0       	breq	.+2      	; 0x2cb6 <_ZL8nextNotev+0x92>
    2cb4:	9b c0       	rjmp	.+310    	; 0x2dec <_ZL8nextNotev+0x1c8>
    2cb6:	22 c0       	rjmp	.+68     	; 0x2cfc <_ZL8nextNotev+0xd8>
    2cb8:	81 36       	cpi	r24, 0x61	; 97
    2cba:	09 f0       	breq	.+2      	; 0x2cbe <_ZL8nextNotev+0x9a>
    2cbc:	97 c0       	rjmp	.+302    	; 0x2dec <_ZL8nextNotev+0x1c8>
    2cbe:	9b c0       	rjmp	.+310    	; 0x2df6 <_ZL8nextNotev+0x1d2>
    2cc0:	84 36       	cpi	r24, 0x64	; 100
    2cc2:	01 f1       	breq	.+64     	; 0x2d04 <_ZL8nextNotev+0xe0>
    2cc4:	85 36       	cpi	r24, 0x65	; 101
    2cc6:	0c f5       	brge	.+66     	; 0x2d0a <_ZL8nextNotev+0xe6>
    2cc8:	1b c0       	rjmp	.+54     	; 0x2d00 <_ZL8nextNotev+0xdc>
    2cca:	8f 36       	cpi	r24, 0x6F	; 111
    2ccc:	09 f4       	brne	.+2      	; 0x2cd0 <_ZL8nextNotev+0xac>
    2cce:	47 c0       	rjmp	.+142    	; 0x2d5e <_ZL8nextNotev+0x13a>
    2cd0:	80 37       	cpi	r24, 0x70	; 112
    2cd2:	44 f4       	brge	.+16     	; 0x2ce4 <_ZL8nextNotev+0xc0>
    2cd4:	8c 36       	cpi	r24, 0x6C	; 108
    2cd6:	11 f1       	breq	.+68     	; 0x2d1c <_ZL8nextNotev+0xf8>
    2cd8:	8d 36       	cpi	r24, 0x6D	; 109
    2cda:	61 f1       	breq	.+88     	; 0x2d34 <_ZL8nextNotev+0x110>
    2cdc:	87 36       	cpi	r24, 0x67	; 103
    2cde:	09 f0       	breq	.+2      	; 0x2ce2 <_ZL8nextNotev+0xbe>
    2ce0:	85 c0       	rjmp	.+266    	; 0x2dec <_ZL8nextNotev+0x1c8>
    2ce2:	19 c0       	rjmp	.+50     	; 0x2d16 <_ZL8nextNotev+0xf2>
    2ce4:	84 37       	cpi	r24, 0x74	; 116
    2ce6:	09 f4       	brne	.+2      	; 0x2cea <_ZL8nextNotev+0xc6>
    2ce8:	44 c0       	rjmp	.+136    	; 0x2d72 <_ZL8nextNotev+0x14e>
    2cea:	86 37       	cpi	r24, 0x76	; 118
    2cec:	09 f4       	brne	.+2      	; 0x2cf0 <_ZL8nextNotev+0xcc>
    2cee:	60 c0       	rjmp	.+192    	; 0x2db0 <_ZL8nextNotev+0x18c>
    2cf0:	82 37       	cpi	r24, 0x72	; 114
    2cf2:	09 f0       	breq	.+2      	; 0x2cf6 <_ZL8nextNotev+0xd2>
    2cf4:	7b c0       	rjmp	.+246    	; 0x2dec <_ZL8nextNotev+0x1c8>
    2cf6:	39 c0       	rjmp	.+114    	; 0x2d6a <_ZL8nextNotev+0x146>
    2cf8:	b3 94       	inc	r11
    2cfa:	be cf       	rjmp	.-132    	; 0x2c78 <_ZL8nextNotev+0x54>
    2cfc:	ba 94       	dec	r11
    2cfe:	bc cf       	rjmp	.-136    	; 0x2c78 <_ZL8nextNotev+0x54>
    2d00:	ee 24       	eor	r14, r14
    2d02:	35 c0       	rjmp	.+106    	; 0x2d6e <_ZL8nextNotev+0x14a>
    2d04:	ee 24       	eor	r14, r14
    2d06:	82 e0       	ldi	r24, 0x02	; 2
    2d08:	7b c0       	rjmp	.+246    	; 0x2e00 <_ZL8nextNotev+0x1dc>
    2d0a:	ee 24       	eor	r14, r14
    2d0c:	84 e0       	ldi	r24, 0x04	; 4
    2d0e:	78 c0       	rjmp	.+240    	; 0x2e00 <_ZL8nextNotev+0x1dc>
    2d10:	ee 24       	eor	r14, r14
    2d12:	85 e0       	ldi	r24, 0x05	; 5
    2d14:	75 c0       	rjmp	.+234    	; 0x2e00 <_ZL8nextNotev+0x1dc>
    2d16:	ee 24       	eor	r14, r14
    2d18:	87 e0       	ldi	r24, 0x07	; 7
    2d1a:	72 c0       	rjmp	.+228    	; 0x2e00 <_ZL8nextNotev+0x1dc>
    2d1c:	0e 94 b8 14 	call	0x2970	; 0x2970 <_ZL9getNumberv>
    2d20:	bc 01       	movw	r22, r24
    2d22:	90 93 dd 02 	sts	0x02DD, r25
    2d26:	80 93 dc 02 	sts	0x02DC, r24
    2d2a:	80 91 de 02 	lds	r24, 0x02DE
    2d2e:	90 91 df 02 	lds	r25, 0x02DF
    2d32:	37 c0       	rjmp	.+110    	; 0x2da2 <_ZL8nextNotev+0x17e>
    2d34:	0e 94 96 14 	call	0x292c	; 0x292c <_ZL16currentCharacterv>
    2d38:	8c 36       	cpi	r24, 0x6C	; 108
    2d3a:	19 f4       	brne	.+6      	; 0x2d42 <_ZL8nextNotev+0x11e>
    2d3c:	10 92 4e 03 	sts	0x034E, r1
    2d40:	04 c0       	rjmp	.+8      	; 0x2d4a <_ZL8nextNotev+0x126>
    2d42:	a0 92 4e 03 	sts	0x034E, r10
    2d46:	10 92 4f 03 	sts	0x034F, r1
    2d4a:	80 91 4c 03 	lds	r24, 0x034C
    2d4e:	90 91 4d 03 	lds	r25, 0x034D
    2d52:	01 96       	adiw	r24, 0x01	; 1
    2d54:	90 93 4d 03 	sts	0x034D, r25
    2d58:	80 93 4c 03 	sts	0x034C, r24
    2d5c:	8d cf       	rjmp	.-230    	; 0x2c78 <_ZL8nextNotev+0x54>
    2d5e:	0e 94 b8 14 	call	0x2970	; 0x2970 <_ZL9getNumberv>
    2d62:	b8 2e       	mov	r11, r24
    2d64:	80 93 db 02 	sts	0x02DB, r24
    2d68:	87 cf       	rjmp	.-242    	; 0x2c78 <_ZL8nextNotev+0x54>
    2d6a:	ee 24       	eor	r14, r14
    2d6c:	e3 94       	inc	r14
    2d6e:	80 e0       	ldi	r24, 0x00	; 0
    2d70:	47 c0       	rjmp	.+142    	; 0x2e00 <_ZL8nextNotev+0x1dc>
    2d72:	0e 94 b8 14 	call	0x2970	; 0x2970 <_ZL9getNumberv>
    2d76:	bc 01       	movw	r22, r24
    2d78:	ce 01       	movw	r24, r28
    2d7a:	0e 94 38 18 	call	0x3070	; 0x3070 <__udivmodhi4>
    2d7e:	cb 01       	movw	r24, r22
    2d80:	88 0f       	add	r24, r24
    2d82:	99 1f       	adc	r25, r25
    2d84:	53 e0       	ldi	r21, 0x03	; 3
    2d86:	66 0f       	add	r22, r22
    2d88:	77 1f       	adc	r23, r23
    2d8a:	5a 95       	dec	r21
    2d8c:	e1 f7       	brne	.-8      	; 0x2d86 <_ZL8nextNotev+0x162>
    2d8e:	86 0f       	add	r24, r22
    2d90:	97 1f       	adc	r25, r23
    2d92:	90 93 df 02 	sts	0x02DF, r25
    2d96:	80 93 de 02 	sts	0x02DE, r24
    2d9a:	60 91 dc 02 	lds	r22, 0x02DC
    2d9e:	70 91 dd 02 	lds	r23, 0x02DD
    2da2:	0e 94 38 18 	call	0x3070	; 0x3070 <__udivmodhi4>
    2da6:	70 93 e1 02 	sts	0x02E1, r23
    2daa:	60 93 e0 02 	sts	0x02E0, r22
    2dae:	64 cf       	rjmp	.-312    	; 0x2c78 <_ZL8nextNotev+0x54>
    2db0:	0e 94 b8 14 	call	0x2970	; 0x2970 <_ZL9getNumberv>
    2db4:	90 93 e3 02 	sts	0x02E3, r25
    2db8:	80 93 e2 02 	sts	0x02E2, r24
    2dbc:	5d cf       	rjmp	.-326    	; 0x2c78 <_ZL8nextNotev+0x54>
    2dbe:	70 92 db 02 	sts	0x02DB, r7
    2dc2:	10 93 df 02 	sts	0x02DF, r17
    2dc6:	00 93 de 02 	sts	0x02DE, r16
    2dca:	f0 92 dd 02 	sts	0x02DD, r15
    2dce:	e0 92 dc 02 	sts	0x02DC, r14
    2dd2:	d0 92 e1 02 	sts	0x02E1, r13
    2dd6:	c0 92 e0 02 	sts	0x02E0, r12
    2dda:	90 92 e3 02 	sts	0x02E3, r9
    2dde:	80 92 e2 02 	sts	0x02E2, r8
    2de2:	10 92 4e 03 	sts	0x034E, r1
    2de6:	44 e0       	ldi	r20, 0x04	; 4
    2de8:	b4 2e       	mov	r11, r20
    2dea:	46 cf       	rjmp	.-372    	; 0x2c78 <_ZL8nextNotev+0x54>
    2dec:	10 92 4d 03 	sts	0x034D, r1
    2df0:	10 92 4c 03 	sts	0x034C, r1
    2df4:	63 c0       	rjmp	.+198    	; 0x2ebc <_ZL8nextNotev+0x298>
    2df6:	ee 24       	eor	r14, r14
    2df8:	89 e0       	ldi	r24, 0x09	; 9
    2dfa:	02 c0       	rjmp	.+4      	; 0x2e00 <_ZL8nextNotev+0x1dc>
    2dfc:	ee 24       	eor	r14, r14
    2dfe:	8b e0       	ldi	r24, 0x0B	; 11
    2e00:	9c e0       	ldi	r25, 0x0C	; 12
    2e02:	b9 9e       	mul	r11, r25
    2e04:	b0 2c       	mov	r11, r0
    2e06:	11 24       	eor	r1, r1
    2e08:	b8 0e       	add	r11, r24
    2e0a:	0e 94 96 14 	call	0x292c	; 0x292c <_ZL16currentCharacterv>
    2e0e:	8b 32       	cpi	r24, 0x2B	; 43
    2e10:	11 f0       	breq	.+4      	; 0x2e16 <_ZL8nextNotev+0x1f2>
    2e12:	83 32       	cpi	r24, 0x23	; 35
    2e14:	b9 f4       	brne	.+46     	; 0x2e44 <_ZL8nextNotev+0x220>
    2e16:	80 91 4c 03 	lds	r24, 0x034C
    2e1a:	90 91 4d 03 	lds	r25, 0x034D
    2e1e:	01 96       	adiw	r24, 0x01	; 1
    2e20:	90 93 4d 03 	sts	0x034D, r25
    2e24:	80 93 4c 03 	sts	0x034C, r24
    2e28:	b3 94       	inc	r11
    2e2a:	ef cf       	rjmp	.-34     	; 0x2e0a <_ZL8nextNotev+0x1e6>
    2e2c:	80 91 4c 03 	lds	r24, 0x034C
    2e30:	90 91 4d 03 	lds	r25, 0x034D
    2e34:	01 96       	adiw	r24, 0x01	; 1
    2e36:	90 93 4d 03 	sts	0x034D, r25
    2e3a:	80 93 4c 03 	sts	0x034C, r24
    2e3e:	ba 94       	dec	r11
    2e40:	0e 94 96 14 	call	0x292c	; 0x292c <_ZL16currentCharacterv>
    2e44:	8d 32       	cpi	r24, 0x2D	; 45
    2e46:	91 f3       	breq	.-28     	; 0x2e2c <_ZL8nextNotev+0x208>
    2e48:	c0 91 e0 02 	lds	r28, 0x02E0
    2e4c:	d0 91 e1 02 	lds	r29, 0x02E1
    2e50:	81 53       	subi	r24, 0x31	; 49
    2e52:	88 30       	cpi	r24, 0x08	; 8
    2e54:	58 f4       	brcc	.+22     	; 0x2e6c <_ZL8nextNotev+0x248>
    2e56:	c0 91 de 02 	lds	r28, 0x02DE
    2e5a:	d0 91 df 02 	lds	r29, 0x02DF
    2e5e:	0e 94 b8 14 	call	0x2970	; 0x2970 <_ZL9getNumberv>
    2e62:	bc 01       	movw	r22, r24
    2e64:	ce 01       	movw	r24, r28
    2e66:	0e 94 38 18 	call	0x3070	; 0x3070 <__udivmodhi4>
    2e6a:	eb 01       	movw	r28, r22
    2e6c:	8e 01       	movw	r16, r28
    2e6e:	0b c0       	rjmp	.+22     	; 0x2e86 <_ZL8nextNotev+0x262>
    2e70:	80 91 4c 03 	lds	r24, 0x034C
    2e74:	90 91 4d 03 	lds	r25, 0x034D
    2e78:	01 96       	adiw	r24, 0x01	; 1
    2e7a:	90 93 4d 03 	sts	0x034D, r25
    2e7e:	80 93 4c 03 	sts	0x034C, r24
    2e82:	c0 0f       	add	r28, r16
    2e84:	d1 1f       	adc	r29, r17
    2e86:	16 95       	lsr	r17
    2e88:	07 95       	ror	r16
    2e8a:	0e 94 96 14 	call	0x292c	; 0x292c <_ZL16currentCharacterv>
    2e8e:	8e 32       	cpi	r24, 0x2E	; 46
    2e90:	79 f3       	breq	.-34     	; 0x2e70 <_ZL8nextNotev+0x24c>
    2e92:	80 91 4e 03 	lds	r24, 0x034E
    2e96:	88 23       	and	r24, r24
    2e98:	39 f0       	breq	.+14     	; 0x2ea8 <_ZL8nextNotev+0x284>
    2e9a:	ce 01       	movw	r24, r28
    2e9c:	96 95       	lsr	r25
    2e9e:	87 95       	ror	r24
    2ea0:	80 93 4f 03 	sts	0x034F, r24
    2ea4:	c8 1b       	sub	r28, r24
    2ea6:	d1 09       	sbc	r29, r1
    2ea8:	ee 20       	and	r14, r14
    2eaa:	11 f0       	breq	.+4      	; 0x2eb0 <_ZL8nextNotev+0x28c>
    2eac:	bb 24       	eor	r11, r11
    2eae:	ba 94       	dec	r11
    2eb0:	8b 2d       	mov	r24, r11
    2eb2:	be 01       	movw	r22, r28
    2eb4:	40 91 e2 02 	lds	r20, 0x02E2
    2eb8:	0e 94 bc 15 	call	0x2b78	; 0x2b78 <_ZN15OrangutanBuzzer8playNoteEhjh>
    2ebc:	cd b7       	in	r28, 0x3d	; 61
    2ebe:	de b7       	in	r29, 0x3e	; 62
    2ec0:	ed e0       	ldi	r30, 0x0D	; 13
    2ec2:	0c 94 aa 18 	jmp	0x3154	; 0x3154 <__epilogue_restores__+0xa>

00002ec6 <__vector_15>:
    2ec6:	1f 92       	push	r1
    2ec8:	0f 92       	push	r0
    2eca:	0f b6       	in	r0, 0x3f	; 63
    2ecc:	0f 92       	push	r0
    2ece:	0b b6       	in	r0, 0x3b	; 59
    2ed0:	0f 92       	push	r0
    2ed2:	11 24       	eor	r1, r1
    2ed4:	2f 93       	push	r18
    2ed6:	3f 93       	push	r19
    2ed8:	4f 93       	push	r20
    2eda:	5f 93       	push	r21
    2edc:	6f 93       	push	r22
    2ede:	7f 93       	push	r23
    2ee0:	8f 93       	push	r24
    2ee2:	9f 93       	push	r25
    2ee4:	af 93       	push	r26
    2ee6:	bf 93       	push	r27
    2ee8:	ef 93       	push	r30
    2eea:	ff 93       	push	r31
    2eec:	80 91 52 03 	lds	r24, 0x0352
    2ef0:	90 91 53 03 	lds	r25, 0x0353
    2ef4:	9c 01       	movw	r18, r24
    2ef6:	21 50       	subi	r18, 0x01	; 1
    2ef8:	30 40       	sbci	r19, 0x00	; 0
    2efa:	30 93 53 03 	sts	0x0353, r19
    2efe:	20 93 52 03 	sts	0x0352, r18
    2f02:	00 97       	sbiw	r24, 0x00	; 0
    2f04:	11 f5       	brne	.+68     	; 0x2f4a <__vector_15+0x84>
    2f06:	10 92 6f 00 	sts	0x006F, r1
    2f0a:	78 94       	sei
    2f0c:	80 91 81 00 	lds	r24, 0x0081
    2f10:	88 7f       	andi	r24, 0xF8	; 248
    2f12:	81 60       	ori	r24, 0x01	; 1
    2f14:	80 93 81 00 	sts	0x0081, r24
    2f18:	80 e1       	ldi	r24, 0x10	; 16
    2f1a:	97 e2       	ldi	r25, 0x27	; 39
    2f1c:	90 93 89 00 	sts	0x0089, r25
    2f20:	80 93 88 00 	sts	0x0088, r24
    2f24:	10 92 8b 00 	sts	0x008B, r1
    2f28:	10 92 8a 00 	sts	0x008A, r1
    2f2c:	81 e0       	ldi	r24, 0x01	; 1
    2f2e:	80 93 da 02 	sts	0x02DA, r24
    2f32:	80 91 4c 03 	lds	r24, 0x034C
    2f36:	90 91 4d 03 	lds	r25, 0x034D
    2f3a:	00 97       	sbiw	r24, 0x00	; 0
    2f3c:	31 f0       	breq	.+12     	; 0x2f4a <__vector_15+0x84>
    2f3e:	80 91 51 03 	lds	r24, 0x0351
    2f42:	88 23       	and	r24, r24
    2f44:	11 f4       	brne	.+4      	; 0x2f4a <__vector_15+0x84>
    2f46:	0e 94 12 16 	call	0x2c24	; 0x2c24 <_ZL8nextNotev>
    2f4a:	ff 91       	pop	r31
    2f4c:	ef 91       	pop	r30
    2f4e:	bf 91       	pop	r27
    2f50:	af 91       	pop	r26
    2f52:	9f 91       	pop	r25
    2f54:	8f 91       	pop	r24
    2f56:	7f 91       	pop	r23
    2f58:	6f 91       	pop	r22
    2f5a:	5f 91       	pop	r21
    2f5c:	4f 91       	pop	r20
    2f5e:	3f 91       	pop	r19
    2f60:	2f 91       	pop	r18
    2f62:	0f 90       	pop	r0
    2f64:	0b be       	out	0x3b, r0	; 59
    2f66:	0f 90       	pop	r0
    2f68:	0f be       	out	0x3f, r0	; 63
    2f6a:	0f 90       	pop	r0
    2f6c:	1f 90       	pop	r1
    2f6e:	18 95       	reti

00002f70 <delayMicroseconds>:
    2f70:	6f 93       	push	r22
    2f72:	64 e0       	ldi	r22, 0x04	; 4
    2f74:	6a 95       	dec	r22
    2f76:	f1 f7       	brne	.-4      	; 0x2f74 <delayMicroseconds+0x4>
    2f78:	6f 91       	pop	r22
    2f7a:	01 97       	sbiw	r24, 0x01	; 1
    2f7c:	c9 f7       	brne	.-14     	; 0x2f70 <delayMicroseconds>
    2f7e:	08 95       	ret

00002f80 <_ZN18OrangutanSPIMaster4initEhh>:
    2f80:	a1 e0       	ldi	r26, 0x01	; 1
    2f82:	b0 e0       	ldi	r27, 0x00	; 0
    2f84:	e6 ec       	ldi	r30, 0xC6	; 198
    2f86:	f7 e1       	ldi	r31, 0x17	; 23
    2f88:	0c 94 98 18 	jmp	0x3130	; 0x3130 <__prologue_saves__+0x1e>
    2f8c:	18 2f       	mov	r17, r24
    2f8e:	24 99       	sbic	0x04, 4	; 4
    2f90:	09 c0       	rjmp	.+18     	; 0x2fa4 <_ZN18OrangutanSPIMaster4initEhh+0x24>
    2f92:	2c 99       	sbic	0x05, 4	; 5
    2f94:	07 c0       	rjmp	.+14     	; 0x2fa4 <_ZN18OrangutanSPIMaster4initEhh+0x24>
    2f96:	2c 9a       	sbi	0x05, 4	; 5
    2f98:	8e e1       	ldi	r24, 0x1E	; 30
    2f9a:	90 e0       	ldi	r25, 0x00	; 0
    2f9c:	69 83       	std	Y+1, r22	; 0x01
    2f9e:	0e 94 b8 17 	call	0x2f70	; 0x2f70 <delayMicroseconds>
    2fa2:	69 81       	ldd	r22, Y+1	; 0x01
    2fa4:	84 b1       	in	r24, 0x04	; 4
    2fa6:	80 6a       	ori	r24, 0xA0	; 160
    2fa8:	84 b9       	out	0x04, r24	; 4
    2faa:	26 98       	cbi	0x04, 6	; 4
    2fac:	81 2f       	mov	r24, r17
    2fae:	83 70       	andi	r24, 0x03	; 3
    2fb0:	80 65       	ori	r24, 0x50	; 80
    2fb2:	6c 7a       	andi	r22, 0xAC	; 172
    2fb4:	86 2b       	or	r24, r22
    2fb6:	8c bd       	out	0x2c, r24	; 44
    2fb8:	81 e0       	ldi	r24, 0x01	; 1
    2fba:	12 ff       	sbrs	r17, 2
    2fbc:	80 e0       	ldi	r24, 0x00	; 0
    2fbe:	8d bd       	out	0x2d, r24	; 45
    2fc0:	81 e0       	ldi	r24, 0x01	; 1
    2fc2:	90 e0       	ldi	r25, 0x00	; 0
    2fc4:	0e 94 66 14 	call	0x28cc	; 0x28cc <_ZN13OrangutanTime17delayMillisecondsEj>
    2fc8:	21 96       	adiw	r28, 0x01	; 1
    2fca:	e3 e0       	ldi	r30, 0x03	; 3
    2fcc:	0c 94 b4 18 	jmp	0x3168	; 0x3168 <__epilogue_restores__+0x1e>

00002fd0 <_ZN18OrangutanSPIMaster16transmitAndDelayEhh>:
    2fd0:	0f 93       	push	r16
    2fd2:	1f 93       	push	r17
    2fd4:	08 2f       	mov	r16, r24
    2fd6:	16 2f       	mov	r17, r22
    2fd8:	0c b4       	in	r0, 0x2c	; 44
    2fda:	06 fc       	sbrc	r0, 6
    2fdc:	04 c0       	rjmp	.+8      	; 0x2fe6 <_ZN18OrangutanSPIMaster16transmitAndDelayEhh+0x16>
    2fde:	80 e0       	ldi	r24, 0x00	; 0
    2fe0:	64 e0       	ldi	r22, 0x04	; 4
    2fe2:	0e 94 c0 17 	call	0x2f80	; 0x2f80 <_ZN18OrangutanSPIMaster4initEhh>
    2fe6:	0c b4       	in	r0, 0x2c	; 44
    2fe8:	04 fc       	sbrc	r0, 4
    2fea:	03 c0       	rjmp	.+6      	; 0x2ff2 <_ZN18OrangutanSPIMaster16transmitAndDelayEhh+0x22>
    2fec:	8c b5       	in	r24, 0x2c	; 44
    2fee:	80 61       	ori	r24, 0x10	; 16
    2ff0:	8c bd       	out	0x2c, r24	; 44
    2ff2:	0e bd       	out	0x2e, r16	; 46
    2ff4:	03 c0       	rjmp	.+6      	; 0x2ffc <_ZN18OrangutanSPIMaster16transmitAndDelayEhh+0x2c>
    2ff6:	0c b4       	in	r0, 0x2c	; 44
    2ff8:	04 fe       	sbrs	r0, 4
    2ffa:	0b c0       	rjmp	.+22     	; 0x3012 <_ZN18OrangutanSPIMaster16transmitAndDelayEhh+0x42>
    2ffc:	0d b4       	in	r0, 0x2d	; 45
    2ffe:	07 fe       	sbrs	r0, 7
    3000:	fa cf       	rjmp	.-12     	; 0x2ff6 <_ZN18OrangutanSPIMaster16transmitAndDelayEhh+0x26>
    3002:	11 23       	and	r17, r17
    3004:	21 f0       	breq	.+8      	; 0x300e <_ZN18OrangutanSPIMaster16transmitAndDelayEhh+0x3e>
    3006:	81 2f       	mov	r24, r17
    3008:	90 e0       	ldi	r25, 0x00	; 0
    300a:	0e 94 b8 17 	call	0x2f70	; 0x2f70 <delayMicroseconds>
    300e:	8e b5       	in	r24, 0x2e	; 46
    3010:	01 c0       	rjmp	.+2      	; 0x3014 <_ZN18OrangutanSPIMaster16transmitAndDelayEhh+0x44>
    3012:	80 e0       	ldi	r24, 0x00	; 0
    3014:	1f 91       	pop	r17
    3016:	0f 91       	pop	r16
    3018:	08 95       	ret

0000301a <__mulsi3>:
    301a:	62 9f       	mul	r22, r18
    301c:	d0 01       	movw	r26, r0
    301e:	73 9f       	mul	r23, r19
    3020:	f0 01       	movw	r30, r0
    3022:	82 9f       	mul	r24, r18
    3024:	e0 0d       	add	r30, r0
    3026:	f1 1d       	adc	r31, r1
    3028:	64 9f       	mul	r22, r20
    302a:	e0 0d       	add	r30, r0
    302c:	f1 1d       	adc	r31, r1
    302e:	92 9f       	mul	r25, r18
    3030:	f0 0d       	add	r31, r0
    3032:	83 9f       	mul	r24, r19
    3034:	f0 0d       	add	r31, r0
    3036:	74 9f       	mul	r23, r20
    3038:	f0 0d       	add	r31, r0
    303a:	65 9f       	mul	r22, r21
    303c:	f0 0d       	add	r31, r0
    303e:	99 27       	eor	r25, r25
    3040:	72 9f       	mul	r23, r18
    3042:	b0 0d       	add	r27, r0
    3044:	e1 1d       	adc	r30, r1
    3046:	f9 1f       	adc	r31, r25
    3048:	63 9f       	mul	r22, r19
    304a:	b0 0d       	add	r27, r0
    304c:	e1 1d       	adc	r30, r1
    304e:	f9 1f       	adc	r31, r25
    3050:	bd 01       	movw	r22, r26
    3052:	cf 01       	movw	r24, r30
    3054:	11 24       	eor	r1, r1
    3056:	08 95       	ret

00003058 <__udivmodqi4>:
    3058:	99 1b       	sub	r25, r25
    305a:	79 e0       	ldi	r23, 0x09	; 9
    305c:	04 c0       	rjmp	.+8      	; 0x3066 <__udivmodqi4_ep>

0000305e <__udivmodqi4_loop>:
    305e:	99 1f       	adc	r25, r25
    3060:	96 17       	cp	r25, r22
    3062:	08 f0       	brcs	.+2      	; 0x3066 <__udivmodqi4_ep>
    3064:	96 1b       	sub	r25, r22

00003066 <__udivmodqi4_ep>:
    3066:	88 1f       	adc	r24, r24
    3068:	7a 95       	dec	r23
    306a:	c9 f7       	brne	.-14     	; 0x305e <__udivmodqi4_loop>
    306c:	80 95       	com	r24
    306e:	08 95       	ret

00003070 <__udivmodhi4>:
    3070:	aa 1b       	sub	r26, r26
    3072:	bb 1b       	sub	r27, r27
    3074:	51 e1       	ldi	r21, 0x11	; 17
    3076:	07 c0       	rjmp	.+14     	; 0x3086 <__udivmodhi4_ep>

00003078 <__udivmodhi4_loop>:
    3078:	aa 1f       	adc	r26, r26
    307a:	bb 1f       	adc	r27, r27
    307c:	a6 17       	cp	r26, r22
    307e:	b7 07       	cpc	r27, r23
    3080:	10 f0       	brcs	.+4      	; 0x3086 <__udivmodhi4_ep>
    3082:	a6 1b       	sub	r26, r22
    3084:	b7 0b       	sbc	r27, r23

00003086 <__udivmodhi4_ep>:
    3086:	88 1f       	adc	r24, r24
    3088:	99 1f       	adc	r25, r25
    308a:	5a 95       	dec	r21
    308c:	a9 f7       	brne	.-22     	; 0x3078 <__udivmodhi4_loop>
    308e:	80 95       	com	r24
    3090:	90 95       	com	r25
    3092:	bc 01       	movw	r22, r24
    3094:	cd 01       	movw	r24, r26
    3096:	08 95       	ret

00003098 <__udivmodsi4>:
    3098:	a1 e2       	ldi	r26, 0x21	; 33
    309a:	1a 2e       	mov	r1, r26
    309c:	aa 1b       	sub	r26, r26
    309e:	bb 1b       	sub	r27, r27
    30a0:	fd 01       	movw	r30, r26
    30a2:	0d c0       	rjmp	.+26     	; 0x30be <__udivmodsi4_ep>

000030a4 <__udivmodsi4_loop>:
    30a4:	aa 1f       	adc	r26, r26
    30a6:	bb 1f       	adc	r27, r27
    30a8:	ee 1f       	adc	r30, r30
    30aa:	ff 1f       	adc	r31, r31
    30ac:	a2 17       	cp	r26, r18
    30ae:	b3 07       	cpc	r27, r19
    30b0:	e4 07       	cpc	r30, r20
    30b2:	f5 07       	cpc	r31, r21
    30b4:	20 f0       	brcs	.+8      	; 0x30be <__udivmodsi4_ep>
    30b6:	a2 1b       	sub	r26, r18
    30b8:	b3 0b       	sbc	r27, r19
    30ba:	e4 0b       	sbc	r30, r20
    30bc:	f5 0b       	sbc	r31, r21

000030be <__udivmodsi4_ep>:
    30be:	66 1f       	adc	r22, r22
    30c0:	77 1f       	adc	r23, r23
    30c2:	88 1f       	adc	r24, r24
    30c4:	99 1f       	adc	r25, r25
    30c6:	1a 94       	dec	r1
    30c8:	69 f7       	brne	.-38     	; 0x30a4 <__udivmodsi4_loop>
    30ca:	60 95       	com	r22
    30cc:	70 95       	com	r23
    30ce:	80 95       	com	r24
    30d0:	90 95       	com	r25
    30d2:	9b 01       	movw	r18, r22
    30d4:	ac 01       	movw	r20, r24
    30d6:	bd 01       	movw	r22, r26
    30d8:	cf 01       	movw	r24, r30
    30da:	08 95       	ret

000030dc <__divmodsi4>:
    30dc:	97 fb       	bst	r25, 7
    30de:	09 2e       	mov	r0, r25
    30e0:	05 26       	eor	r0, r21
    30e2:	0e d0       	rcall	.+28     	; 0x3100 <__divmodsi4_neg1>
    30e4:	57 fd       	sbrc	r21, 7
    30e6:	04 d0       	rcall	.+8      	; 0x30f0 <__divmodsi4_neg2>
    30e8:	d7 df       	rcall	.-82     	; 0x3098 <__udivmodsi4>
    30ea:	0a d0       	rcall	.+20     	; 0x3100 <__divmodsi4_neg1>
    30ec:	00 1c       	adc	r0, r0
    30ee:	38 f4       	brcc	.+14     	; 0x30fe <__divmodsi4_exit>

000030f0 <__divmodsi4_neg2>:
    30f0:	50 95       	com	r21
    30f2:	40 95       	com	r20
    30f4:	30 95       	com	r19
    30f6:	21 95       	neg	r18
    30f8:	3f 4f       	sbci	r19, 0xFF	; 255
    30fa:	4f 4f       	sbci	r20, 0xFF	; 255
    30fc:	5f 4f       	sbci	r21, 0xFF	; 255

000030fe <__divmodsi4_exit>:
    30fe:	08 95       	ret

00003100 <__divmodsi4_neg1>:
    3100:	f6 f7       	brtc	.-4      	; 0x30fe <__divmodsi4_exit>
    3102:	90 95       	com	r25
    3104:	80 95       	com	r24
    3106:	70 95       	com	r23
    3108:	61 95       	neg	r22
    310a:	7f 4f       	sbci	r23, 0xFF	; 255
    310c:	8f 4f       	sbci	r24, 0xFF	; 255
    310e:	9f 4f       	sbci	r25, 0xFF	; 255
    3110:	08 95       	ret

00003112 <__prologue_saves__>:
    3112:	2f 92       	push	r2
    3114:	3f 92       	push	r3
    3116:	4f 92       	push	r4
    3118:	5f 92       	push	r5
    311a:	6f 92       	push	r6
    311c:	7f 92       	push	r7
    311e:	8f 92       	push	r8
    3120:	9f 92       	push	r9
    3122:	af 92       	push	r10
    3124:	bf 92       	push	r11
    3126:	cf 92       	push	r12
    3128:	df 92       	push	r13
    312a:	ef 92       	push	r14
    312c:	ff 92       	push	r15
    312e:	0f 93       	push	r16
    3130:	1f 93       	push	r17
    3132:	cf 93       	push	r28
    3134:	df 93       	push	r29
    3136:	cd b7       	in	r28, 0x3d	; 61
    3138:	de b7       	in	r29, 0x3e	; 62
    313a:	ca 1b       	sub	r28, r26
    313c:	db 0b       	sbc	r29, r27
    313e:	0f b6       	in	r0, 0x3f	; 63
    3140:	f8 94       	cli
    3142:	de bf       	out	0x3e, r29	; 62
    3144:	0f be       	out	0x3f, r0	; 63
    3146:	cd bf       	out	0x3d, r28	; 61
    3148:	09 94       	ijmp

0000314a <__epilogue_restores__>:
    314a:	2a 88       	ldd	r2, Y+18	; 0x12
    314c:	39 88       	ldd	r3, Y+17	; 0x11
    314e:	48 88       	ldd	r4, Y+16	; 0x10
    3150:	5f 84       	ldd	r5, Y+15	; 0x0f
    3152:	6e 84       	ldd	r6, Y+14	; 0x0e
    3154:	7d 84       	ldd	r7, Y+13	; 0x0d
    3156:	8c 84       	ldd	r8, Y+12	; 0x0c
    3158:	9b 84       	ldd	r9, Y+11	; 0x0b
    315a:	aa 84       	ldd	r10, Y+10	; 0x0a
    315c:	b9 84       	ldd	r11, Y+9	; 0x09
    315e:	c8 84       	ldd	r12, Y+8	; 0x08
    3160:	df 80       	ldd	r13, Y+7	; 0x07
    3162:	ee 80       	ldd	r14, Y+6	; 0x06
    3164:	fd 80       	ldd	r15, Y+5	; 0x05
    3166:	0c 81       	ldd	r16, Y+4	; 0x04
    3168:	1b 81       	ldd	r17, Y+3	; 0x03
    316a:	aa 81       	ldd	r26, Y+2	; 0x02
    316c:	b9 81       	ldd	r27, Y+1	; 0x01
    316e:	ce 0f       	add	r28, r30
    3170:	d1 1d       	adc	r29, r1
    3172:	0f b6       	in	r0, 0x3f	; 63
    3174:	f8 94       	cli
    3176:	de bf       	out	0x3e, r29	; 62
    3178:	0f be       	out	0x3f, r0	; 63
    317a:	cd bf       	out	0x3d, r28	; 61
    317c:	ed 01       	movw	r28, r26
    317e:	08 95       	ret

00003180 <malloc>:
    3180:	cf 93       	push	r28
    3182:	df 93       	push	r29
    3184:	ac 01       	movw	r20, r24
    3186:	82 30       	cpi	r24, 0x02	; 2
    3188:	91 05       	cpc	r25, r1
    318a:	10 f4       	brcc	.+4      	; 0x3190 <malloc+0x10>
    318c:	42 e0       	ldi	r20, 0x02	; 2
    318e:	50 e0       	ldi	r21, 0x00	; 0
    3190:	e0 91 ac 03 	lds	r30, 0x03AC
    3194:	f0 91 ad 03 	lds	r31, 0x03AD
    3198:	20 e0       	ldi	r18, 0x00	; 0
    319a:	30 e0       	ldi	r19, 0x00	; 0
    319c:	a0 e0       	ldi	r26, 0x00	; 0
    319e:	b0 e0       	ldi	r27, 0x00	; 0
    31a0:	24 c0       	rjmp	.+72     	; 0x31ea <malloc+0x6a>
    31a2:	80 81       	ld	r24, Z
    31a4:	91 81       	ldd	r25, Z+1	; 0x01
    31a6:	84 17       	cp	r24, r20
    31a8:	95 07       	cpc	r25, r21
    31aa:	d0 f0       	brcs	.+52     	; 0x31e0 <malloc+0x60>
    31ac:	84 17       	cp	r24, r20
    31ae:	95 07       	cpc	r25, r21
    31b0:	71 f4       	brne	.+28     	; 0x31ce <malloc+0x4e>
    31b2:	82 81       	ldd	r24, Z+2	; 0x02
    31b4:	93 81       	ldd	r25, Z+3	; 0x03
    31b6:	10 97       	sbiw	r26, 0x00	; 0
    31b8:	29 f0       	breq	.+10     	; 0x31c4 <malloc+0x44>
    31ba:	13 96       	adiw	r26, 0x03	; 3
    31bc:	9c 93       	st	X, r25
    31be:	8e 93       	st	-X, r24
    31c0:	12 97       	sbiw	r26, 0x02	; 2
    31c2:	2c c0       	rjmp	.+88     	; 0x321c <malloc+0x9c>
    31c4:	90 93 ad 03 	sts	0x03AD, r25
    31c8:	80 93 ac 03 	sts	0x03AC, r24
    31cc:	27 c0       	rjmp	.+78     	; 0x321c <malloc+0x9c>
    31ce:	21 15       	cp	r18, r1
    31d0:	31 05       	cpc	r19, r1
    31d2:	19 f0       	breq	.+6      	; 0x31da <malloc+0x5a>
    31d4:	82 17       	cp	r24, r18
    31d6:	93 07       	cpc	r25, r19
    31d8:	18 f4       	brcc	.+6      	; 0x31e0 <malloc+0x60>
    31da:	9c 01       	movw	r18, r24
    31dc:	bd 01       	movw	r22, r26
    31de:	ef 01       	movw	r28, r30
    31e0:	92 81       	ldd	r25, Z+2	; 0x02
    31e2:	83 81       	ldd	r24, Z+3	; 0x03
    31e4:	df 01       	movw	r26, r30
    31e6:	e9 2f       	mov	r30, r25
    31e8:	f8 2f       	mov	r31, r24
    31ea:	30 97       	sbiw	r30, 0x00	; 0
    31ec:	d1 f6       	brne	.-76     	; 0x31a2 <malloc+0x22>
    31ee:	21 15       	cp	r18, r1
    31f0:	31 05       	cpc	r19, r1
    31f2:	f9 f0       	breq	.+62     	; 0x3232 <malloc+0xb2>
    31f4:	c9 01       	movw	r24, r18
    31f6:	84 1b       	sub	r24, r20
    31f8:	95 0b       	sbc	r25, r21
    31fa:	84 30       	cpi	r24, 0x04	; 4
    31fc:	91 05       	cpc	r25, r1
    31fe:	80 f4       	brcc	.+32     	; 0x3220 <malloc+0xa0>
    3200:	8a 81       	ldd	r24, Y+2	; 0x02
    3202:	9b 81       	ldd	r25, Y+3	; 0x03
    3204:	61 15       	cp	r22, r1
    3206:	71 05       	cpc	r23, r1
    3208:	21 f0       	breq	.+8      	; 0x3212 <malloc+0x92>
    320a:	fb 01       	movw	r30, r22
    320c:	93 83       	std	Z+3, r25	; 0x03
    320e:	82 83       	std	Z+2, r24	; 0x02
    3210:	04 c0       	rjmp	.+8      	; 0x321a <malloc+0x9a>
    3212:	90 93 ad 03 	sts	0x03AD, r25
    3216:	80 93 ac 03 	sts	0x03AC, r24
    321a:	fe 01       	movw	r30, r28
    321c:	32 96       	adiw	r30, 0x02	; 2
    321e:	42 c0       	rjmp	.+132    	; 0x32a4 <malloc+0x124>
    3220:	fe 01       	movw	r30, r28
    3222:	e8 0f       	add	r30, r24
    3224:	f9 1f       	adc	r31, r25
    3226:	41 93       	st	Z+, r20
    3228:	51 93       	st	Z+, r21
    322a:	02 97       	sbiw	r24, 0x02	; 2
    322c:	99 83       	std	Y+1, r25	; 0x01
    322e:	88 83       	st	Y, r24
    3230:	39 c0       	rjmp	.+114    	; 0x32a4 <malloc+0x124>
    3232:	80 91 aa 03 	lds	r24, 0x03AA
    3236:	90 91 ab 03 	lds	r25, 0x03AB
    323a:	00 97       	sbiw	r24, 0x00	; 0
    323c:	41 f4       	brne	.+16     	; 0x324e <malloc+0xce>
    323e:	80 91 fe 02 	lds	r24, 0x02FE
    3242:	90 91 ff 02 	lds	r25, 0x02FF
    3246:	90 93 ab 03 	sts	0x03AB, r25
    324a:	80 93 aa 03 	sts	0x03AA, r24
    324e:	20 91 fc 02 	lds	r18, 0x02FC
    3252:	30 91 fd 02 	lds	r19, 0x02FD
    3256:	21 15       	cp	r18, r1
    3258:	31 05       	cpc	r19, r1
    325a:	41 f4       	brne	.+16     	; 0x326c <malloc+0xec>
    325c:	2d b7       	in	r18, 0x3d	; 61
    325e:	3e b7       	in	r19, 0x3e	; 62
    3260:	80 91 00 03 	lds	r24, 0x0300
    3264:	90 91 01 03 	lds	r25, 0x0301
    3268:	28 1b       	sub	r18, r24
    326a:	39 0b       	sbc	r19, r25
    326c:	e0 91 aa 03 	lds	r30, 0x03AA
    3270:	f0 91 ab 03 	lds	r31, 0x03AB
    3274:	e2 17       	cp	r30, r18
    3276:	f3 07       	cpc	r31, r19
    3278:	98 f4       	brcc	.+38     	; 0x32a0 <malloc+0x120>
    327a:	2e 1b       	sub	r18, r30
    327c:	3f 0b       	sbc	r19, r31
    327e:	24 17       	cp	r18, r20
    3280:	35 07       	cpc	r19, r21
    3282:	70 f0       	brcs	.+28     	; 0x32a0 <malloc+0x120>
    3284:	ca 01       	movw	r24, r20
    3286:	02 96       	adiw	r24, 0x02	; 2
    3288:	28 17       	cp	r18, r24
    328a:	39 07       	cpc	r19, r25
    328c:	48 f0       	brcs	.+18     	; 0x32a0 <malloc+0x120>
    328e:	8e 0f       	add	r24, r30
    3290:	9f 1f       	adc	r25, r31
    3292:	90 93 ab 03 	sts	0x03AB, r25
    3296:	80 93 aa 03 	sts	0x03AA, r24
    329a:	41 93       	st	Z+, r20
    329c:	51 93       	st	Z+, r21
    329e:	02 c0       	rjmp	.+4      	; 0x32a4 <malloc+0x124>
    32a0:	e0 e0       	ldi	r30, 0x00	; 0
    32a2:	f0 e0       	ldi	r31, 0x00	; 0
    32a4:	cf 01       	movw	r24, r30
    32a6:	df 91       	pop	r29
    32a8:	cf 91       	pop	r28
    32aa:	08 95       	ret

000032ac <free>:
    32ac:	0f 93       	push	r16
    32ae:	1f 93       	push	r17
    32b0:	cf 93       	push	r28
    32b2:	df 93       	push	r29
    32b4:	9c 01       	movw	r18, r24
    32b6:	00 97       	sbiw	r24, 0x00	; 0
    32b8:	09 f4       	brne	.+2      	; 0x32bc <free+0x10>
    32ba:	8c c0       	rjmp	.+280    	; 0x33d4 <free+0x128>
    32bc:	dc 01       	movw	r26, r24
    32be:	12 97       	sbiw	r26, 0x02	; 2
    32c0:	13 96       	adiw	r26, 0x03	; 3
    32c2:	1c 92       	st	X, r1
    32c4:	1e 92       	st	-X, r1
    32c6:	12 97       	sbiw	r26, 0x02	; 2
    32c8:	60 91 ac 03 	lds	r22, 0x03AC
    32cc:	70 91 ad 03 	lds	r23, 0x03AD
    32d0:	61 15       	cp	r22, r1
    32d2:	71 05       	cpc	r23, r1
    32d4:	89 f4       	brne	.+34     	; 0x32f8 <free+0x4c>
    32d6:	8d 91       	ld	r24, X+
    32d8:	9c 91       	ld	r25, X
    32da:	11 97       	sbiw	r26, 0x01	; 1
    32dc:	82 0f       	add	r24, r18
    32de:	93 1f       	adc	r25, r19
    32e0:	20 91 aa 03 	lds	r18, 0x03AA
    32e4:	30 91 ab 03 	lds	r19, 0x03AB
    32e8:	28 17       	cp	r18, r24
    32ea:	39 07       	cpc	r19, r25
    32ec:	69 f5       	brne	.+90     	; 0x3348 <free+0x9c>
    32ee:	b0 93 ab 03 	sts	0x03AB, r27
    32f2:	a0 93 aa 03 	sts	0x03AA, r26
    32f6:	6e c0       	rjmp	.+220    	; 0x33d4 <free+0x128>
    32f8:	fb 01       	movw	r30, r22
    32fa:	40 e0       	ldi	r20, 0x00	; 0
    32fc:	50 e0       	ldi	r21, 0x00	; 0
    32fe:	01 c0       	rjmp	.+2      	; 0x3302 <free+0x56>
    3300:	fc 01       	movw	r30, r24
    3302:	ea 17       	cp	r30, r26
    3304:	fb 07       	cpc	r31, r27
    3306:	30 f4       	brcc	.+12     	; 0x3314 <free+0x68>
    3308:	82 81       	ldd	r24, Z+2	; 0x02
    330a:	93 81       	ldd	r25, Z+3	; 0x03
    330c:	af 01       	movw	r20, r30
    330e:	00 97       	sbiw	r24, 0x00	; 0
    3310:	b9 f7       	brne	.-18     	; 0x3300 <free+0x54>
    3312:	1f c0       	rjmp	.+62     	; 0x3352 <free+0xa6>
    3314:	e9 01       	movw	r28, r18
    3316:	22 97       	sbiw	r28, 0x02	; 2
    3318:	fb 83       	std	Y+3, r31	; 0x03
    331a:	ea 83       	std	Y+2, r30	; 0x02
    331c:	08 81       	ld	r16, Y
    331e:	19 81       	ldd	r17, Y+1	; 0x01
    3320:	c9 01       	movw	r24, r18
    3322:	80 0f       	add	r24, r16
    3324:	91 1f       	adc	r25, r17
    3326:	8e 17       	cp	r24, r30
    3328:	9f 07       	cpc	r25, r31
    332a:	59 f4       	brne	.+22     	; 0x3342 <free+0x96>
    332c:	80 81       	ld	r24, Z
    332e:	91 81       	ldd	r25, Z+1	; 0x01
    3330:	80 0f       	add	r24, r16
    3332:	91 1f       	adc	r25, r17
    3334:	02 96       	adiw	r24, 0x02	; 2
    3336:	99 83       	std	Y+1, r25	; 0x01
    3338:	88 83       	st	Y, r24
    333a:	82 81       	ldd	r24, Z+2	; 0x02
    333c:	93 81       	ldd	r25, Z+3	; 0x03
    333e:	9b 83       	std	Y+3, r25	; 0x03
    3340:	8a 83       	std	Y+2, r24	; 0x02
    3342:	41 15       	cp	r20, r1
    3344:	51 05       	cpc	r21, r1
    3346:	29 f4       	brne	.+10     	; 0x3352 <free+0xa6>
    3348:	b0 93 ad 03 	sts	0x03AD, r27
    334c:	a0 93 ac 03 	sts	0x03AC, r26
    3350:	41 c0       	rjmp	.+130    	; 0x33d4 <free+0x128>
    3352:	fa 01       	movw	r30, r20
    3354:	b3 83       	std	Z+3, r27	; 0x03
    3356:	a2 83       	std	Z+2, r26	; 0x02
    3358:	c1 91       	ld	r28, Z+
    335a:	d1 91       	ld	r29, Z+
    335c:	ec 0f       	add	r30, r28
    335e:	fd 1f       	adc	r31, r29
    3360:	ae 17       	cp	r26, r30
    3362:	bf 07       	cpc	r27, r31
    3364:	81 f4       	brne	.+32     	; 0x3386 <free+0xda>
    3366:	f9 01       	movw	r30, r18
    3368:	92 91       	ld	r25, -Z
    336a:	82 91       	ld	r24, -Z
    336c:	8c 0f       	add	r24, r28
    336e:	9d 1f       	adc	r25, r29
    3370:	02 96       	adiw	r24, 0x02	; 2
    3372:	da 01       	movw	r26, r20
    3374:	11 96       	adiw	r26, 0x01	; 1
    3376:	9c 93       	st	X, r25
    3378:	8e 93       	st	-X, r24
    337a:	82 81       	ldd	r24, Z+2	; 0x02
    337c:	93 81       	ldd	r25, Z+3	; 0x03
    337e:	13 96       	adiw	r26, 0x03	; 3
    3380:	9c 93       	st	X, r25
    3382:	8e 93       	st	-X, r24
    3384:	12 97       	sbiw	r26, 0x02	; 2
    3386:	e0 e0       	ldi	r30, 0x00	; 0
    3388:	f0 e0       	ldi	r31, 0x00	; 0
    338a:	02 c0       	rjmp	.+4      	; 0x3390 <free+0xe4>
    338c:	fb 01       	movw	r30, r22
    338e:	bc 01       	movw	r22, r24
    3390:	db 01       	movw	r26, r22
    3392:	12 96       	adiw	r26, 0x02	; 2
    3394:	8d 91       	ld	r24, X+
    3396:	9c 91       	ld	r25, X
    3398:	13 97       	sbiw	r26, 0x03	; 3
    339a:	00 97       	sbiw	r24, 0x00	; 0
    339c:	b9 f7       	brne	.-18     	; 0x338c <free+0xe0>
    339e:	cb 01       	movw	r24, r22
    33a0:	02 96       	adiw	r24, 0x02	; 2
    33a2:	2d 91       	ld	r18, X+
    33a4:	3c 91       	ld	r19, X
    33a6:	11 97       	sbiw	r26, 0x01	; 1
    33a8:	82 0f       	add	r24, r18
    33aa:	93 1f       	adc	r25, r19
    33ac:	20 91 aa 03 	lds	r18, 0x03AA
    33b0:	30 91 ab 03 	lds	r19, 0x03AB
    33b4:	28 17       	cp	r18, r24
    33b6:	39 07       	cpc	r19, r25
    33b8:	69 f4       	brne	.+26     	; 0x33d4 <free+0x128>
    33ba:	30 97       	sbiw	r30, 0x00	; 0
    33bc:	29 f4       	brne	.+10     	; 0x33c8 <free+0x11c>
    33be:	10 92 ad 03 	sts	0x03AD, r1
    33c2:	10 92 ac 03 	sts	0x03AC, r1
    33c6:	02 c0       	rjmp	.+4      	; 0x33cc <free+0x120>
    33c8:	13 82       	std	Z+3, r1	; 0x03
    33ca:	12 82       	std	Z+2, r1	; 0x02
    33cc:	70 93 ab 03 	sts	0x03AB, r23
    33d0:	60 93 aa 03 	sts	0x03AA, r22
    33d4:	df 91       	pop	r29
    33d6:	cf 91       	pop	r28
    33d8:	1f 91       	pop	r17
    33da:	0f 91       	pop	r16
    33dc:	08 95       	ret

000033de <do_rand>:
    33de:	8f 92       	push	r8
    33e0:	9f 92       	push	r9
    33e2:	af 92       	push	r10
    33e4:	bf 92       	push	r11
    33e6:	cf 92       	push	r12
    33e8:	df 92       	push	r13
    33ea:	ef 92       	push	r14
    33ec:	ff 92       	push	r15
    33ee:	cf 93       	push	r28
    33f0:	df 93       	push	r29
    33f2:	ec 01       	movw	r28, r24
    33f4:	88 81       	ld	r24, Y
    33f6:	99 81       	ldd	r25, Y+1	; 0x01
    33f8:	aa 81       	ldd	r26, Y+2	; 0x02
    33fa:	bb 81       	ldd	r27, Y+3	; 0x03
    33fc:	00 97       	sbiw	r24, 0x00	; 0
    33fe:	a1 05       	cpc	r26, r1
    3400:	b1 05       	cpc	r27, r1
    3402:	21 f4       	brne	.+8      	; 0x340c <do_rand+0x2e>
    3404:	84 e2       	ldi	r24, 0x24	; 36
    3406:	99 ed       	ldi	r25, 0xD9	; 217
    3408:	ab e5       	ldi	r26, 0x5B	; 91
    340a:	b7 e0       	ldi	r27, 0x07	; 7
    340c:	bc 01       	movw	r22, r24
    340e:	cd 01       	movw	r24, r26
    3410:	2d e1       	ldi	r18, 0x1D	; 29
    3412:	33 ef       	ldi	r19, 0xF3	; 243
    3414:	41 e0       	ldi	r20, 0x01	; 1
    3416:	50 e0       	ldi	r21, 0x00	; 0
    3418:	0e 94 6e 18 	call	0x30dc	; 0x30dc <__divmodsi4>
    341c:	49 01       	movw	r8, r18
    341e:	5a 01       	movw	r10, r20
    3420:	27 ea       	ldi	r18, 0xA7	; 167
    3422:	31 e4       	ldi	r19, 0x41	; 65
    3424:	40 e0       	ldi	r20, 0x00	; 0
    3426:	50 e0       	ldi	r21, 0x00	; 0
    3428:	0e 94 0d 18 	call	0x301a	; 0x301a <__mulsi3>
    342c:	6b 01       	movw	r12, r22
    342e:	7c 01       	movw	r14, r24
    3430:	c5 01       	movw	r24, r10
    3432:	b4 01       	movw	r22, r8
    3434:	2c ee       	ldi	r18, 0xEC	; 236
    3436:	34 ef       	ldi	r19, 0xF4	; 244
    3438:	4f ef       	ldi	r20, 0xFF	; 255
    343a:	5f ef       	ldi	r21, 0xFF	; 255
    343c:	0e 94 0d 18 	call	0x301a	; 0x301a <__mulsi3>
    3440:	dc 01       	movw	r26, r24
    3442:	cb 01       	movw	r24, r22
    3444:	c8 0e       	add	r12, r24
    3446:	d9 1e       	adc	r13, r25
    3448:	ea 1e       	adc	r14, r26
    344a:	fb 1e       	adc	r15, r27
    344c:	f7 fe       	sbrs	r15, 7
    344e:	08 c0       	rjmp	.+16     	; 0x3460 <do_rand+0x82>
    3450:	8f ef       	ldi	r24, 0xFF	; 255
    3452:	9f ef       	ldi	r25, 0xFF	; 255
    3454:	af ef       	ldi	r26, 0xFF	; 255
    3456:	bf e7       	ldi	r27, 0x7F	; 127
    3458:	c8 0e       	add	r12, r24
    345a:	d9 1e       	adc	r13, r25
    345c:	ea 1e       	adc	r14, r26
    345e:	fb 1e       	adc	r15, r27
    3460:	c8 82       	st	Y, r12
    3462:	d9 82       	std	Y+1, r13	; 0x01
    3464:	ea 82       	std	Y+2, r14	; 0x02
    3466:	fb 82       	std	Y+3, r15	; 0x03
    3468:	c6 01       	movw	r24, r12
    346a:	9f 77       	andi	r25, 0x7F	; 127
    346c:	df 91       	pop	r29
    346e:	cf 91       	pop	r28
    3470:	ff 90       	pop	r15
    3472:	ef 90       	pop	r14
    3474:	df 90       	pop	r13
    3476:	cf 90       	pop	r12
    3478:	bf 90       	pop	r11
    347a:	af 90       	pop	r10
    347c:	9f 90       	pop	r9
    347e:	8f 90       	pop	r8
    3480:	08 95       	ret

00003482 <rand_r>:
    3482:	0e 94 ef 19 	call	0x33de	; 0x33de <do_rand>
    3486:	08 95       	ret

00003488 <rand>:
    3488:	82 e0       	ldi	r24, 0x02	; 2
    348a:	93 e0       	ldi	r25, 0x03	; 3
    348c:	0e 94 ef 19 	call	0x33de	; 0x33de <do_rand>
    3490:	08 95       	ret

00003492 <srand>:
    3492:	a0 e0       	ldi	r26, 0x00	; 0
    3494:	b0 e0       	ldi	r27, 0x00	; 0
    3496:	80 93 02 03 	sts	0x0302, r24
    349a:	90 93 03 03 	sts	0x0303, r25
    349e:	a0 93 04 03 	sts	0x0304, r26
    34a2:	b0 93 05 03 	sts	0x0305, r27
    34a6:	08 95       	ret

000034a8 <memcpy_P>:
    34a8:	fb 01       	movw	r30, r22
    34aa:	dc 01       	movw	r26, r24
    34ac:	02 c0       	rjmp	.+4      	; 0x34b2 <memcpy_P+0xa>
    34ae:	05 90       	lpm	r0, Z+
    34b0:	0d 92       	st	X+, r0
    34b2:	41 50       	subi	r20, 0x01	; 1
    34b4:	50 40       	sbci	r21, 0x00	; 0
    34b6:	d8 f7       	brcc	.-10     	; 0x34ae <memcpy_P+0x6>
    34b8:	08 95       	ret

000034ba <_exit>:
    34ba:	f8 94       	cli

000034bc <__stop_program>:
    34bc:	ff cf       	rjmp	.-2      	; 0x34bc <__stop_program>
